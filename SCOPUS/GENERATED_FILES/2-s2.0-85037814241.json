{"Title": "Concurrent data structures linked in time", "Year": 2017, "Source": "Leibniz Int. Proc. Informatics, LIPIcs", "Volume": "74", "Issue": null, "Art.No": null, "PageStart": 81, "PageEnd": 830, "CitedBy": 5, "DOI": "10.4230/LIPIcs.ECOOP.2017.8", "Link": "https://www.scopus.com/inward/record.uri?partnerID=HzOxMe3b&scp=85037814241&origin=inward", "Abstract": "Arguments about correctness of a concurrent data structure are typically carried out by using the notion of linearizability and specifying the linearization points of the data structure's procedures. Such arguments are often cumbersome as the linearization points' position in time can be dynamic (depend on the interference, run-time values and events from the past, or even future), non-local (appear in procedures other than the one considered), and whose position in the execution trace may only be determined after the considered procedure has already terminated. In this paper we propose a new method, based on a separation-style logic, for reasoning about concurrent objects with such linearization points. We embrace the dynamic nature of linearization points, and encode it as part of the data structure's auxiliary state, so that it can be dynamically modified in place by auxiliary code, as needed when some appropriate run-time event occurs. We name the idea linking-in-time, because it reduces temporal reasoning to spatial reasoning. For example, modifying a temporal position of a linearization point can be modeled similarly to a pointer update in separation logic. Furthermore, the auxiliary state provides a convenient way to concisely express the properties essential for reasoning about clients of such concurrent objects. We illustrate the method by verifying (mechanically in Coq) an intricate optimal snapshot algorithm due to Jayanti, as well as some clients.", "AuthorKeywords": ["Concurrent snapshots", "FCSL", "Linearization Points", "Separation logic"], "IndexKeywords": ["Concurrent data structures", "Concurrent objects", "Concurrent snapshots", "FCSL", "Separation logic", "Snapshot algorithms", "Temporal position", "Temporal reasoning"], "DocumentType": "Conference Proceeding", "PublicationStage": null, "OpenAccess": null, "EID": "2-s2.0-85037814241", "SubjectAreas": [["Software", "COMP", "1712"]], "AuthorData": {"55918827000": {"Name": "Delbianco G.A.", "AuthorID": "55918827000", "AffiliationID": "60028442", "AffiliationName": "Universidad Polit\u00e9cnica de Madrid"}, "15047125400": {"Name": "Nanevski A.", "AuthorID": "15047125400", "AffiliationID": "60121727", "AffiliationName": "IMDEA Software Institute"}, "8558971000": {"Name": "Banerjee A.", "AuthorID": "8558971000", "AffiliationID": "60121727", "AffiliationName": "IMDEA Software Institute"}, "35114020100": {"Name": "Sergey I.", "AuthorID": "35114020100", "AffiliationID": "60022148", "AffiliationName": "University College London"}}}