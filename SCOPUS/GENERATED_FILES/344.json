{"Title": "Genetic improvement of programs", "Year": 2015, "Source": "Proc. - Int. Symp. Symb. Numer. Algorithms Sci. Comput., SYNASC", "Volume": null, "Issue": null, "Art.No": null, "PageStart": 14, "PageEnd": 19, "CitedBy": 5, "DOI": "10.1109/SYNASC.2014.10", "Link": "https://www.scopus.com/inward/record.uri?partnerID=HzOxMe3b&scp=84924237434&origin=inward", "Abstract": "\u00a9 2014 IEEE.Genetic programming can optimise software, including: evolving test benchmarks, generating hyper-heuristics by searching meta-heuristics, generating communication protocols, composing telephony systems and web services, generating improved hashing and C++ heap managers, redundant programming and even automatic bug fixing. Particularly in embedded real-time or mobile systems, there may be many ways to trade off expenses (such as time, memory, energy, power consumption) vs. Functionality. Human programmers cannot try them all. Also the best multi-objective Pareto trade off may change with time, underlying hardware and network connection or user behaviour. It may be GP can automatically suggest different trade offs for each new market. Recent results include substantial speed up by evolving a new version of a program customised for a special case.", "AuthorKeywords": ["Automatic software re-engineering", "Bowtie2GP", "genetic programming", "GP", "GPGPU", "multiple objective exploration", "SBSE", "search based software engineering"], "IndexKeywords": ["GPGPU", "Multiple-objectives", "SBSE", "Search-based software engineering", "Software reengineering"], "DocumentType": "Conference Proceeding", "PublicationStage": null, "OpenAccess": 2, "EID": "2-s2.0-84924237434", "SubjectAreas": [["Computational Theory and Mathematics", "COMP", "1703"], ["Theoretical Computer Science", "MATH", "2614"], ["Applied Mathematics", "MATH", "2604"]], "AuthorData": {"8724450500": {"Name": "Langdon W.B.", "AuthorID": "8724450500", "AffiliationID": "60022148", "AffiliationName": "CREST, Department of Computer Science, University College London"}}}