{"Title": "Programming language abstractions for modularly verified distributed systems", "Year": 2017, "Source": "Leibniz Int. Proc. Informatics, LIPIcs", "Volume": "71", "Issue": null, "Art.No": null, "PageStart": null, "PageEnd": null, "CitedBy": 4, "DOI": "10.4230/LIPIcs.SNAPL.2017.19", "Link": "https://www.scopus.com/inward/record.uri?partnerID=HzOxMe3b&scp=85019588709&origin=inward", "Abstract": "\u00a9 James R. Wilcox, Ilya Sergey, and Zachary Tatlock; licensed under Creative Commons License CC-BY.Distributed systems are rarely developed as monolithic programs. Instead, like any software, these systems may consist of multiple program components, which are then compiled separately and linked together. Modern systems also incorporate various services interacting with each other and with client applications. However, state-of-the-art verification tools focus predominantly on verifying standalone, closed-world protocols or systems, thus failing to account for the compositional nature of distributed systems. For example, standalone verification has the drawback that when protocols and their optimized implementations evolve, one must re-verify the entire system from scratch, instead of leveraging compositionality to contain the reverification effort. In this paper, we focus on the challenge of modular verification of distributed systems with respect to high-level protocol invariants as well as for low-level implementation safety properties. We argue that the missing link between the two is a programming paradigm that would allow one to reason about both high-level distributed protocols and low-level implementation primitives in a single verification-friendly framework. Such a link would make it possible to reap the benefits from both the vast body of research in distributed computing, focused on modular protocol decomposition and consistency properties, as well as from the recent advances in program verification, enabling construction of provably correct systems implementations. To showcase the modular verification challenges, we present some typical scenarios of decomposition between a distributed protocol and its implementations. We then describe our ongoing research agenda, in which we are attempting to address the outlined problems by providing a typing discipline and a set of domain-specific primitives for specifying, implementing and verifying distributed systems. Our approach, mechanized within a proof assistant, provides the means of decomposition necessary for modular proofs about distributed protocols and systems.", "AuthorKeywords": ["Dependent types", "Distributed protocols", "Distributed systems", "Domainspecific languages", "Program logics", "Program verification", "Type systems"], "IndexKeywords": ["Dependent types", "Distributed protocols", "Distributed systems", "Domain specific languages", "Program logic", "Program Verification", "Type systems"], "DocumentType": "Conference Proceeding", "PublicationStage": null, "OpenAccess": null, "EID": "2-s2.0-85019588709", "SubjectAreas": [["Software", "COMP", "1712"]], "AuthorData": {"57014485000": {"Name": "Wilcox J.", "AuthorID": "57014485000", "AffiliationID": "60015481", "AffiliationName": "University of Washington"}, "26429019900": {"Name": "Tatlock Z.", "AuthorID": "26429019900", "AffiliationID": "60015481", "AffiliationName": "University of Washington"}, "35114020100": {"Name": "Sergey I.", "AuthorID": "35114020100", "AffiliationID": "60022148", "AffiliationName": "University College London"}}}