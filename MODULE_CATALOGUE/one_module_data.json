{
    "COMP0023": {
        "Title": "Networked Systems (COMP0023)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Stefano Vissicchio",
        "Description": "Aims:To offer a rigorous introduction to the problems that arise when networking computer systems, and algorithms and systems design that solve these problems. The architectural principles and protocols that underlie the internet will be explained in detail. Topics to be taught will include the physical layer, widely used link layers (wired and wireless), MAC protocols, internetworking, intra-domain routing, reliable transport, congestion control, wide-area (policy) routing, naming, network security, the end-to-end principle, and network applications.Learning outcomes:On successful completion of the module, students will understand the nuances of interactions between a network's distributed entities. This is a vital skill, without which one cannot truly be said to understand networking. To help students develop this skill, COMP0023 incorporates significant programming courseworks in Python and Java, in which students build or interact with working implementations of network protocols.Content:-Introduction to Networking; Information, Error Control Coding, and Compression;-Medium Access Control: CDMA, ALOHA, and Ethernet; Link Layer Addressing and Forwarding; Spanning Trees;-Achieving Reliability; Stop-and-Wait, Go-Back-N;-Achieving Reliability (cont); Selective Repeat; Intro to Internetworking; Network Address Translation; Inside Internet Routers;-The Domain Name System; Multi-hop Networks and end-to-end Arguments;-Reliable Transport and TCP;-TCP and Congestion Control;-Intra-Domain Routing; Introduction, Distance-Vector, Link-State;-Inter-Domain Routing; BGP;-Wireless Networks; 802.11 MAC;-Security: Firewalls, Worms and IDSes; Content Delivery HTTP, Web Caching, and Content Distribution Networks.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have EITHER (i) passed BSc/ MEng Computer Science (Years 1 and 2) at UCL; OR (ii) passed MEng Mathematical Computation (Years 1 and 2) at UCL."
    },
    "COMP0035": {
        "Title": "Applied Software Engineering (COMP0035)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mrs Sarah Sanders",
        "Description": "Aims:The primary aim of the course is for students with some prior experience of programming to gain an understanding of the software development processes used to control and manage information systems projects. It aims to do so through lectures, activities and practical experience of applying the processes to manage a project to specify an information system using industry-recognised, object-oriented techniques. A secondary aim is for the students to gain further experience with computational thinking. They will start by formulating an idea for a computer application and will subsequently translate this into a set of models such that the application could be developed and tested.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0033": {
        "Title": "Computer Science Internship (COMP0033)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr Shi Zhou",
        "Description": "Aims:This module is the departmental implementation of the Engineering Sciences Faculty 'Year in Industry' option. A student works as a paid intern in a relevant company for between 9-12 months, extending their degree programme by one year. The year is taken between the penultimate and final year of a BSc or MEng programme. Students resume the standard curriculum when they return to UCL in the next year.Year in Industry opportunities will be advertised as they become available. There is no guarantee that places will be available, or will be with a specific company or in a specific area. Any placement must be approved by the department and by the Faculty Teaching Committee, which will make sure that adequate, identifiable supervision and training are provided by the host company, that adequate supervision is provided by the student’s home department, and that the student’s plan of work for the year is related to the student’s core discipline and is of adequate level.Students who are approved to take a Year in Industry will transfer to the corresponding 'Year in Industry' degree programme, BSc or MEng Computer Science (with Year in Industry) or MEng Mathematical Computation (with Year in Industry).This is a 30 Credits at FHEQ Level 6. Students who successfully complete the Placement Year will be awarded credit for this module. The Year is weighted at zero for the purpose of Award Classification. Students who fail the First Attempt will be offered a Second Attempt via resubmission of the Written Report . Failure at the Second Attempt will result in a final module grade of Fail and the student will transfer back to their original programme of study.Learning outcomes:"
    },
    "COMP0057": {
        "Title": "Research in Information Security (COMP0057)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marie Vasek",
        "Description": "Aims:The module aims to develop an understanding of what research in information security is about, how to identify a contribution, what the quality standards in scientific publications are, and to study selected technical sub-topics in depth.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0016": {
        "Title": "Systems Engineering (COMP0016)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr Dean Mohamedally",
        "Description": "Aims:"
    },
    "COMP0122": {
        "Title": "MSc Computer Graphics, Vision and Imaging Project (COMP0122)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Professor Lourdes De Agapito Vicente",
        "Description": "Aims:To give students experience of undertaking and completing a large research project, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:To be able to: work individually developing a major project, plan and coordinate development activities, make realistic work commitments, present the work done effectively to a deadline.Content:Overview:-There is no set syllabus: students identify their chosen project area and are allocated a supervisor who is a member of academic staff. The supervisor provides support and guidance. The project runs from immediately after the pre-Easter examination period (March) with the students responsible for organising themselves and their work, with advice from their supervisor. Student are expected to meet with their supervisor on a regular basis, as agreed with the supervisor. A typical project will comprise approximately 4 weeks of background reading, analysis and design, followed by 12 weeks of implementation and finally 4 weeks to write an in-depth dissertation;-Exceptionally a student may undertake a project that does not require programming skills. However a student undertaking such a project would be required to demonstrate an exceptionally high level of skill in the areas of analysis synthesis critical assessment and design. It is not a soft option and students are advised that such a project is typically much harder than a 'programming' project;-Some projects are done in conjunction with other departments in UCL. Others are done in conjunction with external organisations although supervision is always provided within the department;"
    },
    "COMP0147": {
        "Title": "Discrete Mathematics for Computer Scientists (COMP0147)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Robin Hirsch",
        "Description": "Aims:To equip first year computer science students with knowledge of foundational mathematics and logic that will be needed for future computer science modules. To provide students with basic tools and skills for mathematical problem solving, proof and refutation.Learning outcomes:On successful completion of the module, a student will be able to:1. analyse and solve typical problems in discrete mathematics and logic;2. identify and reason with the logical content of arguments;3. carry out standard mathematical proofs and refutations;Content:The first part of the course will focus on foundational discrete mathematics, including but not necessarily limited to: functions and relations, permutations, group theory, set theory, cardinalities, diagonalisation, linear algebra and combinatorics. The module continues with mathematical reasoning, logical notation and proof by mathematical induction.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must have passed A-level Mathematics (or an appropriate equivalent)."
    },
    "COMP0127": {
        "Title": "Robotic Systems Engineering (COMP0127)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Danail Stoyanov",
        "Description": "Aims:The students will gain insight into robotics systems and the general concepts, mathematic and algorithms that underpin moving and actuating robotic arms and devices. Specific topics we cover: fundamental linear algebra, transformations, kinematics and inverse kinematics, actuation dynamics and mechanisms, and motion planning. These will all be applied to problems in simulation and programming of robotic systems.Learning outcomes:On successful completion of the module, a student will be able to:1. Understand robot kinematics;2. Understand robot motion planning;3. Understand different robotic mechanisms, specifically robotic arms;4. Programme with Python and ROS (optional C++);5. Apply learned theory to programming solutions for robotics problems in simulation.Content:-The aim of this module is to provide the basic theory required for solving problems involving the motion of robotics and autonomous systems from a practitioner point of view;-The module presents theory and methodology for analysis and modelling of robot kinematics, and methods for moving robots within workspaces. Special emphasis is placed on:-Linear algebra needed for robot motion and transformation;-Robot kinematics and DH tables;-Inverse kinematics and solving inverse systems;-Planning and executing robot motion;-Theoretical lectures will be accompanied by corresponding practical exercises using ROS and predominantly carried out in simulation;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must (i) be able to use Linux and have some background/experience in programming, especially using Python (and preferably ROS); (ii) be comfortable with linear algebra mathematics; and (iii) for the next academic year (2019-2020), the module will run on Ubuntu 18.04 (Bionic) and the lab materials/coursework will run on ROS Melodic. Students are required to have a laptop that has a minimum of 2GHz dual core processor, 2GB RAM, 30-40 GB of hard-drive space and an internet connection, can run an installation of ROS on Linux and be used during lab sessions."
    },
    "COMP0145": {
        "Title": "Research Methods and Making Skills (COMP0145)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Youngjun Cho",
        "Description": "Aims:This module will equip students with the basics of: quantitative and qualitative research methods, and basic computing and making skills.For the research methods, students will learn about the concepts, ideas, fundamentals of planning and conducting research, starting with how to make a research question. Students will then explore methods for data collection and data analysis tools for quantitative and qualitative data.For the computing and making skills, students will learn about both physical and software prototyping: spanning from basic low-fidelity prototyping (e.g. storyboard), 3d printing to programming. Arduino programming will be used for controlling electronic components including sensor and actuators (e.g. for haptic feedback). Python programming will be mainly for data visualisation."
    },
    "COMP0108": {
        "Title": "Research Methods in Software Engineering (COMP0108)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Justyna Petke",
        "Description": "Aims:To introduce students to cutting-edge research methods in software engineering emphasising the close reading of research papers and the critical, yet balanced, evaluation of research ideas.Learning outcomes:On successful completion of the module, a student will be able to:1.identify research areas in software engineering, discuss their seminal problems and solution techniques;2.critically review and discuss research papers in software engineering, and evaluate the strength of evidence;3.understand how papers are reviewed and accepted at conferences and journals;4.explain the variety of research methods used in software engineering and identify what research method is appropriate in what context;-Students should also gain a good knowledge of a number of areas of research carried out in the Software Systems Engineering group;Content:-This module will teach students how to conduct research in software engineering. It will introduce them to seminal papers and the cutting-edge research that UCL faculty are pursuing;-The module will begin by discussing what research is from the point of view of software engineering. It will discuss finding, evaluating and formulating research ideas. This module focuses on helping students develop the skills and habits needed to closely read research papers;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have a good standard of computer literacy and programming."
    },
    "COMP0003": {
        "Title": "Theory of Computation (COMP0003)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr James Brotherston",
        "Description": "Aims:The module aims to introduce students to formal logical reasoning and to fundamental concepts in the theory of computation and formal languages.Learning outcomes:On successful completion of the module, a student will be able to:1.identify and reason with the logical content of arguments;2.recognise, write down and reason about automata and language grammars;3.carry out standard proofs and refutations involving logic and computational models.Content:This course introduces students to the theory of computation. The first 5 weeks of the course will focus on mathematical logic, including: propositional logic, first-order logic, proof by induction and modal logic. The second 5 weeks will focus on fundamentals of computation, automata and language theory.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have A-level Mathematics (or equivalent)."
    },
    "COMP0012": {
        "Title": "Compilers (COMP0012)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Earl Barr",
        "Description": "Aims:This is a practical module whose primary goal is develop an understanding of the operation of compilers and the development and specification of computer-based languages. The course pulls together threads from underlying theory, most notably from logic and from data structures and algorithms, and builds on these a practical exercise in which students create a compiler of their own using commonly available compiler development tools.Learning outcomes:On successful completion of the module, a student will be able to:1. build lexical analysers and use them in the construction of parsers;2. express the grammar of a programming language;3. build syntax analysers and use them in the construction of parsers;4. perform the operations of semantic analysis; build a code generator;5. discuss the merits of different optimisation schemes.Content:"
    },
    "COMP0124": {
        "Title": "Multi-agent Artificial Intelligence (COMP0124)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Jun Wang",
        "Description": "Aims:The module is intended to provide an introduction of multi-agent machine learning, a subfield of Artificial Intelligence (AI)."
    },
    "COMP0138": {
        "Title": "Individual Project for Year 4 MEng (COMP0138)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr John Dowell",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial and challenging individual project running over both teaching terms, applying knowledge learned throughout their degree programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a high academic standard via a written report. The project work should incorporate advanced ideas and methodologies derived from 3rd and 4th year modules, as well as emphasise research and evaluation skills.Learning outcomes:On successful completion of the module, a student will be able to:1. work individually to undertake a major project;2. plan and coordinate the project activities to meet the deadlines;3. make realistic work commitments;4. write a substantial report to document the project results;5. demonstrate good research and evaluation skills;6. be able to investigate and identify solutions to one or more challenging problems;Content:"
    },
    "COMP0118": {
        "Title": "Computational Modelling for Biomedical Imaging (COMP0118)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Daniel Alexander",
        "Description": "Aims:"
    },
    "COMP0089": {
        "Title": "Reinforcement Learning (COMP0089)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Hado van Hasselt",
        "Description": "Aims:The module aims to introduce students to the foundations of reinforcement learning, and to equip students with the ability to successfully implement, apply and test relevant learning algorithms.Learning outcomes:On successful completion of the module, a student will be able to:1. understand the basics of reinforcement learning paradigms;2. understand the theoretical foundations, formalisms and algorithms in reinforcement learning;3. understand how to apply reinforcement learning algorithms to environments with complex dynamics;4. understand how to combine reinforcement learning with function approximation, and specifically with modern deep learning methods (deep reinforcement learning).Content:The module is about prediction and control using reinforcement learning, including aspects of deep reinforcement learning, i.e., the application of neural networks-based functional approximation to reinforcement learning problems.The module will cover the following topics:1. Markov decision processes2. Planning by dynamic programming3. Model-free prediction and control4. Value function approximation5. Policy gradient methods, Actor-critic algorithms6. Integration of Learning and Planning7. Exploration vs exploitation trade-offs"
    },
    "COMP0037": {
        "Title": "Robotic Systems (COMP0037)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Simon Julier",
        "Description": "Aims:"
    },
    "COMP0067": {
        "Title": "App Engineering (COMP0067)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Yun Fu",
        "Description": "Aims:This project-based module introduces the concepts and methods required for the design and construction of apps software systems for a real-world client. It aims to develop a broad understanding of the disciplines of requirements and prototyping in human-computer interaction (HCI), project management and software engineering. It aims to realise a research and team coordinated approach in an engineering, societal and managerial context. It applies the principles of programming with the development of apps via learning-by-doing and problem-based learning (PBL) approaches. This is an intensely practical module and full student engagement outside of lectures and in lab classes is critical to successful completion of the module. To ensure that the process of designing and implementing web and mobile applications is fully understood, the module requires students to undertake a major group project where they must work with an external client to develop and deliver a working application. This takes students through all the stages of a software development project, applying the concepts taught via lectures and online material. Outcomes in addition to the software deliverable include real-world client engagement, team management and project documentation deliverables. The project clients come from a wide range of backgrounds, including companies of all sizes, the NHS, academic organisations and charities. Each client defines an application and technologies that they have a real need for and will put into use. A successful project will deliver a working proof of concept application ready for client handover as research materials. The interaction with clients to develop software meeting real-world needs and practical understanding of the human-computer interaction methods is a unique and defining characteristic of this module and provides students with a thorough introduction to the processes and challenges involved.Learning outcomes:On successful completion of the module, a student will be able to:1. Demonstrate the principles of appropriate HCI, project management and software engineering methods;2. Design, document and implement the software for a real-world client application, which could be a mobile app or web service;3. Design and implement graphical user interfaces suitable for scaling on multiple devices and resolutions;4. Understand effective teamwork methods, project documentation and project organisation skills;5. Apply experience of interacting with a real client with user centred design methods considerations weighted strongly in the design aspect of the project.Content:Project work:-The apps development project begins at the start of term, with three major milestones (Requirements and HCI, Prototype and Deliverable) and continues until the final submission is made."
    },
    "COMP0163": {
        "Title": "Blockchain Technologies (COMP0163)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Jiahua Xu",
        "Description": "This module is designed to explore the key mechanisms and features of blockchains and distributed ledgers with a focus on the financial services industry. This will include how business processes and traditional financial assets can be placed on distributed platforms, core aspects of the technology—cryptography, consensus protocols and peer-to-peer networking—with particular reference to Bitcoin. Enhancements of the Bitcoin core protocol and features of other crypto assets will also be discussed. The basics of cryptography and its applications to cryptocurrencies; historical examples to centralised cryptocurrencies; foundations of modern decentralised cryptocurrencies; Byzantine fault tolerant consensus; mechanics of Bitcoin platform including storage, mining, wallets, etc.; alternative platforms, including Ethereum, the XRP ledger and EOS; inter-blockchain communication; smart contracts; potential applications of decentralised ledgers in finance and their pros and cons. Decentralised applications and Decentralised Autonomous Organisations will also be explored. A more practical part of the course will feature hands-on sessions on how to implement smart contracts and code business logic on a permissioned blockchain."
    },
    "COMP0129": {
        "Title": "Robotic Sensing, Manipulation and Interaction (COMP0129)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Dimitrios Kanoulas",
        "Description": "Aims:"
    },
    "COMP0158": {
        "Title": "MSc Data Science and Machine Learning Project (COMP0158)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Mr Dariush Hosseini",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:1. work individually developing a major project;2. plan and coordinate development activities;3. make realistic work commitments;4. present the work done effectively to a deadline.Content:There is no set syllabus: students identify their chosen project area and are allocated a supervisor who is a member of academic staff. The supervisor provides support and guidance.The project runs from immediately after the examination period (May/June); students are responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor.Some projects are done in conjunction with other departments of the College, others are done in conjunction with external organisations subject to approval by the department. In all cases at least one supervisor must be from within the department who will provide as a minimum project management advice.Project report:The main report documents the results of the project. The deadline for submission is normally the first week of September.Formatting details:-The dissertation text (defined as everything except title page, table of contents, references and appendices) should typically be between 30 and 100 pages in 12 point type and 1.5 or double spacing. The total dissertation length (main text together with appendices) should under no circumstances exceed 120 pages;-Students should place their code in an online repository and provide access details to it in their dissertation;-Writing the dissertation in LaTeX is optional, but strongly recommended.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0053": {
        "Title": "Affective Computing and Human-Robot Interaction (COMP0053)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Nadia Berthouze",
        "Description": "Aims:The module targets students who have no previous knowledge in cognitive science and emotion theory and therefore the aim of Part A of the module is to give a basic introduction to the theory of emotion from physiological and psychological viewpoints and to understand its importance in human decision and communication processes. Part B will concentrate on the application of machine learning techniques to automatic emotion recognition by looking at current applications (e.g. in entertainment, education, and health) and available sensing technology. Part C will focus on the challenges in designing robots that are capable of socially interacting with humans. Examples of current applications (e.g. in entertainment, health, rehabilitation, service robotics) will be used to identify problems and discuss affective computing challenges and approaches for the topics taught in Parts A and B.Learning outcomes:To have a basic knowledge of emotion models and of how technology (e.g. robot) can be endowed with the ability to affectively and socially interact with its user. To understand the challenges that affective computing and social HRI pose to the machine learning field and identify the advantages and disadvantages of different approaches to address those issues.Content:Emotion theory:"
    },
    "COMP0058": {
        "Title": "Applied Cryptography and Cryptanalysis (COMP0058)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marie Vasek",
        "Description": "Aims:"
    },
    "COMP0102": {
        "Title": "Software Abstractions and Systems Integration (COMP0102)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Emmanuel Letier",
        "Description": "Aims:Students will develop skills and knowledge to design, implement and integrate large-scale software systems from heterogeneous components and services. Emphasis will be put on fundamental principles and practical issues of system integration projects. Students will also develop essential research skills needed to stay at the leading edge of software development throughout their career.Learning outcomes:On successful completion of the module, a student will be able to:1.demonstrate knowledge and critical awareness of techniques and technologies for systems integration;2.apply such knowledge to the development of a substantial system by teams of developers;3.independently research and evaluate new techniques and technologies for system integration;4.communicate their evaluation to a variety of stakeholders in a professional environment.Content:Agile development practices: working with user stories, agile architecture, agile testing.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have practical experience of software design, programming, testing and debugging, at least equivalent to FHEQ Level 6.It is recommended to have taken COMP0101 and COMP0104 in Term 1 (since software development activities build on an industrial project started in COMP0101) AND have good working experience of software development tools and environments."
    },
    "COMP0048": {
        "Title": "Financial Engineering (COMP0048)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Riaz Ahmad",
        "Description": "Aims:This module introduces the applied mathematical and computational aspects of Quantitative Finance;Learning outcomes:On successful completion of the module, a student will be able to successfully apply the necessary probability and differential equation based approach to the pricing of financial derivatives; using both quantitative and numerical techniques;Content:Financial Products and Markets:-Time value of money and applications. Equities, indices, foreign exchange and commodities. Futures, Forwards and Options. Payoff, and P and L diagrams. Put-Call parity.Stochastic Calculus:-Brownian motion and properties, Itô’s lemma and Itô integral. Stochastic Differential Equations – drift and diffusion; Geometric Brownian Motion and Vasicek model. Forward and Backward Kolmogorov equations for the transition density; Black-Scholes Model:-Assumptions, PDE and pricing formulae for European calls and puts. Extending to dividends, FX and commodities. The Greeks and risk management- theta, delta, gamma, vega and rho and their role in hedging. Two factor models and multi-asset options; Mathematics of early exercise:-Perpetual American calls and puts; optimal exercise strategy and the smooth pasting condition; Computational Finance:-Solving the pricing PDEs numerically using Explicit Finite Difference Scheme. Random number generation in Excel – RAND(), NORMSINV(), simulating random walks, correlations. Examining statistical properties of stock returns.Fixed income world: – Zero coupon bonds and coupon bearing bonds; yield curves, duration and convexity. Bond Pricing Equation (BPE). Popular models for the spot rate.Stochastic interest rate models:- Vasicek, CIR, Ho and Lee, and Hull and White. Solutions of the BPE;Introduction to Exotics:-Basic features and classification of exotic options. Simple exotics – Binaries, one-touch, power options, compound and exchange options. Weak and strong path dependency- barriers, Asians and Lookbacks. Sampling- continuous and discrete. Pricing using the PDE framework;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have a good understanding of basic probability and differential equations."
    },
    "COMP0084": {
        "Title": "Information Retrieval and Data Mining (COMP0084)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Emine Yilmaz",
        "Description": "Aims:The module is aimed at an entry level study of information retrieval and data mining techniques. It is about how to find relevant information and subsequently extract meaningful patterns out of it. While the basic theories and mathematical models of information retrieval and data mining are covered, the course is primarily focused on practical algorithms of textual document indexing, relevance ranking, web usage mining, text analytics, as well as their performance evaluations.Learning outcomes:On successful completion of the module, a student will master both the theoretical and practical aspects of information retrieval and data mining, and will be able to understand:1. the common algorithms and techniques for information retrieval (document indexing and retrieval, query processing, etc);2. the quantitative evaluation methods for the IR systems and data mining techniques;3. the popular probabilistic retrieval methods and ranking principles;4. the techniques and algorithms existing in practical retrieval and data mining systems such as those in web search engines and recommender systems, including the recently popular topic of deep learning;5. basic algorithms that can be used to make predictions out of data.Content:Overview of the fields:Study some basic concepts of information retrieval and data mining, such as the concept of relevance, association rules, and knowledge discovery. Understand the conceptual models of an information retrieval and knowledge discovery system.Indexing and Text Processing:Introduce various indexing techniques for textual information items, such as inverted indices, tokenization, stemming and stop words. Techniques used for text compression, such as the Lempel-ziv algorithm and Huffman Coding will be covered.Retrieval Methods:Study popular retrieval models (boolean, vector space, binary independence, language modelling). Probability ranking principle. Other commonly-used techniques such as relevance feedback, pseudo relevance feedback, and query expansion will also be covered;Measurements:Online and offline Evaluation techniques to evaluate retrieval quality. Commonly used evaluation metrics such as average precision, NDCG, etc. Cranfield Paradigm and TREC conferences, as well as some recently popular techniques such as interleaving will be discussed;Data Mining:Study basic techniques, algorithms, and systems of data mining and analytics, including frequent pattern and correlation and association analysis, basic machine learning algorithms such as linear regression and logistic regression. Discussion on basic personalisation and usage mining techniques.Emerging Areas:Study new emerging areas such as learning to rank, deep learning, word embeddings and topic modelling.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) an understanding of probability and statistics; and (ii) proficiency in Java or Python programming (as demonstrated by a least one programming project in the past)."
    },
    "COMP0091": {
        "Title": "MSc Machine Learning Project (COMP0091)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Mark Herbster",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:To be able to:"
    },
    "COMP0060": {
        "Title": "Malware (COMP0060)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr David Clark",
        "Description": "Aims:To provide students with:"
    },
    "COMP0146": {
        "Title": "Entrepreneurship Theory and Practice (COMP0146)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Philip Treleaven",
        "Description": "Aims:"
    },
    "COMP0080": {
        "Title": "Graphical Models (COMP0080)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Dmitry Adamskiy",
        "Description": "Aims:To give an introduction to probabilistic modelling covering the broad theoretical landscape. The course aims to cover much of the first 12 chapters of the course textbook www.cs.ucl.ac.uk/staff/d.barber/brml/ The emphasis is on probabilistic modelling of discrete variables.Learning outcomes:On successful completion of the module, a student will be able to construct probabilistic models, learn parameters and perform inference. This forms the foundation of many models in the wider sciences and students should be able to develop novel models for applications in a variety of related areas.Content:"
    },
    "COMP0050": {
        "Title": "Machine Learning with Applications in Finance (COMP0050)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Fabio Caccioli",
        "Description": "Aims:This module aims at introducing students to basic ML tools, covering both supervised and unsupervised learning methods. We discuss some of the underlying principles and students will develop practical skills to use these methods in financial applications. In their coursework, students can perform their own data analyses in the language they prefer (the suggested one being MATLAB).Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0128": {
        "Title": "Robotic Control Theory and Systems (COMP0128)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Francisco Porto Guerra E Vasconcelos",
        "Description": "Aims:"
    },
    "COMP0085": {
        "Title": "Approximate Inference and Learning in Probabilistic Models (COMP0085)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Maneesh Sahani",
        "Description": "Aims:The module will present the foundations of approximate inference and learning in probabilistic graphical models (e.g. Bayesian networks and Markov networks), with particular focus on models composed from conditional exponential family distributions. Both stochastic (Monte Carlo) methods and deterministic approximations will be covered. The methods will be discussed in relation to practical problems in real-world inference in Machine Learning, including problems in tracking and learning.Learning outcomes:Students will be able to understand how to derive and implement state-of-the-art approximate inference techniques and be able to make contributions to research in this area.Content:-Nonlinear, hierarchical (deep), and distributed models;-Independent component analysis, Boltzmann machines, Dirichlet topic models, manifold discovery;-Mean-field methods, variational approximations and variational Bayes;-Expectation propagation;-Loopy belief propagation, the Bethe free energy and extensions;-Convex methods and convexified bounds;-Monte-Carlo methods: including rejection and importance sampling, Gibbs, Metropolis-Hastings, anealed importance sampling, Hamiltonian Monte-Carlo, slice sampling, sequential Monte-Carlo (particle filtering);-Other topics as time permits.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must have taken COMP0086 in Term 1."
    },
    "COMP0034": {
        "Title": "Application Programming for Data Science (COMP0034)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mrs Sarah Sanders",
        "Description": "Aims:"
    },
    "COMP0047": {
        "Title": "Data Science (COMP0047)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Giacomo Livan",
        "Description": "Aims:"
    },
    "COMP0105": {
        "Title": "Financial Institutions and Markets (COMP0105)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Carolyn Phelan",
        "Description": "Aims:The module exposes participants to an overview of the Financial Markets and its key participants and products.Learning outcomes:On successful completion of the module, a student will be able to:1. Understand the function of financial markets and their key participants.2. Have an overview of the main exchanges and the different ways that their indices are calculated.3. Have an understanding of the fixed income market and its major products.4. Have an understanding of the FX market and its major products.5. Have an understanding of the equity market and its major products.6. Have an understanding of the derivative market and its major products.7. Understand credit risk, its effect on the pricing of financial assets and credit related financial products.Content:-Exter’s inverted pyramid;-Public and private sector institutional participants;-Major exchanges and indices-Overview of consumer, corporate and investment banking financial services;-Fixed income market and products;-FX market and products;-Equity market and products;-Derivative market and products;-Credit risk and derivatives;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have an understanding of the fundamental macroeconomics and software services."
    },
    "COMP0103": {
        "Title": "Validation and Verification (COMP0103)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Federica Sarro",
        "Description": "Aims:The module will train students in the principles and techniques of validating and verifying software systems. The training will be intellectually demanding and will cover not only the state-of-the practice in validation and verification, but also the most significant trends, problems and results in validation and verification research.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0078": {
        "Title": "Supervised Learning (COMP0078)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Mark Herbster",
        "Description": "Aims:"
    },
    "COMP0025": {
        "Title": "Introduction to Cryptography (COMP0025)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Philipp Jovanovic",
        "Description": "Aims:For many centuries the goal of cryptography was the protection of privacy of communications. Computers, digital communication and in particular the internet have brought an abundance of new security goals. Examples are: anonymity; authenticity; non-repudiation; authorized wiretapping (called law enforcement); and traceability. To each need corresponds security mechanisms to achieve it."
    },
    "COMP0082": {
        "Title": "Bioinformatics (COMP0082)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor David Jones",
        "Description": "Aims:The overall aim of this module is to introduce machine learning students to the field of bioinformatics (computational biology) and show how machine learning techniques can be employed in this area. The module is aimed at students who have no previous knowledge of biology and so the aim of Part 1 of the course is to give a basic introduction to molecular biology as a background for bioinformatics. Part 2 will concentrate on classical bioinformatics applications, particularly those which make good use of pattern recognition and machine learning methods. Part 3 will cover more recent bioinformatics areas, including gene expression analysis and systems biology.Learning outcomes:On successful completion of the module, a student will be able to:1. Have a basic knowledge of modern molecular biology and genomics;2. Understand the advantages and disadvantages of different machine learning techniques in bioinformatics and how the relative merits of different approaches can be evaluated by correct benchmarking techniques;3. Understand how theoretical approaches can be used to model and analyse complex biological systems.Content:Part 1: Basic molecular biology (6 lectures):-Introduction to Basic Cell Chemistry: Cell chemistry and macromolecules. Biochemical pathways e.g. Glycolysis. Protein structure and functions;-Cell Structure and Function: Cell components. Different types of cell. Chromosome structure and organisation. Cell division;-The Hereditary Material: DNA structure, replication and protein synthesis. Structure and roles of RNA. Genetic code. Mechanism of protein synthesis: transcription and translation. Mutation;-Recombinant DNA Technology: Restriction enzymes. Hybridisation techniques. Gene cloning. Polymerase chain reaction;-Genomics and Structural Genomics: Genes, genomes, mapping and DNA sequencing;Part 2:-Biological Databases: Overview of the use and maintenance of different databases in common use in biology;-Gene Prediction: Methods for analysing genomic DNA to identify genes. Techniques: neural networks and HMMs;-Detecting Distant Homology: Methods for inferring remote relationships between genes and proteins. Techniques: dynamic programming, HMMs, hierarchical clustering;-Protein Structure Prediction: Methods for predicting the secondary and tertiary structure of proteins. Techniques: neural networks, SVMs, genetic algorithms and stochastic global optimization;Part 3:-Systems Biology: biological networks, -omics technologies and data representation;-Transcriptomics; microarrays and RNAseq technologies and analysis methods. Techniques: differential gene detection, heirarchical clustering, dimensionality reduction, k-NN classification, neural networks.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must (i) be familiar with the principles of techniques such as neural networks, Support Vector Machines, and Hidden Markov Models; and (ii) able to program machine learning applications using a standard machine learning framework such as Matlab.Undergraduate students must have also taken at least one introductory machine learning module prior to starting this module. Suitable qualifying modules are COMP0078, COMP0088, COMP0090 or COMP0142."
    },
    "COMP0081": {
        "Title": "Applied Machine Learning (COMP0081)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Dmitry Adamskiy",
        "Description": "Aims:To give a detailed understanding of topics related to efficient implementation of large-scale machine learning with a focus on optimisation in both linear and non-linear machine learning models. Students will also gain experience in tackling real world problems through solving online machine learning challenges. A key aim is that students understand the challenges of optimisation and associated time and space complexities of various approaches.Learning outcomes:On successful completion of the module, a student will:1. have a good understanding of practical issues arising in implementing machine learning in practice, including engineering challenges as well as the data ethics considerations;2. become familiar with techniques used in practice to solve real world machine learning problems and will be able to apply these techniques.Content:-Methods for solving Large Scale Linear Systems, including Conjugate Gradients;-Classical methods for Regression and Classification including linear and logistic regression;-Clustering Methods for Unsupervised Learning;-Fast Nearest Neighbours-Matrix and Tensor Factorisation;-Visualisation methods including tSNE;-Ensembling, Gradient Boosting Machines;-Data Ethics; Fairness in Machine Learning.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) understanding and abilities with Linear Algebra, Multivariate Calculus and Probability at mathematics FHEQ Level 4; (ii) familiarity with coding a high-level language in order to complete assessments (strongly recommend that students are skilled in Python); and (iii) have taken COMP0088 or COMP0078 in Term 1.Note that it is also recommended to have taken COMP0080 or COMP0086 in Term 1. This module is not an introduction to machine learning."
    },
    "COMP0030": {
        "Title": "Research Methods (COMP0030)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Anthony Hunter",
        "Description": "Aims:The aims of this module are to: deepen the student's appreciation of what research in computer science is and how it is carried out; teach students how to read research publications critically; teach students how to evaluate research ideas; teach students how to perform a literature survey; outline the work needed to produce a research paper; and introduce the students to both seminal papers and cutting-edge research in computer science.Learning outcomes:On successful completion of the module, a student will be able to:1. identify seminal and cutting-edge topics in computer science;2. distinguish research topics from engineering tasks;3. know how to go about evaluating the novelty and contribution of a research idea;4. write a critical survey; Students should also gain a good knowledge of a number of areas of research carried out in the department.Content:Students are split into groups and each assigned a supervisor who will give them a batch of research papers and help to answer questions on those papers. Speakers from research groups in the department give an overview of their group's activities.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND have passed Years 1 and 2 of BSc/ MEng Computer Science."
    },
    "COMP0055": {
        "Title": "Computer Security II (COMP0055)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Steven Murdoch",
        "Description": "Aims:"
    },
    "COMP0168": {
        "Title": "Machine Learning Seminar (COMP0168)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marc Deisenroth",
        "Description": "This course is designed to introduce students to the most current research topics in machine learning. Such topics will correspond to “trending” topics within the last five years as represented in International Machine Learning Conferences. The backbone of the course will be a series of lectures on a given set of selected topics for that year. As appropriate this may be supplemented by seminar-style class work where current research papers are read in common, discussed, and presented."
    },
    "COMP0017": {
        "Title": "Computability and Complexity Theory (COMP0017)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Robin Hirsch",
        "Description": "Aims:The module addresses the theoretical and practical limitations of computation and provides a theoretical framework for modelling computation. The concepts of undecidability and intractability are introduced through a number of examples. The module will convey the proof techniques that are used to classify problems and it is intended that students learn how to apply them in order to classify unfamiliar problems for themselves.Learning outcomes:On successful completion of the module, a student will be able to:1. analyse the complexity of a variety of problems and algorithms;2. reduce one problem to another;3. prove that a problem is undecidable;4. find a polynomial time reduction from one problem to another;5. determine the complexity class of a decidable problem;6. categorise the complexity of a language.Content:"
    },
    "COMP0044": {
        "Title": "Operational Risk Measurement for Financial Institutions (COMP0044)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ariane Chapelle",
        "Description": "Aims:The module aims to familiarise students with key concepts in the measurement and management of operational risk in the financial services. It will help them to understand the current issues and challenges faced by the sector, from a methodological, regulatory and systemic standpoint. By detailing the most current debates in the field, the module aims at allowing the students to subsequently become positive agents of solutions in the market place and in research in operational risk measurement and modelling.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0021": {
        "Title": "Interaction Design (COMP0021)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Chris Evans",
        "Description": "Aims:The module covers advanced topics in interaction design, informed by current research in user experience, human-computer interaction and interaction design. A central theme is how to design technologies to meet people’s needs.Learning outcomes:On successful completion of the module, a student will be able to:1. have knowledge and understanding of research in interaction design;2. have knowledge and understanding of methods used in interaction design;3. reflect critically on the appropriateness of different interaction design methods;4. conduct basic user research;5. design, prototype and evaluate a novel ubiquitous computing technology;"
    },
    "COMP0083": {
        "Title": "Advanced Topics in Machine Learning (COMP0083)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Arthur Gretton",
        "Description": "Aims:Kernel methods: To gain an understanding of the theory and applications of kernel methods, including:-An overview of how kernel feature spaces can be constructed, including in infinite dimensions, and the smoothing properties of functions in these spaces;-Simple and complex learning algorithms using kernels (ridge regression, kernel PCA, the support vector machine);-Representations of probabilities in reproducing kernel Hilbert spaces. Statistical two-sample and independence tests, and learning algorithms using these embeddings (clustering, ICA)."
    },
    "COMP0041": {
        "Title": "Applied Computational Finance (COMP0041)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Riaz Ahmad",
        "Description": "Aims:Mathematical finance topics studied in term 1 are extended to consider areas of numerical methods used to solve pricing problems, where closed form solutions are not available. An introduction to programming in two popular languages of use in the financial markets.Learning outcomes:On successful completion of the module, a student will be able to:1.apply numerical schemes to solve pricing problems;2.demonstrate programming proficiency in basic C++ and Python to solve practical problems in Mathematical Finance;Content:Success in mathematical finance requires confidence and expertise in applying numerical analysis and programming to solve a wide range of pricing and risk management problems. This course presents numerical schemes for topics in derivative pricing together with programming in C++and Python. C++ continues to retain its ‘sexy’ status in the financial markets and is arguably the most popular language of use in Quantitative Finance. Python is rapidly becoming the standard in scientific computing, receiving much excitement about the application of Python to mathematical finance; its appeal continues to grow in both academia and industry. It is simple to use and free to download, with a growing amount of add-on modules. It is particularly easy to interface with C++.-Numerical Schemes: Binomial Model. Finite Difference Methods; Numerical Linear Algebra. Monte Carlo Methods;-C++: Data types; input/output; file management; control of flow and decision making. Functions; headers and source files. Arrays and strings. Pointers; dynamic memory allocation. Recursion. Objects and classes; operator overloading; polymorphism; inheritance;-Python: Introduction to some of the powerful libraries in Python-Scientific manipulations (SciPy); data structures (NumPy); graphics (Matplotlib); data analysis (Pandas);Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have taken EITHER Financial Engineering (COMP0048) OR Asset Pricing in Continuous Time (MATHGF05) in Term 1."
    },
    "COMP0142": {
        "Title": "Machine Learning for Domain Specialists (COMP0142)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Dariush Hosseini",
        "Description": "Aims:Introduce the students to the basics of machine learning while giving class-based examples of applications to areas of domain specialisation.Learning outcomes:On successful completion of the module a student will be able to: understand elements of the fundamental concepts and mathematical basis of machine learning; apply practical machine learning software in order to perform data analysis tasks.Content:General theory and mathematical foundations are presented in lectures while practical applications are presented in classes.The module includes:"
    },
    "COMP0008": {
        "Title": "Computer Architecture and Concurrency (COMP0008)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Kevin Bryson",
        "Description": "Aims:To provide a working knowledge of the hardware and architecture of a modern computer system, particularly focusing on concurrency aspects and those that have an impact on writing multithreaded software. Students will gain a fundamental understanding of the concurrency abstraction and how it impacts both computer architecture and software design. We will look at computer architecture aspects that directly impact multithreaded software such as the memory hierarchy, cache coherence/consistency and hardware multithreading. We will learn how to design correct multithreaded Java software based on a solid theoretical understanding of concurrency principles and the Java Memory Model. The module will cover an understanding of concurrency from low-level aspects (such as spin locks implemented in assembly language) to high-level design patterns used within the Java concurrency package.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0101": {
        "Title": "Requirements Engineering and Software Architecture (COMP0101)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Emmanuel Letier",
        "Description": "Aims:The module will train students in the fundamental principles and latest techniques in systems requirements engineering and software architecture.Learning outcomes:Students will learn how to discover, model, analyse and communicate requirements for software intensive systems and how to design, evaluate and communicate software architecture that meet these requirements. The emphasis will be on developing the students' modelling skills and their ability to communicate requirements and architectures with clarity and precision to business stakeholders and software developers.Content:System Requirements Engineering: Goal-oriented requirements engineering, requirements engineering in agile projects; Software Architecture: Architecture modelling, architectural styles, quality requirements.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have strong knowledge and practical experience of software engineering at least equivalent to FHEQ Level 5."
    },
    "COMP0157": {
        "Title": "Quantum Computation (COMP0157)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Toby Cubitt",
        "Description": "The module provides a first course on quantum computation. The basic mathematical formalism of quantum mechanics is be introduced from a computer science perspective, assuming no prior knowledge of quantum mechanics or physics. Building on this, the module develops the standard circuit model of quantum computation and basic quantum complexity theory. The majority of the module is devoted to quantum algorithms, including rigorous derivations and algorithm analysis. This section of the course starts from simple examples, and builds up to the major quantum algorithms, such as Shor’s quantum factoring algorithm and Grover’s unstructured search algorithm."
    },
    "COMP0169": {
        "Title": "Machine Learning for Visual Computing (COMP0169)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Niloy Mitra",
        "Description": "Creative industries such as print, feature films, music, fabrication or interactive media increasingly make use of multiple machine learning driven tools. This module enables students to contribute to a new shift of paradigm, where such tools become increasingly intelligent of the content being designed and the users designing them. This is enabled by machine learning, a new way of dealing with data and new forms of algorithms. We will cover an applied background of machine learning and focus on data structures particularly relevant for creative content such as images and video, and focus on learnable algorithms that allow to machines to process them intelligently, such as convolutional neural networks."
    },
    "COMP0087": {
        "Title": "Statistical Natural Language Processing (COMP0087)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Sebastian Riedel",
        "Description": "Aims:The module introduces the basics of statistical natural language processing (NLP) and machine learning techniques relevant for NLP.Learning outcomes:On successful completion of the module, a student will be able to understand relevant ML techniques, in particular in deep learning, what makes NLP challenging (and exciting), how to write programs that process language, and how to address the computational challenges involved.Content:NLP is domain-centred fields, as opposed to technique centred fields such as ML, and as such there is no \"theory of NLP\" which can be taught in a cumulative technique-centred way. Instead this course will focus on one or two NLP end-to-end pipelines (such as Machine Translation and Machine Reading). Through these applications the participants will learn about language itself, relevant linguistic concepts, and Machine Learning techniques. For the latter an emphasis will be on deep learning prediction."
    },
    "COMP0164": {
        "Title": "Digital Finance (COMP0164)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Nikhil Vadgama",
        "Description": "This module seeks to provide a comprehensive understanding of the financial services industry in terms of business models and sector practises. We start from money and payments as the foundations of the financial services industry and then move on to core financial products which include banking, wealth management, insurance, and investing. After providing the foundations for how these sectors operate, business models will be discussed including peer-to-peer (P2P), business-to-business (B2B), Business-to-consumer (B2C), and consumers-to-consumer (C2C). Finally, the impact of emerging technologies will be discussed in terms of how they are changing these sectors and business models (technologies will include AI, Blockchain, Cloud etc). Students will be equipped with a broad knowledge of banking products and services and how new business models and emerging technologies are being applied."
    },
    "COMP0029": {
        "Title": "Individual Project for Year 3 BSc (COMP0029)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr John Dowell",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial piece of individual project work, applying knowledge learned throughout the degree programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard via a written report.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0159": {
        "Title": "MSc Disability, Design and Innovation Dissertation (COMP0159)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Youngjun Cho",
        "Description": "Aims  "
    },
    "COMP0104": {
        "Title": "Tools and Environments (COMP0104)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Jens Krinke",
        "Description": "Aims:The module will train students in the principles and application of software tools and environments. The module will cover the fundamental practices that one would expect from any software professional one would want to hire. It will also offer an introduction into research on analysing software and extracting information from software repositories. The module is based on decades of experience, including the latest thinking on software process and analysis.Learning outcomes:On successful completion of the module, a student will be able to:1.understand the nature and variety of software tools and environments that are available for achieving software engineering tasks;2.select appropriate tools and environments for the task at hand and to apply the tools and environments to achieve the task;3.understand and appreciate current research directions in analysing software and repositories;Content:-Version and Configuration Management;-Build and Integration Tools;-Debugging and Profiling Tools;-Software Analysis;-Code Audit;-Mining Repositories;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must understand the basics of programming, computer science and software engineering equivalent to Years 1 and 2 of MEng Computer Science UCL."
    },
    "COMP0071": {
        "Title": "Software Engineering (COMP0071)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ghita Kouadri Mostefaoui",
        "Description": "Aims:"
    },
    "COMP0005": {
        "Title": "Algorithms (COMP0005)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ifat Yasin",
        "Description": "Aims:To develop programming and problem solving skills, to encourage a thoughtful approach to analysis and design problems, to familiarise students with logical and mathematical inference and argumentation.Learning outcomes:On successful completion of the module, a student will be able to: apply this knowledge to specification of algorithms and logic programming.Content:Searching and sorting algorithms:-Elementary searching (Linear and binary search);-Binary search trees;-Hash Tables, Hashing, Hash functions;"
    },
    "COMP0119": {
        "Title": "Acquisition and Processing of 3D Geometry (COMP0119)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Niloy Mitra",
        "Description": "Aims:To expose students to the challenges and potential of geometry processing in relevant application areas. To explain how to use acquire 3D model, and subsequently process, analyse, and manipulate the data. To familiarize students with handling real data sets and apply machine learning algorithms in the context of 3D geometric data.Learning outcomes:On successful completion of the module, a student will be able to:1.Read and understand recent advancements in this area (theory);2.Obtain a grasp of the key tools in geometry processing (theory) and understand current machine learning approaches in the context of geometry processing;3.Gain necessary coding and practical skills to work directly with real-world 3D data (practice);4.Learn to formulate and solve problem using the geometric tools they learn as part of the module (practice);Content:-The module introduces basics of geometry processing covering important aspects of acquisition, analysis, and manipulation of 3D data. The module will consist of a mix of theory and applications to real-world scenarios;-The module intends to introduce students to the various stages of a typical geometry processing pipeline. With the recent growth in popularity of 3D acquisition devices (e.g., depth cameras) and modeling frameworks, geometry processing now plays a central role in a diverse set of applications including city planning, architectural geometry, reverse engineering, interactive modeling, etc;-Topics will include but not restricted to mesh representations, mesh smoothing, remeshing, mesh reconstruction, and shape analysis. Necessary topics in differential geometry will be covered in the module; Introduction:-Applications;-Surface representations; Geometry Registration:-Local and global registration (ICP, branch-and-bound);-Geometry Acquisition;-3D acquisition using laser scanners;-Structure from motion-based acquisition; Differential Geometry:-Introduction to curves and surface;-Introduction to curves and surface;-Mesh Smoothing and Decimation;-Parametrization and Remeshing;-Mesh Deformation;-Laplace Beltrami Operator;-Shape Analysis;-Shape Synthesis;-ML in the context of geometry processingRequisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND should have (i) an understanding of linear algebra; and (ii) coding experience."
    },
    "COMP0007": {
        "Title": "Directed Reading (COMP0007)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Fabio Zanasi",
        "Description": "Aims:To develop students’ ability to approach and understand fairly advanced research texts. To introduce students to a selection of historically important developments and associated technical concepts in theoretical computer science. To develop students’ academic writing, research and presentation skills.Learning outcomes:On successful completion of the module, students will be able to:1. approach and understand research papers in computer science;2. explain a number of selected computer science topics in some technical depth;3. summarise and communicate in writing the technical ideas, context and impact of computer science research texts.Content:The module will be based on directed reading and critical analysis of classic research papers in theoretical computer science, with some emphasis on the theory of programming languages. Each coursework exercise asks students to write a critical summary of one such research paper, including its context and impact on the field. Students are also asked to prepare a short oral presentation for the fifth and final paper.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice"
    },
    "COMP0015": {
        "Title": "Introduction to Programming (COMP0015)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Ms Rae Harbird",
        "Description": "Aims:The module uses Python to give a grounding in the basic programming techniques of sequence, repetition, branching, and functions. Students also learn to use and manipulate data structures such as lists, dictionaries and sets to solve problems. Building on the fundamental skills, key object-oriented concepts are covered including the use of classes, objects and inheritance. At the end of the course, students will use some of the most popular Python libraries for data analysis. This is an intensely practical module and full student engagement outside of lectures and in lab classes is critical to successful completion of the module.Learning outcomes:On successful completion of the module, a student will be able to:1. Understand why Python is a useful programming language for developers;2. Design and develop applications using a large sub-set of the language effectively;3. Design object-oriented programs with Python classes;4. Use programming tools such as an integrated development environment (IDE) and debugger;5. Use Python libraries for data analysis.Content:"
    },
    "COMP0133": {
        "Title": "Distributed Systems and Security (COMP0133)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Brad Karp",
        "Description": "Aims:"
    },
    "COMP0130": {
        "Title": "Robot Vision and Navigation (COMP0130)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Simon Julier",
        "Description": "Aims:"
    },
    "COMP0114": {
        "Title": "Inverse Problems in Imaging (COMP0114)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Simon Arridge",
        "Description": "Aims:To introduce the concepts of inverse problems, optimisation, and appropriate mathematical and numerical tools applications in image processing and image reconstruction;Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0123": {
        "Title": "Complex Networks and Web (COMP0123)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Shi Zhou",
        "Description": "Aims:This module introduces essential concepts and methods in the interdisciplinary research area of network science, with a particular focus on the Internet, the World Wide Web and online social media networks."
    },
    "COMP0054": {
        "Title": "Computer Security I (COMP0054)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marie Vasek",
        "Description": "Aims:This module provides an introduction to computer security concepts and techniques. It covers core security principles to engineer systems that provide properties like confidentiality, integrity, or availability, despite the efforts of malicious entities to subvert them.Learning outcomes:Students will learn how to recognise security properties of systems, as well as formulate security policies, and model the threats they may face."
    },
    "COMP0075": {
        "Title": "Financial Market Modelling and Analysis (COMP0075)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Chris Clack",
        "Description": "Aims:This module will introduce students to the field of modelling and analysing financial markets with emphasis on (i) the wide variety of deterministic and discrete-time methods that are available; and (ii) numerical simulation of the financial markets, including agent-based modelling. The module will start with a broad introduction to financial markets and terminology used in the financial markets.Learning outcomes:On successful completion of the module, a student will be able to:1.distinguish between different types of modelling and analysis, and explain the advantages and disadvantages of each method;2.understand discrete-time dynamic optimisation methods;3.understand numerical simulation methods, including both agent-based techniques and the use of recurrence relations;Content:Introduction to the Financial Markets:"
    },
    "COMP0143": {
        "Title": "Cryptocurrencies (COMP0143)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Philipp Jovanovic",
        "Description": "Aims:"
    },
    "COMP0098": {
        "Title": "MSc Computational Statistics and Machine Learning Project (COMP0098)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Mr Dariush Hosseini",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:1. work individually developing a major project;2. plan and coordinate development activities;3. make realistic work commitments;4. present the work done effectively to a deadline.Content:There is no set syllabus: students identify their chosen project area and are allocated a supervisor who is a member of academic staff. The supervisor provides support and guidance.The project runs from immediately after the examination period (May/June); students are responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor.Some projects are done in conjunction with other departments of the College, others are done in conjunction with external organisations subject to approval by the department. In all cases at least one supervisor must be from within the department who will provide as a minimum project management advice.Project report:The main report documents the results of the project. The deadline for submission is normally the first week of September.Formatting details:-The dissertation text (defined as everything except title page, table of contents, references and appendices) should typically be between 30 and 100 pages in 12 point type and 1.5 or double spacing. The total dissertation length (main text together with appendices) should under no circumstances exceed 120 pages;-Students should place their code in an online repository and provide access details to it in their dissertation;-Writing the dissertation in LaTeX is optional, but strongly recommended.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0086": {
        "Title": "Probabilistic and Unsupervised Learning (COMP0086)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Maneesh Sahani",
        "Description": "Aims:This module provides students with an in-depth introduction to statistical modelling and unsupervised learning techniques. It presents probabilistic approaches to modelling and their relation to coding theory and Bayesian statistics. A variety of latent variable models will be covered including mixture models (used for clustering), dimensionality reduction methods, time series models such as hidden Markov models which are used in speech recognition and bioinformatics, independent components analysis, hierarchical models, and nonlinear models. The course will present the foundations of probabilistic graphical models (e.g. Bayesian networks and Markov networks) as an overarching framework for unsupervised modelling. We will cover Markov chain Monte Carlo sampling methods and variational approximations for inference. Time permitting, students will also learn about other topics in probabilistic (or Bayesian) machine learning.Learning outcomes:To be able to understand the theory of unsupervised learning systems; to have in-depth knowledge of the main models used in Unsupervised Learning; to understand the methods of exact and approximate inference in probabilistic models; to be able to recognise which models are appropriate for different real-world applications of machine learning methods.Content:-Basics of Bayesian learning and regression;-Latent variable models, including mixture models and factor models;-The Expectation-Maximisation (EM) algorithm;-Time series, including hidden Markov models and state-space models;-Spectral learning;-Graphical representations of probabilistic models;-Belief propagation, junction trees and message passing;-Model selection, hyperparameter optimisation and Gaussian-process regression.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) a good background in statistics, calculus, linear algebra, and computer science; and (ii) good competency in Matlab or Octave (or be taking a class on Matlab/Octave, or be willing to learn it on their own).Audit:Any student or researcher at UCL meeting the requisite conditions is welcome to attend the lectures. Students who wish to formally register on the module should consult with the Module Leader.Preparatory Material:Students wishing to take the module should thoroughly review the maths in the cribsheet provided before the start of the module."
    },
    "COMP0032": {
        "Title": "Computer Science Study Abroad (COMP0032)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "120",
        "Module Leader": "Dr Shi Zhou",
        "Description": "Aims:The educational aims of the programme follow exactly those of the existing MEng Computer Science, with the additional aims of extending the educational experience of students through: (a) Continuing advanced education in computer science, (b) Experience of education in a different cultural and/or linguistic setting, and (c) Access to high level teaching and research expertise from outside UCL.Learning outcomes:Students will have studied courses at an appropriate breadth and depth to enable them to progress to Year 4 of the MEng CS (International Programme) whilst at the same time having benefited from the experience of HE in a different linguistic and/or cultural setting.Content:Students studying abroad must follow a programme that MUST satisfy the following elements:"
    },
    "COMP0040": {
        "Title": "Financial Data and Statistics (COMP0040)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Tomaso Aste",
        "Description": "Aims:The module is aimed at introducing to financial data analytics. The module is primarily focused on the understanding of financial market dynamics of both individual assets and collective group of assets. Students will learn how to individuate regularities, patterns and laws from a statistical perspective. Instruments to analyse, characterize, validate, parameterize and model complex financial datasets will be introduced. Practical issues on data analysis and statistics of high frequency and low frequency financial data will be covered.Learning outcomes:On successful completion of the module, a student will be able to:1.analyse main statistical features of complex financial datasets;2.identify the probability distributions of financial returns;3.understand how to characterize, parameterize and validate these distributions;4.understand the quantify inter-dependency/causality structure between financial assets;5.understand how to use the outcome of data-analytics to develop better tools for forecasting, valuation and risk management;6.validate modelling and forecasting tools quantifying performances;Content:Empirical investigation of financial market-data:-Essential practical familiarization with financial data. Typical challenges with real financial data. Basics on data acquisition, manipulation, filtering, graphical representation and plotting; Statistical properties single financial asset:-Statistical distribution of returns. Moments of the distribution. Non-Normal distributions and fat-tails. Large fluctuations and tail risk. Stable distributions. Generalized extreme value distribution. Estimation methods to characterize the tails of the distributions. Calibration and validation. Applications to measures of risk; Scaling laws:-Random walks. Stochastic processes with non-defined variance. Fractal and multi-fractal nature of financial signals. Scaling laws. Persistence, anti-persistence and autocorrelation in financial signals. Hurst exponent, definition and characterization of multiscaling signals; Statistical properties of groups of financial assets:-Marginal probabilities, joint probability, and conditional probability. Measures of dependency: linear and non-linear correlations. Lagged correlations and causality. Information theoretic perspective: mutual information, transfer entropy. Spurious correlations. Correlation filtering through networks. Calibration, validation and application issues;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must (i) be familiar with fundamental probability and statistics concepts; (ii) be familiar with mathematical analysis."
    },
    "COMP0056": {
        "Title": "People and Security (COMP0056)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Simon Parkin",
        "Description": "Aims:"
    },
    "COMP0020": {
        "Title": "Functional Programming (COMP0020)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Chris Clack",
        "Description": "Aims:This course explores the functional programming paradigm and the implementation technology for functional programming languages. It aims to develop a broad understanding of the functional programming style and recursive programming techniques using the language Miranda, together with an understanding of implementation issues that are relevant not only to functional languages but also to other systems that require automatic dynamic memory management. The course explores the underlying mechanics of strict and lazy functional languages; it does not use Haskell or F# or OOCAML and does not aim to provide training in such languages, though an introduction to Miranda is provided and students are expected to improve their functional programming skills through independent study. In the second half of the course students are expected to use independent study to read extensively about implementation issues which are then discussed in the lectures.Learning outcomes:On successful completion of the module, a student will be able to do the following at a level suitable for a Year 3 undergraduate:"
    },
    "COMP0027": {
        "Title": "Computer Graphics (COMP0027)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Tobias Ritschel",
        "Description": "Aims:To introduce the fundamental concepts of 3D computer graphics and give the students all the knowledge needed for creating an image of a virtual world from first principles.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0010": {
        "Title": "Software Engineering (COMP0010)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Sergey Mechtaev",
        "Description": "Aims:This module focusses on designing and building software systems, which these days are often large, complex and long-lived. They are worked on by teams of engineers and changed constantly over their lifetimes. We will look at principles and patterns of software design, where to apply them, and how they may inform our design choices. We will also look at techniques for ensuring that systems you build behave correctly. We show how the application of these makes it possible to evolve systems effectively in a rigorous way.Learning outcomes:On successful completion of the module, a student will be able to:1. appreciate the wider engineering context that forms the background to developing complex, evolving software-intensive systems;2. apply a range of design patterns and principles to solve particular design problems;3. apply a range of refactoring techniques to improve code quality;4. use a range of tools and techniques for automated software testing, including test-driven development;5. manage risk in making changes to an existing software system through rigorous engineering practices;6. reflect on the appropriateness of different software engineering techniques in different circumstances, and on the quality of the design of an application.Content:-OO Design Principles;-Design Patterns;-Software Architecture;-Testing;-Tools and ProcessesRequisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have taken a Java programming course."
    },
    "COMP0064": {
        "Title": "MSc Information Security Dissertation (COMP0064)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr David Clark",
        "Description": "Aims:Students will obtain experience of undertaking and completing a piece of research, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0043": {
        "Title": "Numerical Methods for Finance (COMP0043)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Guido Germano",
        "Description": "Aims:\tAn introduction to numerical/computational methods with code examples (Matlab, C++, Python) and an emphasis on applications in finance (derivatives pricing, model calibration, etc.).Learning outcomes:\tProgramming proficiency and demonstrable skills in turning mathematical equations and models into working code; capacity to solve practical problems in financial mathematics applying modern numerical techniques.Content:\t1. Introduction:\tBibliography, programming languages, programming basics: data types, operators, expressions, control structures (iteration i.e. for-loop, conditional execution i.e. if-then-else, etc.), vector/array operations, input/output, plots, etc. Floating-point representation of real numbers, numerical errors.\t2. Fundamental probability distributions:\tNormal, exponential, log-normal, chi square, etc; plot of the probability distribution function, sampling with pseudo-random numbers, histograms, transformation from uniform to other distributions using the quantile function, i.e. the inverse cumulative distribution function.\t3. Random numbers:\tLinear congruential generators, requirements and statistical tests, pathologic cases, more advanced generators; inversion and transformation in one and more dimensions, acceptance-rejection method, Box-Muller method for normal deviates, polar method by Marsaglia, Ziggurat algorithm by Marsaglia and Tsang, correlated normal random variates, quasi-random numbers.\t4. Monte Carlo methods:\tIntroduction, risk-neutral valuation of options, Euler-Maruyama method for the numerical solution of a stochastic differential equation (SDE), approximation error, strong and weak solution, Milstein method.\t5. Important stochastic differential equations:\tArithmetic and geometric Brownian motion, Ornstein-Uhlenbeck process and Vasicek model, Feller square-root process and Cox-Ingersoll-Ross model, constant elasticity of variance processes, Brownian bridge, Heston stochastic volatility model.\t6. Stochastic processes with jumps:\tPoisson process, normal compound Poisson process, Gamma process, jump-diffusion processes (Merton, Kou), time-changed Brownian motion (variance Gamma process), Lévy processes.\t7. Black-Scholes option pricing:\tA simple program that prices European calls and puts with the analytical solution, the analytical solution provided by Matlab's Financial Toolbox, the fast Fourier transform, and Monte Carlo.\t8. Model calibration:\tImplied volatility, Newton-Raphson method, Jäckel's equivalent form, Jäckel's modification, complex initial guess and fractals.\t9. Fourier transform methods:\tefinitions of the Fourier transform, inverse transform, notable transform pairs (normals, double exponential/Lorentzian, Dirac delta/1), discrete and fast Fourier transform, Laplace transform, transform of the derivative, solution of the standard diffusion equation by Fourier transform and in Fourier-Laplace space, fractional derivatives, space-time fractional diffusion equation and its solution in Fourier-Laplace space, characteristic function, moment-generating function, cumulant-generating function, Lévy processes, correlation/convolution theorem, auto/cross-covariance and correlation, Parseval/Plancherel theorem, shift theorem, use in option pricing.\t10. Exotic options:\tFourier methods for the numerical pricing of discretely and continuously monitored path-dependent options like barrier and lookback.\t11. Partial differential equations:\tClassification, second-order PDEs, notable examples of elliptic, parabolic and hyperbolic PDEs, diffusion equation, Black-Scholes equation, Feynman-Kac theorem and relationship with SDEs, finite difference schemes.Requisites:\tIn order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have taken COMP0041 and \"Introduction to Mathematics and Programming for Finance\"."
    },
    "COMP0022": {
        "Title": "Database and Information Management Systems (COMP0022)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Yuzuko Nakamura",
        "Description": "Aims:Students will learn fundamental theories and methods of database systems: what they are, how they are developed and how they function to achieve their purposes. The module will exemplify these constructs with contemporary database technologies and students will learn how these technologies are exploited to build effective information systems of different scale.Learning outcomes:On successful completion of the module, a student will be able to:1. understand the theories and methods of database systems;2. have competence with applying the theories and methods of database systems in creating effective information systems;3. understand current and emerging database technologies and the application settings in which they are used.Content:"
    },
    "COMP0024": {
        "Title": "Artificial Intelligence and Neural Computing (COMP0024)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Denise Gorse",
        "Description": "Aims:This module introduces artificial intelligence and neural computing as both technical subjects and as fields of intellectual activity. The overall aims are:1. to introduce basic concepts of artificial intelligence for reasoning and learning behaviour;2. to introduce neural computing as an alternative knowledge acquisition/representation paradigm, to explain its basic principles and to describe a range of neural computing techniques and their application areas.Learning outcomes:On successful completion of the module, a student will be able to:1. identify problems that can be expressed in terms of search problems or logic problems, and translate them into the appropriate form, and know how they could be addressed using an algorithmic approach;2. identify problems that can be expressed in terms of neural networks, and to select an appropriate learning methodology for the problem area.Content:Artificial intelligence:-Nature of artificial intelligence;-Searching state spaces;-Utility theory;-Logic for artificial intelligence;-Reasoning about concepts;-Reasoning about uncertainty;-Machine learning.Neural Computing:-Overview of network architectures and learning paradigms;-Binary decision neurons;-Single-layer perceptrons and their limitations;-Multilayer perceptrons;-The Hopfield model;-Reinforcement learning;-The Kohonen self-organising feature map.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) passed BSc/ MEng Computer Science (Years 1 and 2) at UCL; OR (ii) a strong background in university-level maths (in particular, in logic)."
    },
    "COMP0121": {
        "Title": "Computational MRI (COMP0121)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Gary Zhang",
        "Description": "Aims:The module aims to give the students an in-depth introduction to Magnetic Resonance Imaging (MRI) from the computational perspective.Learning outcomes:On successful completion of the module, a student will be able to:1. Understand, in-depth, MRI through learning and implementing, in silico, all the key components of modern MRI systems;2. Gain significant experience in software development for general scientific computing and visualisationContent:- Introduction to magnetic resonance imaging- Classical description of a magnetic field acting on a single nucleus (equation of motion; rotating frame of reference; concept of magnetic resonance)- Macroscopic magnetization (concept of relaxation; the Bloch equation)- Introduction to signal detection and acquisition (free induction decay; spin echoes; inversion recovery; spectroscopy)- Fourier imaging: the MR physics perspective (k-space; gradient echoes; slice excitation)- Fourier imaging: the signal processing perspective (fundamentals of continuous and discrete Fourier transforms; sampling theory; image reconstruction)- Noise modelling and contrast mechanismsRequisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have suitable experience with Matlab."
    },
    "COMP0132": {
        "Title": "MSc Robotics and Computation Dissertation (COMP0132)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Professor Danail Stoyanov",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation and demonstration.Learning outcomes:On successful completion of the module, a student will be able to:1.work individually developing a major project;2.plan and coordinate development activities;3.make realistic work commitments;4.present the work done effectively to a deadline;Content:Overview:-There is no set syllabus: students identify their chosen project area and are allocated a supervisor who is a member of academic staff. The supervisor provides support and guidance. The project runs from immediately after the examination period (May/June); students are responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor;"
    },
    "COMP0113": {
        "Title": "Virtual Environments (COMP0113)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Anthony Steed",
        "Description": "Aims:The purpose of this module is to introduce students to the main concepts and practical issues in constructing and understanding Virtual Environments, and how people respond to a VE experience. Given the background of the module teachers, the focus on the technical side will be more on the visual aspects of VEs. A central theme of the module will also be that the understanding of VEs can be best understood through the concepts of presence and shared presence.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0073": {
        "Title": "MSc Computer Science Project (COMP0073)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Graham Roberts",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial piece of individual project work, applying knowledge learned from Terms 1 and 2 of the programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard via a written report.Learning outcomes:On successful completion of the module, a student will be able to:1. work individually to undertake a major project;2. plan and coordinate the project activities to meet the deadlines;3. make realistic work commitments;4. write a substantial report to document the project results;5. demonstrate good problem solving and evaluation skills.Content:Overview:-There is no set syllabus. During term 2 students identify their chosen project topic and find a member of the academic staff who will act as the project supervisor. The project formally starts in early June after the exams have finished, and runs for roughly three months. The submission deadline is in early September at the end of the programme;-A number of Industry Exchange Network (IXN) projects with a range of external partners are made available for those students who want to work in collaboration with companies, the health sector, or other organisations. Alternatively a project can be internal to the department, potentially research-oriented, and defined in collaboration with the project supervisor;-Projects are a full-time activity with no other teaching taking place. A typical project will comprise approximately three weeks of background reading, analysis and design, followed by six weeks of implementation or equivalent work, and finally three weeks to write the project report. Students who have any Late Summer Assessments (LSAs) should consult with their supervisor and the programme director to discuss how to coordinate the project work with preparation for the late assessment;-Students are responsible for organising and carrying out their project, and are expected to attend weekly tutorials with their supervisor, also meeting regularly with their external collaborator if applicable. Tutorials allow the supervisor to monitor the progress of the project, providing advice and feedback as necessary;-The project has a 60 credit value, and represents one third of the total value of the MSc.Project Goals:-A MSc Computer Science project is expected to have a reasonable level of challenge and depth, and may include research-oriented goals as well as the practical application of Computer Science ideas and concepts. Most projects involve the design, implementation and testing of software, but more theoretical or mathematical projects are also possible.Project Report:-The final report documents the results of the project, and is expected to be a substantial and properly structured academic document. The project guidelines available on Moodle give detailed information about the required content. Obtaining a higher module mark depends on submitting a good quality report, as well as successfully undertaking the project work.- As every student undertakes a distinct project there is no indicative reading list available. The student is expected to locate relevant information sources themselves with advice from their supervisor.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0002": {
        "Title": "Principles of Programming (COMP0002)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Graham Roberts",
        "Description": "Aims:This module provides an introduction to computer programming using two different programming styles, imperative and functional programming. Its primary aim is to develop core design, programming, and problem-solving skills, with a secondary aim of building confidence in the ability to take on and learn new programming languages within a short space of time. In order to achieve these aims the module has a substantial practical element in the form of compulsory lab classes where students work through sets of programming exercises to apply the programming concepts introduced during the module lectures.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0141": {
        "Title": "Security (COMP0141)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Sarah Meiklejohn",
        "Description": "Aims:"
    },
    "COMP0049": {
        "Title": "Market Microstructure (COMP0049)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Paolo Barucca",
        "Description": "Aims:The course is aimed at introducing the student to the functioning of financial markets based on Limit Order Books from a microstructure point of view, and to the resulting non-trivial empirical regularities. The course presents both the main empirical facts in modern financial markets and some of the theoretical methods used to model them. We will discuss the functioning of limit order driven markets, the price impact of orders, the distribution of returns, the liquidity patterns, and the bid-ask spreads, as well as the relationship between these and other related concepts. Further, we will discuss zero-intelligence models to describe the high-frequency fluctuations in financial markets and models addressing the observed long memory of the trade sign process.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0004": {
        "Title": "Object-Oriented Programming (COMP0004)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Graham Roberts",
        "Description": "Aims:This module provides a thorough introduction to object-oriented (OO) programming. The key object-oriented concepts such as class design, inheritance, dynamic binding and interfaces, are introduced, along with design strategies for smaller sized object-oriented programs. Material is also included on data representation and data processing, the implementation of common data structures such as lists, trees and hash tables, basic cloud-based applications, and on development tools and practices. To learn how to apply object-oriented design concepts, and practice programming skills, the module has a substantial practical element, with weekly lab classes, sets of exercise questions, and an individual programming project.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0009": {
        "Title": "Logic and Database Theory (COMP0009)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Robin Hirsch",
        "Description": "Aims:The module aims to introduce and familiarise students with logical and mathematical inference and with database theory, the latter having an emphasis on the fundamentals of relational database systems and SQL. Students learn a number of logical inference methods for classical logics.Learning outcomes:On successful completion of the module, a student will be able to:1. understand how axiomatic systems can be used for propositional and predicate logic;2. understand the notions of soundness and completeness;3. understand how propositional and predicate tableaus work;4. have familiarity with other logics, including modal and temporal logics;5. be able to analyse relational databases.Content:Propositional logic, Predicate logic, Modal Logic and Temporal Logic:-Review of syntax and semantics.-Deduction and Inference.-Truth tables.-Decidability of propositional logic.Mathematical proofs:-Proof by contradiction.-Induction and structured induction.-Hilbert systems.-Axioms and inference rules for propositional logic.-Axioms and inference rules for predicate logic.-Axioms and inference rules for modal and temporal logics.-Tableau construction for propositional logic, predicate logic, modal logics.-Soundness and completeness theorems for first order logic.-Semi-decidability of first order logic. Finite computation methods: Databases:-Database management systems (DBMS) and the relational database; essential concepts; data model; and architecture and primary functions of the DBMS.-SQL; use of SQL as a language for database construction and data manipulation.-Database design; a structured method for designing relational databases through data modelling, schema specification, validation, and normalisation.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have:-taken in Term 1 Theory of Computation (COMP0003) and Algorithms (COMP0005);-some programming experience (as the assessment will require them to implement a program in C)."
    },
    "COMP0036": {
        "Title": "Machine Learning and Neural Computing (COMP0036)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Dariush Hosseini",
        "Description": "Aims:This module will introduce students to the fundamental concepts of machine learning. Machine learning is an exciting and growing field, the impact of which is manifest not only in academia but also in a wide range of industries.Learning outcomes:On successful completion of the module, a student will:1. be able to display a knowledge and an understanding of some elements of the theoretical foundations of machine learning;2. have gained experience in building basic machine learning systems whilst understanding the limitations of such systems.Contents:Introduction to machine learning:"
    },
    "COMP0137": {
        "Title": "Machine Vision (COMP0137)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Gabriel Brostow",
        "Description": "Aims:The module addresses algorithms for automated computer vision. It focuses on building mathematical models of images and objects and using these to perform inference. Students will learn how to use these models to automatically find, segment and track objects in scenes, perform object recognition and build three-dimensional models from images.Learning outcomes:On successful completion of the module, a student will be able to:1.understand and apply a series of probabilistic models of images and objects in machine vision systems;2.understand the principles behind object recognition, segmentation, super-resolution, scene analysis, tracking, and 3D model building;Content:Two-dimensional visual geometry:-2-D transformation family. The homography. Estimating 2-D transformations. Image panoramas;"
    },
    "COMP0063": {
        "Title": "Philosophy, Politics and Economics of Security and Privacy (COMP0063)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Tristan Caulfield",
        "Description": "Aims:Upon completion of the course the students are expected to be:"
    },
    "COMP0090": {
        "Title": "Introduction to Deep Learning (COMP0090)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Pontus Saito Stenetorp",
        "Description": "Aims:To have a full understanding of the learning outcomes.Learning outcomes:On successful completion of the module, a student will be able to:1. understand the fundamental principles, theory and approaches for learning with deep neural networks;2. understand the main variants of deep learning (such as feedforward and recurrent architectures), and their typical applications;3. understand the key concepts, issues and practices when training and modelling with deep architectures;4. understand automatic differentiation theory and multivariate optimisation;5. understand how deep learning fits within the context of other ML approaches and what learning tasks it is considered to be suited and not well suited to perform.Content:-This module will aim to teach students the fundamentals of modern neural networks. It will cover the most common forms of model architectures and primarily the algorithms used to train them. The theory and principles will be presented alongside example applications. The aim is to focus on the core algorithms, ideas and mathematics, rather than any specific implementation framework.-Students will be taught the basics of neural networks, feedforward networks, recurrent networks; and introduced to concepts such as: regularisation, optimisation and hyper-parameter optimization.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must be (i) familiar with undergraduate mathematics, in particular multivariate calculus, linear algebra and probability (including the multivariate normal distribution and other standard distributions); (ii) familiar with Machine Learning concepts and practice; and (iii) proficient in programming (examples and assignments may be given in a high level language such as Julia or Python).Please note that this module is not suitable as an introduction to Machine Learning. It is suitable only for students who wish to gain an understanding of the mathematics of Deep Learning."
    },
    "COMP0154": {
        "Title": "Future Global Technologies for Disability and Development (COMP0154)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr Tim Adlam",
        "Description": "Taught at UCL Here East, this 30 credit module is designed to provide students with an overview of disability, technology and innovation as a foundation for the remainder of the course. By attending lectures, participating in workshops and seminars, and conducting their own projects; students will learn about what disability is and is not; active citizenship; the roles of technology in the context of global disability; what key technologies can and can’t do; and how they work. This module is coordinated with the ‘Making and Research Methods’ module, where students will gain practical experience and skills in using materials and building devices."
    },
    "COMP0077": {
        "Title": "MSc Computational Finance Project (COMP0077)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Guido Germano",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial piece of individual work, applying knowledge learned from terms 1 and 2 of the programme plus the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard.Learning outcomesOn successful completion of the module, a student will be able to:1. Work individually undertaking a major project2. Plan and coordinate project activities to meet deadlines3. Make realistic work commitments4. Write a substantial report to document the project resultsContent:After a project has been agreed, each student is allocated an academic supervisor, plus an industrial supervisor if the project is within a placement. The supervisors provide support and guidance. The project starts immediately after the main examination period, i.e. in early June. The students are responsible for organising themselves and their work, with advice from their supervisors. Students are expected to meet with their supervisors on a regular basis. A typical project will comprise approximately 4 weeks of background reading, analysis and design, followed by 8 weeks of implementation and finally 2 weeks to complete the writing of an in-depth dissertation of about 50,000 words or 50 pages which documents the results of the project. The deadline for submission is usually within the first two weeks of September.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0066": {
        "Title": "Introductory Programming (COMP0066)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ghita Kouadri Mostefaoui",
        "Description": "Aims:"
    },
    "COMP0135": {
        "Title": "Professional Practice (COMP0135)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Nicolas Gold",
        "Description": "Aims:This module aims to advance students' education in the professional skills and awareness (e.g. project management, professional ethics, teamwork, contemporary software practice) that they will need to undertake successful careers in software engineering.Learning outcomes:On successful completion of the module, a student will be able to:1.assess the effectiveness of solutions presented and to question them in an intelligent way;2.synthesise solutions to, and discuss, general open-ended and contemporary professional issues and problems;3.adopt reasoned ethical standpoints;4.apply appropriate project management techniques;5.appraise the utility of individual project management techniques within a given environment and originate new techniques within a sound framework;6.outline the difference between use of project management techniques in small-scale activities such as the group project and those in industrial scale activities;Content:-Professional ethics-Regulation and law-Contemporary practice-Importance of inclusion and diversity-What are projects and how do we measure their success?;-The role of the project manager and team in influencing the outcome of a project;-Communicating with stakeholders and ensuring buy-in. The business case and writing effective goals;-Project planning, monitoring and control. Structure of project reports;-Agile project management;-Trade-offs, optimisation and architecture decisions;-Risk and opportunity management;-Creating, motivating and leading project teams;-Quantitative criteria including financial appraisal;-Retrospectives, process improvement and project reviews;Note that not all topics are covered to the same depth.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0051": {
        "Title": "Algorithmic Trading (COMP0051)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Paolo Barucca",
        "Description": "Aims:The module aims at introducing algorithmic trading or risk premia strategies, their rationales, properties, design and use. These are presented as an introduction to the primary strategies and common themes in algorithmic trading, together with areas for further study and development, including the latest machine-learning methodologies. The goal is to give a broad overview of strategies in common use, so students can be equipped with methods for implementing these and exploring their known and provable properties.Learning outcomes:On successful completion of the module, a student will be able to:1.Analyse statistically trading strategies;2.Research, design, and develop new strategies;Content:-Introduction to trading;-Trading industry;-Data sources;-Trading strategies;-Order book dynamics;-Portfolio theory;-Statistical analysis of strategies;-Evaluating strategies;-Sharpe Ratio and other metrics;-Multiple hypothesis testing and model validation;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must (i) be familiar with fundamental probability and statistics concepts; (ii) be familiar with mathematical analysis."
    },
    "COMP0111": {
        "Title": "MSc Software Systems Engineering Group Project (COMP0111)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Jens Krinke",
        "Description": "Aims:The module gives students experience in undertaking and completing a large project in software systems engineering encompassing the full software development lifecycle, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:1.understand the nature of large, complex software systems and how that nature varies according to the context in which a system is situated;2.work in a team to develop software engineering solutions that address stakeholders' needs;3.plan, coordinate and manage software systems engineering projects under tight deadlines;4.understand and coordinate competing interests from different stakeholders;Content:There is no set syllabus. Groups of students will be given a project area in conjunction with a supervisor who is a member of the academic staff. The supervisor provides support and guidance. The project runs full-time from immediately after the examination period (May/June) onwards, with the students responsible for organising themselves and their work with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0031": {
        "Title": "Group Research Project (COMP0031)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Licia Capra",
        "Description": "Aims:The aim of the module is to give undergraduate students exposure to cutting-edge research undertaken in the department and enhance student awareness of the range of research in computer science. The module will allow undergraduate students to develop research skills in computer science and its specific sub-disciplines, by means of an actual research project, conducted in small groups and under the direct supervision of an active academic researcher.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0153": {
        "Title": "Inclusive Design and Environments (COMP0153)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Iain Mckinnon",
        "Description": "Students will learn about inclusive design with a focus on the built environment and creating Inclusive Cities. Inclusive design principles, methodologies and practice will be used to create a positive shift in mindset of disability and disabled people. The value and benefit of inclusive design will be analyzed and interrogated with case studies explored. The wider context will pick up current legislation, policy and guidance used in industry in the UK and abroad."
    },
    "COMP0014": {
        "Title": "Intelligent Systems (COMP0014)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr John Dowell",
        "Description": "Aims:To introduce primary theoretical constructs in the field of intelligent systems and to examine significant methods illustrating those constructs, together with examples of their application.Learning outcomes:On successful completion of the module, a student will be able to:1.understand foundational theories in artificial intelligence including: the structural dimensions of intelligent agents in relation to the capabilities they achieve in different environments, and; the differences between symbolic and sub-symbolic agent architectures.2.understand established and emerging methods for providing the primary capabilities of intelligent agents such as their decision-making, problem solving and learning.3.understand the technical challenges involved in modelling and building intelligent systems for different application settings.Content:-Systems and intelligence;-Agents;-Agent architectures;-Problem solving;-Knowledge representation;-Decision-making;-Learning;-Sensing, acting and communicating.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have:-A level Maths (or equivalent);-English Language at the UCL Standard level."
    },
    "COMP0011": {
        "Title": "Mathematics and Statistics (COMP0011)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Lewis Griffin",
        "Description": "Aims:To provide a grounding in Mathematics and Statistics most relevant to a Computer Science undergraduate degree.Learning outcomes:On successful completion of the module, a student will be able to apply concepts in mathematics and statistics to frame problems, and reason about them. Specific topics are detailed in the contents section.Content:Mathematics:"
    },
    "COMP0045": {
        "Title": "Probability Theory and Stochastic Processes (COMP0045)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Guido Germano",
        "Description": "Aims:A systematic introduction to probability theory and stochastic processes as well as some of their applications, with worked-out exercises and without stressing too much the measure-theoretical aspects and other mathematical formalisms. The main target is students with an undergraduate degree in physics, engineering, computer science and the like, who have a good basis in calculus and linear algebra and may have already come into contact with aspects of probability and statistics for ad hoc applications like data analysis, transport equations, and quantum mechanics, but have not attended yet a dedicated course on this subject. The material unfolds with references to its historical development and early applications in gambling, physics and engineering, ending with current-day applications in finance.Learning outcomes:Familiarity with probability theory, stochastic processes in discrete and continuous time, stochastic calculus, and basic applications in physics, engineering and finance.Content:Elementary probability:-Probability space, Kolmogorov’s axioms;-Joint and conditional probability, independent events;-Total probability theorem, Bayes’ theorem;Random variables:-Random variables; probability distribution and density functions;-Multivariate, marginal and conditional distribution and density functions;-Transformation of random variables, sum, product;-Mean, variance, covariance, correlation, moments;-Chebyshev inequality, law of large numbers;-Median, mode, skewness, kurtosis, entropy, mutual information;-Fourier transform, characteristic function, moment- and cumulant-generating functions;-Central limit theorem, Lévy stable distributions;-Gaussian, Poisson and exponential distributions;Random functions or stochastic processes:-Definitions, auto- and cross-covariance/correlation, stationarity, Wiener-Khinchin theorem;-Ergodicity, classification with respect to memory, martingales and semimartingales;-Markov and semi-Markov processes, Chapman-Kolmogorov equation;-Forward ad backward time-evolution equations;-Jump processes: the master equation;-Diffusion processes: the Fokker-Planck equation;-Deterministic processes: the Liouville equation;-Random telegraph signal, random walk, hidden Markov model;-Poisson, compound Poisson and renewal processes, continuous-time random walk;-Wiener and Ornstein-Uhlenbeck processes;-Langevin equation, stochastic differential equations, Feynman-Kac theorem;-Laplace transform, solution of the standard diffusion equation in Fourier-Laplace space;-Stochastic integral: Ito and Stratonovich, Ito’s formula;-Geometric Brownian motion, Black-Scholes equation;-Feller square-root, Rayleigh and Bessel processes;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have knowledge of calculus and linear algebra.Please see the maths part of \"Introduction to Mathematics and Programming for Finance\"."
    },
    "COMP0059": {
        "Title": "Information Security Management (COMP0059)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Ms Albese Demjaha",
        "Description": "Aims:The course will provide the student with an understanding of the principles of information security management that are commonly used in business. It will introduce the student to commonly used frameworks and methods and explore critically the suitability and appropriateness of these for addressing today's organisational security needs.Learning outcomes:The successful participant will:"
    },
    "COMP0046": {
        "Title": "Networks and Systemic Risk (COMP0046)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Fabio Caccioli",
        "Description": "Aims:Overall, the module represents an introduction to the topic of systemic risk and stress propagation in networked systems. The first part of the module presents a general introduction to complex networks and dynamical processes; the second part is focused on specific applications to the study of contagion in financial networks.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0070": {
        "Title": "Algorithmics (COMP0070)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Denise Gorse",
        "Description": "Aims:To introduce more formal aspects of algorithms and data structures, techniques for analysing the complexity of algorithms, and to discuss the limits of computation (intractable and undecidable problems).Learning outcomes:On successful completion of the module, a student will be able to:1. Understand how to use a variety of data structures;2. Understand a variety of common algorithms and why some are more efficient than others;3. Carry out time complexity analysis in a variety of scenarios;4. Discuss intractable and undecidable problems.Content:Course Introduction:Algorithms and Data Structures:-Why study algorithms and data structures?-Pseudocode;-Efficiency of algorithms;-Recursion;-Arrays;-Approaches to algorithm design including greedy and divide and conquer;-Graph traversal."
    },
    "COMP0110": {
        "Title": "MSc Software Systems Engineering Research Project (COMP0110)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Jens Krinke",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work aimed at making a novel research contribution, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:1.work individually developing a research project;2.plan and execute research activities in a systematic and organized way;3.critically evaluate and review their work and the work of others;4.effectively communicate their research work and findings;Content:Overview:-There is no set syllabus: students identify a member of the Software Systems Engineering faculty who is willing to supervise them. Together, a student and supervisor co-operate to specify and detail a project of mutual interest. The supervisor provides support and guidance. Although students are encouraged to start early and begin meeting with their supervisor as they have time during terms 2 and 3, the project becomes the students' full-time focus after the examination period (May/June) with the student responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor;"
    },
    "COMP0068": {
        "Title": "Computer Architecture and Operating Systems (COMP0068)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ghita Kouadri Mostefaoui",
        "Description": "Aims:"
    },
    "COMP0076": {
        "Title": "MSc Financial Risk Management Project (COMP0076)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Fabio Caccioli",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial piece of individual work, applying knowledge learned from terms 1 and 2 of the programme plus the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard.Learning outcomesOn successful completion of the module, a student will be able to:1. Work individually undertaking a major project2. Plan and coordinate project activities to meet deadlines3. Make realistic work commitments4. Write a substantial report to document the project resultsContent:After a project has been agreed, each student is allocated an academic supervisor, plus an industrial supervisor if the project is within a placement. The supervisors provide support and guidance. The project starts immediately after the main examination period, i.e. in early June. The students are responsible for organising themselves and their work, with advice from their supervisors. Students are expected to meet with their supervisors on a regular basis. A typical project will comprise approximately 4 weeks of background reading, analysis and design, followed by 8 weeks of implementation and finally 2 weeks to complete the writing of an in-depth dissertation of about 50,000 words or 50 pages which documents the results of the project. The deadline for submission is usually within the first two weeks of September.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0019": {
        "Title": "Computer Systems (COMP0019)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Brad Karp",
        "Description": "Aims:The aim for this module is to have our advanced undergraduates develop a “whole-stack” understanding of the complex interactions among modern computer system hardware (specifically, a modern, multi-core CPU and its memory hierarchy), a modern operating system, and the applications that run atop them. These interactions dictate application correctness and performance. These fundamental principles will be taught in the concrete framework of the x86 CPU architecture and the Linux/UNIX operating system. Students should not only understand these fundamental principles, but be able to put them into practice in real C programs.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0039": {
        "Title": "Entrepreneurship: Theory and Practice (COMP0039)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Philip Treleaven",
        "Description": "Aims:This is UCL’s principal Entrepreneurship course for students seeking to develop and test a new business idea. Over the past ten years we have taught entrepreneurship to around 3000 students resulting in the launch of a number of innovative businesses. The course covers: the new business lifecycle (selecting and testing a moneymaking idea, preparing a business plan, raising finance, the Exit); aspects of new business operation (registering a company, setting up your office, understanding financial statements); and exploiting new e-commerce tools and techniques (doing business electronically, company web sites, online business software and services).Learning outcomes:On successful completion of the module, a student will be able to:1. apply first-hand experience of the selection and deployment of tools, techniques and theories for the identification, validation and structuring of a new business venture.Content:-Invention and innovation - finding and qualifying new opportunities. Business Model Generation.-Confirming customer needs and testing market demand. Customer development.-Lean Start-ups: what is your minimum viable product? The value of prototyping.-Delivery channels and customer relationships. Business Plan and Preparing a Pitch.-Financial Forecasting, Costing and Pricing. Management accounts. Cash-flow and profit and loss.-Developing sustainable competitive advantage. Intellectual Property Rights.-Corporate form and structure. Founder dilemmas - team, equity, remuneration etc. Developing your brand.-Defining and testing critical business model uncertainties. Measuring progress.-Common start-up metrics.-Sources of Funding. Presenting to VCs.-Class presentations; conclusions and next steps.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice."
    },
    "COMP0120": {
        "Title": "Numerical Optimisation (COMP0120)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marta Betcke",
        "Description": "Aims:The aim is to provide the students with an overview of the optimization landscape and a practical understanding of most popular optimization techniques and an ability to apply these methods to problems they encounter in their studies e.g. MSc project/dissertation and later in their professional carrier.Learning outcomes:On successful completion of the module, a student will be able to:"
    },
    "COMP0088": {
        "Title": "Introduction to Machine Learning (COMP0088)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Iason Kokkinos",
        "Description": "Aims:To have a full understanding of the learning outcomes.Learning outcomes:On successful completion of the module, a student will be able to:1. understand machine learning at both the theoretical and practical level;2. solve real-world machine learning problems using the right tools.Content:Introduction to Supervised Learning:-Linear models for regression and classification: least squares, logistic regression;-Concepts of overfitting and regularization, L1 and L2 regularisation;-Boosting, Decision Trees, Random Forests;-Support Vector Machines;-Deep Learning: Neural Networks for regression and classification, Recurrent Neural Networks, applications to Computer Vision;-Introduction to Unsupervised Learning;-K-means, Principal Components Analysis, Sparse Coding;-Expectation-Maximization, Mixture of Gaussians, Factor Analysis;-Deep Autoencoders, Generative Adversarial Networks, applications to Computer Vision.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) an understanding of Calculus, Linear Algebra and Probability Theory; and (ii) proficiency in coding (preferably in Python)."
    }
}