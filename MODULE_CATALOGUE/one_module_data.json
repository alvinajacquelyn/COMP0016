{
    "COMP0023": {
        "Title": "Networked Systems (COMP0023)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Stefano Vissicchio",
        "Description": "Aims:To offer a rigorous introduction to the problems that arise when networking computer systems, and algorithms and systems design that solve these problems. The architectural principles and protocols that underlie the internet will be explained in detail. Topics to be taught will include the physical layer, widely used link layers (wired and wireless), MAC protocols, internetworking, intra-domain routing, reliable transport, congestion control, wide-area (policy) routing, naming, network security, the end-to-end principle, and network applications.Learning outcomes:On successful completion of the module, students will understand the nuances of interactions between a network's distributed entities. This is a vital skill, without which one cannot truly be said to understand networking. To help students develop this skill, COMP0023 incorporates significant programming courseworks in Python and Java, in which students build or interact with working implementations of network protocols.Content:-Introduction to Networking; Information, Error Control Coding, and Compression;-Medium Access Control: CDMA, ALOHA, and Ethernet; Link Layer Addressing and Forwarding; Spanning Trees;-Achieving Reliability; Stop-and-Wait, Go-Back-N;-Achieving Reliability (cont); Selective Repeat; Intro to Internetworking; Network Address Translation; Inside Internet Routers;-The Domain Name System; Multi-hop Networks and end-to-end Arguments;-Reliable Transport and TCP;-TCP and Congestion Control;-Intra-Domain Routing; Introduction, Distance-Vector, Link-State;-Inter-Domain Routing; BGP;-Wireless Networks; 802.11 MAC;-Security: Firewalls, Worms and IDSes; Content Delivery HTTP, Web Caching, and Content Distribution Networks.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have EITHER (i) passed BSc/ MEng Computer Science (Years 1 and 2) at UCL; OR (ii) passed MEng Mathematical Computation (Years 1 and 2) at UCL."
    },
    "COMP0035": {
        "Title": "Applied Software Engineering (COMP0035)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mrs Sarah Sanders",
        "Description": "Aims:The primary aim of the course is for students with some prior experience of programming to gain an understanding of the software development processes used to control and manage information systems projects. It aims to do so through lectures, activities and practical experience of applying the processes to manage a project to specify an information system using industry-recognised, object-oriented techniques. A secondary aim is for the students to gain further experience with computational thinking. They will start by formulating an idea for a computer application and will subsequently translate this into a set of models such that the application could be developed and tested.Learning outcomes:On successful completion of the module, a student will be able to:Content:The expected course content is set out below and may be varied according to the progress made by the students and/or the length of the course.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND have passed Introduction to Programming (COMP0015).Describe how software development methodologies can be used to manage the software development process, and select and apply an appropriate methodology for a given project.Select and apply techniques for capturing and modelling requirementsSelect and apply techniques for modelling an application; and model an application using these.Select the aspects of a software application can be modelled with the Unified Modelling Language (UML); and use UML to model different views of an application.Model the design for a databaseDescribe testing and recommend an appropriate approach to testing for a given project.Recognise the challenges of working in a team and organise themselves and their group to deliver a complex projectWork in a group to apply the skills and knowledge gained in the course to: a) produce a coherent and cohesive specification for an application; and b) select, install, configure and use a set of open-source tools and use these to support the software development cycle for the application.Critically evaluate the processes, methods and models learned in the course.Methodologies for managing software development projects, including those for managing data science applicationsTechniques for requirements gathering and modellingInterface designDatabase designApplication architecture and design patternsTesting techniques and toolsDevOps principles, practices and toolsRefactoring (optional)"
    },
    "COMP0033": {
        "Title": "Computer Science Internship (COMP0033)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr Shi Zhou",
        "Description": "Aims:This module is the departmental implementation of the Engineering Sciences Faculty 'Year in Industry' option. A student works as a paid intern in a relevant company for between 9-12 months, extending their degree programme by one year. The year is taken between the penultimate and final year of a BSc or MEng programme. Students resume the standard curriculum when they return to UCL in the next year.Year in Industry opportunities will be advertised as they become available. There is no guarantee that places will be available, or will be with a specific company or in a specific area. Any placement must be approved by the department and by the Faculty Teaching Committee, which will make sure that adequate, identifiable supervision and training are provided by the host company, that adequate supervision is provided by the student’s home department, and that the student’s plan of work for the year is related to the student’s core discipline and is of adequate level.Students who are approved to take a Year in Industry will transfer to the corresponding 'Year in Industry' degree programme, BSc or MEng Computer Science (with Year in Industry) or MEng Mathematical Computation (with Year in Industry).This is a 30 Credits at FHEQ Level 6. Students who successfully complete the Placement Year will be awarded credit for this module. The Year is weighted at zero for the purpose of Award Classification. Students who fail the First Attempt will be offered a Second Attempt via resubmission of the Written Report . Failure at the Second Attempt will result in a final module grade of Fail and the student will transfer back to their original programme of study.Learning outcomes:Content:The Faculty of Engineering Sciences guidelines define the required structure and general content of the year. See the Computer Science Student Handbook for more information and the application process.At the end of the placement, students will be required to complete a Written Report as the summative assessment for this module. The Written Report will be submitted to the host company for approval and then to the department for marking.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is formally available AND must have passed Years 1 and 2 of BSc/ MEng Computer Science or MEng Mathematical Computation at UCL with a Credit Weighted Average Mark of 70.00% or greater.experience of working as an intern in a company;acquisition of knowledge and skills from the work done at the company;evaluation of the year and reflection on personal development."
    },
    "COMP0057": {
        "Title": "Research in Information Security (COMP0057)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marie Vasek",
        "Description": "Aims:The module aims to develop an understanding of what research in information security is about, how to identify a contribution, what the quality standards in scientific publications are, and to study selected technical sub-topics in depth.Learning outcomes:On successful completion of the module, a student will be able to:Content:Students attend lectures and read scientific papers within an area of information security. The students will present a scientific paper in class, write two short reviews of papers presented in class, and write one detailed report about one paper in particular.Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally approved option or elective choice.Understand how research in information security is conducted and disseminated;Identify the context of information security literature and critically engage with the work; Students will be exposed to research on information security, by reading quality technical research papers in information security."
    },
    "COMP0016": {
        "Title": "Systems Engineering (COMP0016)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr Dean Mohamedally",
        "Description": "Aims:Go through the experience of Research and Development (R and D) processes by developing a reference Proof of Concept design and prototype implementation for a complex and substantial software application over an extended period of time. Work with an external project partner to obtain requirements and get feedback for a project partner-defined problem. Experience of working with team organisation and management. Develop and work to a plan, with weekly lab checks, project partner reports and deliverable milestones to be met. A practical understanding of how the research experimentation and development of a software system is organised and carried out, both in terms of team working skills and the technical knowledge required. Practice using relevant skills and knowledge in completing tasks and milestones. The development of writing, media production, presentation and communication (technical and customer facing) skills.Learning how to evaluate the work done, and team and individual performance.Learning outcomes:On successful completion of the module, a student will be able to:1.know how to work effectively with an external project partner and professional behaviour;2.have a good understanding of a software development process involving research and experimentation in an area of Computer Science;3.have the ability to organise a team, work effectively in a team. Know how to undertake research to identify and use relevant ideas and technologies when developing software;4.know how to develop and test good quality software;5.be introduced to R and D approaches to requirements capture, HCI factors and team-based development relevant to the projects undertaken;6.have experience of writing documentation and presenting results;7.have an understanding of technical writing skills and share their awareness of legal issues as they apply to software development.Content:The core purpose of the module is for students to undertake a systems engineering project, within the Computer Science Industry Exchange Programme (IXN) structure. The students will work in small teams, where each team works with an external project partner to develop a cutting-edge solution to a challenging problem defined by the project partner. The project partner will typically be from one of the following types of organisation: public sector, SMEs, large companies, charity, healthcare/NHS, external research institution, or UCL research centre. The project will be structured as a single major project portfolio, with a series of milestones, where each milestone involves completing a stage of the project: requirements, research into potential solutions, experiments and prototypes, definition of reference design, implementation, testing, and delivery. Each of these stages is to be documented on the projects team website. Each portfolio milestone is also a point of assessment. A number of teaching methods will be employed, including hackathon-style sessions, project sprints in labs and specific lectures. Weekly communications are needed with project partner, with weekly lab checks and project partner reports to track the project progress and team working. An Elevator Pitch to companies is to be given by each team. The final milestone will require teams to deliver a working version of their application, along with a project website documenting the project results. Any publication of results on behalf of the project partner is seen as an advantage. In addition, each individual will write a technical report assessing the work done, the team members, and reflecting on what they have learnt, in particular the area of technologies they have studied. Each team is allocated a PGTA, who they will meet every teaching week to report on progress and get feedback. In addition, each team has an academic supervisor, who will monitor the overall status of the team, and can provide more specialised support and feedback. The project finishes with delivery of their software to their project partner in a usable state with a joint code walkthrough, an assessed presentation and delivery of all associated materials such as legal implications, manufacturing processes and others. The taught material will be directly relevant to, and needed for, the project work. The overall project work will be submitted as an online project portfolio made up of the milestones.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice AND have Object Oriented Programming."
    },
    "COMP0122": {
        "Title": "MSc Computer Graphics, Vision and Imaging Project (COMP0122)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Professor Lourdes De Agapito Vicente",
        "Description": "Aims:To give students experience of undertaking and completing a large research project, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:To be able to: work individually developing a major project, plan and coordinate development activities, make realistic work commitments, present the work done effectively to a deadline.Content:Overview:-There is no set syllabus: students identify their chosen project area and are allocated a supervisor who is a member of academic staff. The supervisor provides support and guidance. The project runs from immediately after the pre-Easter examination period (March) with the students responsible for organising themselves and their work, with advice from their supervisor. Student are expected to meet with their supervisor on a regular basis, as agreed with the supervisor. A typical project will comprise approximately 4 weeks of background reading, analysis and design, followed by 12 weeks of implementation and finally 4 weeks to write an in-depth dissertation;-Exceptionally a student may undertake a project that does not require programming skills. However a student undertaking such a project would be required to demonstrate an exceptionally high level of skill in the areas of analysis synthesis critical assessment and design. It is not a soft option and students are advised that such a project is typically much harder than a 'programming' project;-Some projects are done in conjunction with other departments in UCL. Others are done in conjunction with external organisations although supervision is always provided within the department;Project Presentation:-An assessed presentation is made approximately two weeks before the project hand-in;Project Report:-The main report documents the results of the project. The deadline for submission is normally the first week of September. The final report is normally recommended to be not more than 80 pages long although appendices are permitted. The total length of report and appendices must not exceed 120 A4 pages;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is formally available. "
    },
    "COMP0147": {
        "Title": "Discrete Mathematics for Computer Scientists (COMP0147)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Robin Hirsch",
        "Description": "Aims:To equip first year computer science students with knowledge of foundational mathematics and logic that will be needed for future computer science modules. To provide students with basic tools and skills for mathematical problem solving, proof and refutation.Learning outcomes:On successful completion of the module, a student will be able to:1. analyse and solve typical problems in discrete mathematics and logic;2. identify and reason with the logical content of arguments;3. carry out standard mathematical proofs and refutations;Content:The first part of the course will focus on foundational discrete mathematics, including but not necessarily limited to: functions and relations, permutations, group theory, set theory, cardinalities, diagonalisation, linear algebra and combinatorics. The module continues with mathematical reasoning, logical notation and proof by mathematical induction.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must have passed A-level Mathematics (or an appropriate equivalent)."
    },
    "COMP0127": {
        "Title": "Robotic Systems Engineering (COMP0127)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Danail Stoyanov",
        "Description": "Aims:The students will gain insight into robotics systems and the general concepts, mathematic and algorithms that underpin moving and actuating robotic arms and devices. Specific topics we cover: fundamental linear algebra, transformations, kinematics and inverse kinematics, actuation dynamics and mechanisms, and motion planning. These will all be applied to problems in simulation and programming of robotic systems.Learning outcomes:On successful completion of the module, a student will be able to:1. Understand robot kinematics;2. Understand robot motion planning;3. Understand different robotic mechanisms, specifically robotic arms;4. Programme with Python and ROS (optional C++);5. Apply learned theory to programming solutions for robotics problems in simulation.Content:-The aim of this module is to provide the basic theory required for solving problems involving the motion of robotics and autonomous systems from a practitioner point of view;-The module presents theory and methodology for analysis and modelling of robot kinematics, and methods for moving robots within workspaces. Special emphasis is placed on:-Linear algebra needed for robot motion and transformation;-Robot kinematics and DH tables;-Inverse kinematics and solving inverse systems;-Planning and executing robot motion;-Theoretical lectures will be accompanied by corresponding practical exercises using ROS and predominantly carried out in simulation;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must (i) be able to use Linux and have some background/experience in programming, especially using Python (and preferably ROS); (ii) be comfortable with linear algebra mathematics; and (iii) for the next academic year (2019-2020), the module will run on Ubuntu 18.04 (Bionic) and the lab materials/coursework will run on ROS Melodic. Students are required to have a laptop that has a minimum of 2GHz dual core processor, 2GB RAM, 30-40 GB of hard-drive space and an internet connection, can run an installation of ROS on Linux and be used during lab sessions."
    },
    "COMP0145": {
        "Title": "Research Methods and Making Skills (COMP0145)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Youngjun Cho",
        "Description": "Aims:This module will equip students with the basics of: quantitative and qualitative research methods, and basic computing and making skills.For the research methods, students will learn about the concepts, ideas, fundamentals of planning and conducting research, starting with how to make a research question. Students will then explore methods for data collection and data analysis tools for quantitative and qualitative data.For the computing and making skills, students will learn about both physical and software prototyping: spanning from basic low-fidelity prototyping (e.g. storyboard), 3d printing to programming. Arduino programming will be used for controlling electronic components including sensor and actuators (e.g. for haptic feedback). Python programming will be mainly for data visualisation.The module will be a split of formal seminars, tutorials as well as individual research and prototyping.Content:1. Making & Computing 1012. Data Collection3. Statistics & Data Visualisation:Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice.Basic prototyping;Materials and their properties;Digital fabrication (mainly 3D printing);Microcontroller programming (Arduino);Basics of Python programming.Experimental Design;Data Collection in the wild;Interviews & Questionnaires;Thematic analysis framework;Sensing (Physiological, behavioural).Types of data;Parametric methods;Non-parametric methods;Knowing what type of test to use and when;Bias and error reporting;Creating meaningful visualisations."
    },
    "COMP0108": {
        "Title": "Research Methods in Software Engineering (COMP0108)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Justyna Petke",
        "Description": "Aims:To introduce students to cutting-edge research methods in software engineering emphasising the close reading of research papers and the critical, yet balanced, evaluation of research ideas.Learning outcomes:On successful completion of the module, a student will be able to:1.identify research areas in software engineering, discuss their seminal problems and solution techniques;2.critically review and discuss research papers in software engineering, and evaluate the strength of evidence;3.understand how papers are reviewed and accepted at conferences and journals;4.explain the variety of research methods used in software engineering and identify what research method is appropriate in what context;-Students should also gain a good knowledge of a number of areas of research carried out in the Software Systems Engineering group;Content:-This module will teach students how to conduct research in software engineering. It will introduce them to seminal papers and the cutting-edge research that UCL faculty are pursuing;-The module will begin by discussing what research is from the point of view of software engineering. It will discuss finding, evaluating and formulating research ideas. This module focuses on helping students develop the skills and habits needed to closely read research papers;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have a good standard of computer literacy and programming."
    },
    "COMP0003": {
        "Title": "Theory of Computation (COMP0003)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr James Brotherston",
        "Description": "Aims:The module aims to introduce students to formal logical reasoning and to fundamental concepts in the theory of computation and formal languages.Learning outcomes:On successful completion of the module, a student will be able to:1.identify and reason with the logical content of arguments;2.recognise, write down and reason about automata and language grammars;3.carry out standard proofs and refutations involving logic and computational models.Content:This course introduces students to the theory of computation. The first 5 weeks of the course will focus on mathematical logic, including: propositional logic, first-order logic, proof by induction and modal logic. The second 5 weeks will focus on fundamentals of computation, automata and language theory.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have A-level Mathematics (or equivalent)."
    },
    "COMP0012": {
        "Title": "Compilers (COMP0012)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Earl Barr",
        "Description": "Aims:This is a practical module whose primary goal is develop an understanding of the operation of compilers and the development and specification of computer-based languages. The course pulls together threads from underlying theory, most notably from logic and from data structures and algorithms, and builds on these a practical exercise in which students create a compiler of their own using commonly available compiler development tools.Learning outcomes:On successful completion of the module, a student will be able to:1. build lexical analysers and use them in the construction of parsers;2. express the grammar of a programming language;3. build syntax analysers and use them in the construction of parsers;4. perform the operations of semantic analysis; build a code generator;5. discuss the merits of different optimisation schemes.Content:Anatomy of a compiler:Semantic analysis:Intermediate code generation:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice.The importance of compilers;Structure of a compiler;Analysis (lexical, syntax and semantic analysis);Synthesis (intermediate code generation, optimisation and code generation);Compilers vs. interpreters. Lexical analysis (scanning):Tokens;Regular expressions;Finite state automata (deterministic and non-deterministic);Translating regular expressions into finite state automata;Automatic lexer generators (JLex/JFlex). Syntax analysis (parsing):Context-free grammars;Derivations and (concrete/abstract) syntax trees;Handling ambiguous grammars;Top-down parsing (LL(k) grammars, recursive descent parsers);Bottom-up parsing (LR(k) grammars, shift-reduce parsers);Automatic parser generators (CUP);Syntactic error recovery. Syntax-directed translation:Syntax-directed definitions;Abstract syntax tree construction.Symbol table management;Scoping and type checking;Basic implementation techniques (Visitor methodology).Three address code;IR instructions;Translation methodologies.Code generation and optimisation:Run-time storage organisation;A simple code generation algorithm;Optimisation of intermediate code;Optimisation of target code (Peephole optimisation)."
    },
    "COMP0124": {
        "Title": "Multi-agent Artificial Intelligence (COMP0124)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Jun Wang",
        "Description": "Aims:The module is intended to provide an introduction of multi-agent machine learning, a subfield of Artificial Intelligence (AI).Multi-agent learning arises in a variety of domains where multiple intelligent computerised agents interact not only with the environment but also with each other.There are an increasing number of applications ranging from controlling a group of autonomous vehicles/drones to coordinating collaborative bots in factories and warehouses, optimising distributed sensor networks/traffic, and machine bidding in competitive e-commerce and financial markets, just to name a few.The module combines the study of machine learning with that of game theory and economics, including topics such as game theory, auction theory, algorithmic mechanism design, multi-agent (deep) reinforcement learning. Practical applications, including online advertising, online auction, adversarial training for generative models, bots planning, and AI agents playing online games, will also be covered and discussed.Learning outcomes:On successful completion of the module, the students will be able to master both the theoretical and practical aspects of module.Specifically, the students will understand the underlying principle, and the theory, for decision making by multiple parties, and the learning algorithms that obtain optimal decision or reach an equilibrium from different objectives.The students are also expected to be able to make use of the learned theory and algorithms to formulate and solve large-scale practical learning problems where multiple objectives/incentives co-exist.Content:Game theory and online auction:Multi-agent reinforcement learning:Applications:Reference books:Requisites:To be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) strong competency in programming in Python/Java (evidence of at least one past programming project is required); (ii) strong competency in probability and statistics; and (iii) knowledge of machine learning and deep learning methods and algorithms, for example, classification, regression and clustering (evidence of at least one past programming project using TensorFlow, PyTorch, MXNet or similar deep learning frameworks is required).The prisoner‘s dilemma, dominant strategy, Nash equilibrium, Mixed strategies, and Pareto optimality;English Auctions, Dutch Auctions, the first price auctions, and the second price auctions; Learning Nash Equilibria and Learning in Repeated Games:The linear programming solution and the Lemke-Howson algorithm; Single-agent Reinforcement Learning:Value Iterations, Policy Iterations, Q-learning, Policy Gradient, and Deep Reinforcement Learning.Stochastic games, Nash-Q, Gradient Ascent, WOLF, and Mean-field Q learning.Online advertising machine bidding, AI agents playing online games, and learning to collaborate for bots.Authors: Yoav Shoham and Kevin Leyton-Brown;Title: Multiagent systems: Algorithmic, game-theoretic, and logical foundations;Publisher: Cambridge University Press;Year: 2008;ISBN: 9781139475242."
    },
    "COMP0138": {
        "Title": "Individual Project for Year 4 MEng (COMP0138)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr John Dowell",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial and challenging individual project running over both teaching terms, applying knowledge learned throughout their degree programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a high academic standard via a written report. The project work should incorporate advanced ideas and methodologies derived from 3rd and 4th year modules, as well as emphasise research and evaluation skills.Learning outcomes:On successful completion of the module, a student will be able to:1. work individually to undertake a major project;2. plan and coordinate the project activities to meet the deadlines;3. make realistic work commitments;4. write a substantial report to document the project results;5. demonstrate good research and evaluation skills;6. be able to investigate and identify solutions to one or more challenging problems;Content:Project goals:Project report:Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available.There is no set syllabus. Students identify their chosen project topic and find a member of the academic staff who will act as the project supervisor.The project begins in October and runs in parallel with normal teaching during terms 1 and 2. The submission deadline is early in term 3.Students are responsible for organising and carrying out their project, and are expected to attend weekly tutorials with their supervisor during term time. Tutorials allow the supervisor to monitor the progress of the project, providing advice and feedback as necessary.There are two formative milestones, (i) the Project Plan submitted in mid-November, outlining the project aims and objectives, providing a work plan, and confirming that the project has started successfully, and (ii) the Interim Report submitted in late January outlining what has been achieved so far and what is required to complete the project. These documents are prepared with advice from the supervisor and must be approved by the supervisor to confirm the project is proceeding properly.The project has a 30 credit value, and represents one quarter of the student's final year work;A MEng project is expected to have significant challenge and depth, reflecting that it is a Master level project. The student is encouraged to do a research-oriented project and it is possible to submit a research paper in place of a standard project report;The final report documents the results of the project, and is expected to be a substantial and properly structured document, or a properly constructed research paper. Obtaining a higher module mark depends on both submitting a good quality report or paper, as well as successfully undertaking the project work. The project guidelines available on Moodle give detailed information about the required content.As every student undertakes a distinct project, there is no indicative reading list available. The student is expected to locate relevant information sources themselves with advice from their supervisor."
    },
    "COMP0118": {
        "Title": "Computational Modelling for Biomedical Imaging (COMP0118)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Daniel Alexander",
        "Description": "Aims:To expose students to the challenges and potential of computational modelling in a key application area. To explain how to use models to learn about the world. To teach parameter estimation techniques through practical examples. To familiarize students with handling real data sets.Learning outcomes:On successful completion of the module, a student will be able to:1.understand the aims of biomedical imaging;2.understand the advantages and limitations of model-based approaches and data-driven approaches;3.have knowledge of standard techniques in modelling, experimental design and parameter estimation;4.understand the challenges of data modelling, experiment design and parameter estimation in practical situations;5.handle real-world data in computer programs;Content:-The module introduces the basics of mathematical modelling: the distinction between models and the real world; when and how models are useful; advantages and disadvantages of explicit model-based approaches;-The module covers a range of model based approaches to biomedical imaging and image analysis and basic computer science techniques that underpin them. The intention is to introduce the students to standard techniques of parameter estimation in a hands-on practical way within the context of model-based imaging and image-based modelling.- The module also gives exposure to common applications and challenges in biomedical imaging. It uses several example applications (including microstructural MRI and disease progression modeling) to introduce different kinds of model and, more fundamentally, new algorithms and techniques for parameter estimation, optimization, sampling and validation;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice.The module makes heavy use of Matlab programming for courseworks, although a strong programmer in other languages will pick up the necessary Matlab during the course. It also assumes a strong grasp of general engineering mathematical concepts, in particular linear algebra (intermediate), probability and statistics (intermediate), geometry, and calculus.Students familiar with statistical modeling, parameter estimation, and machine learning will pick up the content fairly easily; those less familiar with such concepts sometimes find the workload heavy. To get an idea of the content, have a look at section IV (Probabilities and Inference) of the Mackay Information Theory, Inference and Learning Algorithms book: Mackay Information Theory, Inference and Learning Algorithms book."
    },
    "COMP0089": {
        "Title": "Reinforcement Learning (COMP0089)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Hado van Hasselt",
        "Description": "Aims:The module aims to introduce students to the foundations of reinforcement learning, and to equip students with the ability to successfully implement, apply and test relevant learning algorithms.Learning outcomes:On successful completion of the module, a student will be able to:1. understand the basics of reinforcement learning paradigms;2. understand the theoretical foundations, formalisms and algorithms in reinforcement learning;3. understand how to apply reinforcement learning algorithms to environments with complex dynamics;4. understand how to combine reinforcement learning with function approximation, and specifically with modern deep learning methods (deep reinforcement learning).Content:The module is about prediction and control using reinforcement learning, including aspects of deep reinforcement learning, i.e., the application of neural networks-based functional approximation to reinforcement learning problems.The module will cover the following topics:1. Markov decision processes2. Planning by dynamic programming3. Model-free prediction and control4. Value function approximation5. Policy gradient methods, Actor-critic algorithms6. Integration of Learning and Planning7. Exploration vs exploitation trade-offsFor these topics we will discuss theory and concrete algorithms and applications.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND have (i) a strong understanding of probability, calculus, and linear algebra; (ii) knowledge of coding skills in Python (in order to complete assessments); and (iii) have taken COMP0078. Recommended: to have taken COMP0090 in Term 1."
    },
    "COMP0037": {
        "Title": "Robotic Systems (COMP0037)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Simon Julier",
        "Description": "Aims:This module will explore how an intelligent system is to use its knowledge representation and to translate this into actions to achieve goals. We will consider situations in which behaviours are pre-programmed, and dynamic situations in which systems learn and adapt online using reinforcement learning. Students will be asked to implement their own intelligent systems which will bring together elements of learning and adaptation to support goal-seeking behaviours.Learning outcomes:On successful completion of the module, a student will be able to:Content:-Formulation of motion planning problems;-Derivation of discrete-grid based search problems for path planning including Djikstra and A*;-Methods of exploring unknown environments and to avoid obstacles;-Online learning methods;Students will develop a good understanding of how the science and engineering of intelligent systems can be applied to the design and control of robotic systems. The course will have a strong practical element where students will develop and apply software-based solutions for a range of problems. Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formallyapproved option or elective choice AND must have (i) passed Cognitive Systems and Intelligent Technologies (COMP0014); (ii) also selected Machine Learning and Neural Computation (COMP0036).Understand and explain the underlying theory and challenges associated with motion planning and action taking with robotics systems;Understand the theory and be able to implement common search based planning algorithms (Dijkstra, A*);Understand and explain the underlying principles of the exploitation vs. exploration tradeoffs in unknown environments;Develop a basic understanding of online and reinforcement learning;Develop experience applying these algorithms to understand both their strengths and limitations."
    },
    "COMP0067": {
        "Title": "App Engineering (COMP0067)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Yun Fu",
        "Description": "Aims:This project-based module introduces the concepts and methods required for the design and construction of apps software systems for a real-world client. It aims to develop a broad understanding of the disciplines of requirements and prototyping in human-computer interaction (HCI), project management and software engineering. It aims to realise a research and team coordinated approach in an engineering, societal and managerial context. It applies the principles of programming with the development of apps via learning-by-doing and problem-based learning (PBL) approaches. This is an intensely practical module and full student engagement outside of lectures and in lab classes is critical to successful completion of the module. To ensure that the process of designing and implementing web and mobile applications is fully understood, the module requires students to undertake a major group project where they must work with an external client to develop and deliver a working application. This takes students through all the stages of a software development project, applying the concepts taught via lectures and online material. Outcomes in addition to the software deliverable include real-world client engagement, team management and project documentation deliverables. The project clients come from a wide range of backgrounds, including companies of all sizes, the NHS, academic organisations and charities. Each client defines an application and technologies that they have a real need for and will put into use. A successful project will deliver a working proof of concept application ready for client handover as research materials. The interaction with clients to develop software meeting real-world needs and practical understanding of the human-computer interaction methods is a unique and defining characteristic of this module and provides students with a thorough introduction to the processes and challenges involved.Learning outcomes:On successful completion of the module, a student will be able to:1. Demonstrate the principles of appropriate HCI, project management and software engineering methods;2. Design, document and implement the software for a real-world client application, which could be a mobile app or web service;3. Design and implement graphical user interfaces suitable for scaling on multiple devices and resolutions;4. Understand effective teamwork methods, project documentation and project organisation skills;5. Apply experience of interacting with a real client with user centred design methods considerations weighted strongly in the design aspect of the project.Content:Project work:-The apps development project begins at the start of term, with three major milestones (Requirements and HCI, Prototype and Deliverable) and continues until the final submission is made.Client and Project Management:-Working as an effective software development team;-Preparing project timelines and document templates;-Communicating and documenting effectively all engagement with clients to meet requirements.Human-Computer Interaction:-Overview of HCI;-Gathering Data from Users;-Understanding user needs/requirements;-Design Guidelines;-Principles of graphical user interface design and implementation;-Sketching and Prototyping;-Evaluation.Mobile and Web Service development:-Designing a web or mobile application;-Web and mobile app frameworks;-Data storage;-Analytics.Group formation:-Students are split into project groups with around 2-3 members, each group being allocated a client who provides the requirements for the app to be developed. Project groups are selected by the module organisers, who also provide the clients. Project groups are responsible for organising themselves, submitting regular progress reports and working with the client. Lecturers and teaching assistants monitor progress and provide feedback.Group deliverables:-Regularly bi-weekly progress reports and three milestone submissions are made during the course of the project.-The final submission includes the working version of the client’s application, demonstration video of the application, poster for the application, and project report documentation for both the client and for examination.Individual:-Each student is required to submit an individual report giving an evaluation of the project and an assessment of each group member including themselves.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice."
    },
    "COMP0163": {
        "Title": "Blockchain Technologies (COMP0163)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Jiahua Xu",
        "Description": "This module is designed to explore the key mechanisms and features of blockchains and distributed ledgers with a focus on the financial services industry. This will include how business processes and traditional financial assets can be placed on distributed platforms, core aspects of the technology—cryptography, consensus protocols and peer-to-peer networking—with particular reference to Bitcoin. Enhancements of the Bitcoin core protocol and features of other crypto assets will also be discussed. The basics of cryptography and its applications to cryptocurrencies; historical examples to centralised cryptocurrencies; foundations of modern decentralised cryptocurrencies; Byzantine fault tolerant consensus; mechanics of Bitcoin platform including storage, mining, wallets, etc.; alternative platforms, including Ethereum, the XRP ledger and EOS; inter-blockchain communication; smart contracts; potential applications of decentralised ledgers in finance and their pros and cons. Decentralised applications and Decentralised Autonomous Organisations will also be explored. A more practical part of the course will feature hands-on sessions on how to implement smart contracts and code business logic on a permissioned blockchain.AimsThis module aims to teach students the mechanics of the blockchain technologies and give them an understanding how the technologies can be applied to businesses (with a focus on the financial services industry).By the end of the course, the student must be able to:Use basic cryptographic concepts including private/public keys, signatures, hash functions and Merkle treesDistinguish between different types of blockchain (private vs public, permissioned vs non-permissioned, etc.) and cryptocurrencies (utility tokens, security tokens, stablecoins etc.)Recall historical examples of electronic moneyFormulate alternative approaches to Byzantine fault-tolerant consensus including proof of work, proof of stake, etc.Sketch the basic setup of Bitcoin, Ethereum, Ripple and EOSConduct wallet installation, inter-wallet transactions and cryptocurrency tradingCritique misuse of blockchainsInvestigate fraudulent activities in the crypto-marketPresent existing examples of DeFi (Decentralised Finance)Explore potential financial applications of DLT (Distributed Ledger Technology)Propose business strategies for blockchain start-upsUnderstanding how decentralised applications workUnderstand how a decentralised autonomous organisation works and recent failures associated with their implementations to date"
    },
    "COMP0129": {
        "Title": "Robotic Sensing, Manipulation and Interaction (COMP0129)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Dimitrios Kanoulas",
        "Description": "Aims:The aim of this course is to understand how to build robot systems that can sense their environment to then perform an action. To do this, robots must have the ability to receive information from their environment but also an understanding of themselves within it. Importantly, how can we capture this information greatly influences our subsequent actions both in terms of the availability of actionable data but also the processing required to interpret. By exploring these trade-offs, we will explore in depth the sensory systems used to capture information and in turn develop models that enable robots to cooperate with its environment in different ways.In this course, we will discuss a range of sensing and cognitive systems. This theory will then be used to perform manipulation tasks to cope potentially with unstructured environments such as localizing objects for grasping. Learning Outcomes:- Understand the main concepts related to robotic manipulation and sensing.- Develop methods for tackling new and potentially uncertain environments in robotic manipulation systems.- Read scientific literature in robotics to choose approaches for a problem.- Implement state-of-the-art algorithms on simulated manipulators and sensors. Topics:- Representing Poses in Robotics- Robot Kinematics for Manipulation- Exteroceptive Sensing- Proprioceptive Sensing- Sensing-based Grasping- Visual Sensing Uncertainty and Failures- Machine Learning for Manipulation- Human-Robot Interaction and Collaboration Requisites:- Previous programming experience: C++, ROS (may need Matlab, python).- Motivation to work hard. Syllabus Structure:One 2-hours lecture will discuss background theory.One 1-hour lecture for research reading and presentation from the students.One 2-hours practical session will focus on experiments on (simulated or real) manipulators and sensors for grasping purposes."
    },
    "COMP0158": {
        "Title": "MSc Data Science and Machine Learning Project (COMP0158)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Mr Dariush Hosseini",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:1. work individually developing a major project;2. plan and coordinate development activities;3. make realistic work commitments;4. present the work done effectively to a deadline.Content:There is no set syllabus: students identify their chosen project area and are allocated a supervisor who is a member of academic staff. The supervisor provides support and guidance.The project runs from immediately after the examination period (May/June); students are responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor.Some projects are done in conjunction with other departments of the College, others are done in conjunction with external organisations subject to approval by the department. In all cases at least one supervisor must be from within the department who will provide as a minimum project management advice.Project report:The main report documents the results of the project. The deadline for submission is normally the first week of September.Formatting details:-The dissertation text (defined as everything except title page, table of contents, references and appendices) should typically be between 30 and 100 pages in 12 point type and 1.5 or double spacing. The total dissertation length (main text together with appendices) should under no circumstances exceed 120 pages;-Students should place their code in an online repository and provide access details to it in their dissertation;-Writing the dissertation in LaTeX is optional, but strongly recommended.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0053": {
        "Title": "Affective Computing and Human-Robot Interaction (COMP0053)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Nadia Berthouze",
        "Description": "Aims:The module targets students who have no previous knowledge in cognitive science and emotion theory and therefore the aim of Part A of the module is to give a basic introduction to the theory of emotion from physiological and psychological viewpoints and to understand its importance in human decision and communication processes. Part B will concentrate on the application of machine learning techniques to automatic emotion recognition by looking at current applications (e.g. in entertainment, education, and health) and available sensing technology. Part C will focus on the challenges in designing robots that are capable of socially interacting with humans. Examples of current applications (e.g. in entertainment, health, rehabilitation, service robotics) will be used to identify problems and discuss affective computing challenges and approaches for the topics taught in Parts A and B.Learning outcomes:To have a basic knowledge of emotion models and of how technology (e.g. robot) can be endowed with the ability to affectively and socially interact with its user. To understand the challenges that affective computing and social HRI pose to the machine learning field and identify the advantages and disadvantages of different approaches to address those issues.Content:Emotion theory:Affective computing:Introduction to Physiological computing:Human-Robot Interaction (HRI):Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) some machine learning background, for example from COMP0078, COMP0088, and COMP0090; (ii) some programming skills (for example, Python, Matlab, Java, C, C++).There is no imposed programming platform.what is affect, emotion, mood?;why do we have emotions?;neurological and psychological perspectives;how do humans express and recognise emotions?;emotion expression models, appraisal theories;affective and social interaction.definition;aims and current challenges;applications; emotion recognition:how to select and use sensors for data collection;how to build an automatic emotion recognition system from: single modality, facial expressions, body expressions, touch expressions, voice, biosignals and multimodal fusion.key concepts (physiological sensing, affect recognition, biofeedback);how to build low-cost physiological computing systems (e.g. emergent wearable devices, low-cost cameras);types of affect-related physiological signals and how to obtain features (cardiovascular, respiratory, perspiratory etc).social robotics: motivation and emotions in robots;emotion based architecture;ethical issues in Affective Computing and HRI research."
    },
    "COMP0058": {
        "Title": "Applied Cryptography and Cryptanalysis (COMP0058)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marie Vasek",
        "Description": "Aims:Learning outcomes:Content:The module covers the following:Labs:Exercises and programming with Sage Maths. Optional crypto implementation, crypto wallets and blockchain data exploration labs and projects;Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice.Understanding how cryptography and security works in practice, and how it fails.Understanding attacks and vulnerabilities of major industrial standards.Study of real-life applications of encryption, Message Authentication Codes (MACs) and Digital Signatures in areas of telecom, government/identity, buildings/transportation, payment and crypto currency systems.Study of selected topics in cryptanalysis.Understanding the maths, the security design principles, the internal structure and important properties of major cryptosystems, side­channel attacks and countermeasures.Learning how security problems are solved in the industry, and understanding why specific choices are made.Understanding multiple ways to attack and defend in applied cryptography.Understanding the role of keyed operations, non-linearity, randomness, one-wayness, diffusion, side-channel vulnerabilities, permutations, security reductions, etc in cryptographic engineering.Understanding fraud crime and attacks in payment systems. Study or practical applications of digital signatures in electronic commerce, TLS and crypto currency.Understanding security (attacks and defences) in complex real­life systems and the role of keys, cryptographic algorithms and protocols, tamper resistant hardware and other types of countermeasures.Understanding different types of attacks (e.g. key recovery vs. decryption) and different security definitions.Symmetric cryptography. Historical cryptanalysis since WW2 and Enigma. Block ciphers. Structural high-level and self-similarity attacks. Differential cryptanalysis, linear cryptanalysis, software and algebraic cryptanalysis;Groups, finite fields. Number theory. Attacks on public key cryptosystems. RSA, factoring, discrete logarithms;Public key cryptography. Elliptic Curve crypto and digital signatures;Secure email/messaging, digital signatures, certificates. Electronic commerce, SSL/TLS, Forward Security, attacks on TLS;Smart cards and cryptographic protocols. RFID technology, data and entity authentication, challenge-response. EMV Bank cards and terminals, security, fraud, attacks. E-passports;Hardware Security and Side-channel attacks (timing, SPA, DPA and DFA). Side-channel attack countermeasures;Financial cryptography, payment systems, blockchains and crypto currencies;"
    },
    "COMP0102": {
        "Title": "Software Abstractions and Systems Integration (COMP0102)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Emmanuel Letier",
        "Description": "Aims:Students will develop skills and knowledge to design, implement and integrate large-scale software systems from heterogeneous components and services. Emphasis will be put on fundamental principles and practical issues of system integration projects. Students will also develop essential research skills needed to stay at the leading edge of software development throughout their career.Learning outcomes:On successful completion of the module, a student will be able to:1.demonstrate knowledge and critical awareness of techniques and technologies for systems integration;2.apply such knowledge to the development of a substantial system by teams of developers;3.independently research and evaluate new techniques and technologies for system integration;4.communicate their evaluation to a variety of stakeholders in a professional environment.Content:Agile development practices: working with user stories, agile architecture, agile testing.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have practical experience of software design, programming, testing and debugging, at least equivalent to FHEQ Level 6.It is recommended to have taken COMP0101 and COMP0104 in Term 1 (since software development activities build on an industrial project started in COMP0101) AND have good working experience of software development tools and environments."
    },
    "COMP0048": {
        "Title": "Financial Engineering (COMP0048)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Riaz Ahmad",
        "Description": "Aims:This module introduces the applied mathematical and computational aspects of Quantitative Finance;Learning outcomes:On successful completion of the module, a student will be able to successfully apply the necessary probability and differential equation based approach to the pricing of financial derivatives; using both quantitative and numerical techniques;Content:Financial Products and Markets:-Time value of money and applications. Equities, indices, foreign exchange and commodities. Futures, Forwards and Options. Payoff, and P and L diagrams. Put-Call parity.Stochastic Calculus:-Brownian motion and properties, Itô’s lemma and Itô integral. Stochastic Differential Equations – drift and diffusion; Geometric Brownian Motion and Vasicek model. Forward and Backward Kolmogorov equations for the transition density; Black-Scholes Model:-Assumptions, PDE and pricing formulae for European calls and puts. Extending to dividends, FX and commodities. The Greeks and risk management- theta, delta, gamma, vega and rho and their role in hedging. Two factor models and multi-asset options; Mathematics of early exercise:-Perpetual American calls and puts; optimal exercise strategy and the smooth pasting condition; Computational Finance:-Solving the pricing PDEs numerically using Explicit Finite Difference Scheme. Random number generation in Excel – RAND(), NORMSINV(), simulating random walks, correlations. Examining statistical properties of stock returns.Fixed income world: – Zero coupon bonds and coupon bearing bonds; yield curves, duration and convexity. Bond Pricing Equation (BPE). Popular models for the spot rate.Stochastic interest rate models:- Vasicek, CIR, Ho and Lee, and Hull and White. Solutions of the BPE;Introduction to Exotics:-Basic features and classification of exotic options. Simple exotics – Binaries, one-touch, power options, compound and exchange options. Weak and strong path dependency- barriers, Asians and Lookbacks. Sampling- continuous and discrete. Pricing using the PDE framework;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have a good understanding of basic probability and differential equations."
    },
    "COMP0084": {
        "Title": "Information Retrieval and Data Mining (COMP0084)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Emine Yilmaz",
        "Description": "Aims:The module is aimed at an entry level study of information retrieval and data mining techniques. It is about how to find relevant information and subsequently extract meaningful patterns out of it. While the basic theories and mathematical models of information retrieval and data mining are covered, the course is primarily focused on practical algorithms of textual document indexing, relevance ranking, web usage mining, text analytics, as well as their performance evaluations.Learning outcomes:On successful completion of the module, a student will master both the theoretical and practical aspects of information retrieval and data mining, and will be able to understand:1. the common algorithms and techniques for information retrieval (document indexing and retrieval, query processing, etc);2. the quantitative evaluation methods for the IR systems and data mining techniques;3. the popular probabilistic retrieval methods and ranking principles;4. the techniques and algorithms existing in practical retrieval and data mining systems such as those in web search engines and recommender systems, including the recently popular topic of deep learning;5. basic algorithms that can be used to make predictions out of data.Content:Overview of the fields:Study some basic concepts of information retrieval and data mining, such as the concept of relevance, association rules, and knowledge discovery. Understand the conceptual models of an information retrieval and knowledge discovery system.Indexing and Text Processing:Introduce various indexing techniques for textual information items, such as inverted indices, tokenization, stemming and stop words. Techniques used for text compression, such as the Lempel-ziv algorithm and Huffman Coding will be covered.Retrieval Methods:Study popular retrieval models (boolean, vector space, binary independence, language modelling). Probability ranking principle. Other commonly-used techniques such as relevance feedback, pseudo relevance feedback, and query expansion will also be covered;Measurements:Online and offline Evaluation techniques to evaluate retrieval quality. Commonly used evaluation metrics such as average precision, NDCG, etc. Cranfield Paradigm and TREC conferences, as well as some recently popular techniques such as interleaving will be discussed;Data Mining:Study basic techniques, algorithms, and systems of data mining and analytics, including frequent pattern and correlation and association analysis, basic machine learning algorithms such as linear regression and logistic regression. Discussion on basic personalisation and usage mining techniques.Emerging Areas:Study new emerging areas such as learning to rank, deep learning, word embeddings and topic modelling.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) an understanding of probability and statistics; and (ii) proficiency in Java or Python programming (as demonstrated by a least one programming project in the past)."
    },
    "COMP0091": {
        "Title": "MSc Machine Learning Project (COMP0091)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Mark Herbster",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:To be able to:Content:Project Report:Formatting Details:Requisites:To be eligible to select this module, a student must be registered on a programme for which it is formally available.work individually developing a major project;plan and coordinate development activities;make realistic work commitments;present the work done effectively to a deadline.There is no set syllabus: students identify their chosen project area and are allocated a supervisor who is a member of academic staff. The supervisor provides support and guidance. The project runs from immediately after the examination period (May/June) with the students responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor. A typical project will comprise approximately 4 weeks of background reading, analysis and design, followed by 12 weeks of implementation and finally 4 weeks to write an in-depth dissertation;Exceptionally a student may undertake a project that does not require programming skills. However a student undertaking such a project would be required to demonstrate an exceptionally high level of skill in the areas of analysis synthesis critical assessment and design. It is not a soft option and students are advised that such a project is typically much harder than a programming project;Some projects are done in conjunction with other departments of the College. Others are done in conjunction with external organisations although supervision is always provided within the department;The main report documents the results of the project. The deadline for submission is normally the first week of September.The project has a weighting equivalent to 4 course units so represents four twelfths of the MSc programme;The dissertation text (defined as everything except title page, table of contents, references and appendices) should typically be between 30 and 100 pages in 12 point type and 1.5 or double spacing. The total dissertation length (main text together with appendices) should under no circumstances exceed 120 pages;Students should place their code in an online repository and provide access details to it in their dissertation;Writing the dissertation is LaTeX is optional, but strongly recommended;"
    },
    "COMP0060": {
        "Title": "Malware (COMP0060)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr David Clark",
        "Description": "Aims:To provide students with:Learning outcomes:Successful completion of this course will provide students with a specialist understanding of the nature of malware, its capabilities, and how it is combatted through detection and classification.Students will understand what are the underlying scientific and logical limitations on society’s ability to combat malware. Furthermore, students should have an appreciation and broad understanding of the social, economic and historical context in which malware occurs.Content:Laboratory work (24% assessment) Nine 2 hour labs; Topics: Introduction (malware analysis, tools list). Lab 1: architecture; Labs 2 and 3: 8086 instructions; Lab 4: from C to assembly; Labs 5 and 6: Radare 2; Lab 7: static analysis; Lab 8: dynamic analysis (Wireshark, PIN); Lab 9: packing/unpacking (Yara, PEID);Introduction:The social and economic context for malware:Basic Analysis:Static analysis theory:Static Analysis:Dynamic Analysis:Similarity metrics:NLP based approaches; Problems in large scale classification:Hiding:The theory of malware:Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally approved option or elective choice AND have taken modules in logic and discrete mathematics, assembly, and imperative programming at UK-equivalent undergraduate level.Specialist understanding of the issues and techniques in malware detection and classification;Broad understanding of the human, social, economic and historical context in which malware occurs;The taxonomy of malware and its capabilities: viruses, Trojan horses, rootkits, backdoors, worms, targeted malware;History of malware.crime, anti-malware companies, legal issues, the growing proliferation of malware.Signature generation and detection;clone detection methods.program semantics;abstract interpretation framework.System calls: dependency analysis issues in assembly languages; semantic invariance of system call sequences;abstract interpretation as a formal framework for detection;taint-based analyses;semantic clones.virtualization- semantic gap;reverse engineering;hybridisation with static analysis.Kolmogorov Complexity;association metrics;other entropy based metrics.scalability;triage methods;Required FP rate.Polymorphism; compression, encryption, virtualization;Metamorphism; high level code obfuscation engines, on-board metamorphic engines, semantics-preserving rewritings;Frankenstein.Rice’s theorem and the undecidability of semantic equivalence;Adleman’s proof of the undecidability of the presence of a virus;Cohen’s experiments on detectability and self-obfuscation."
    },
    "COMP0146": {
        "Title": "Entrepreneurship Theory and Practice (COMP0146)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Philip Treleaven",
        "Description": "Aims:This is UCL’s principal Entrepreneurship course for students seeking to develop and test a new business idea. Over the past ten years we have taught entrepreneurship to around 3000 students resulting in the launch of a number of innovative businesses. The course is highly practical and will be the start of a student’s journey from engineer/scientist to venture engineer/scientist.  The lectures will provide an overview of the key elements a “deep tech” entrepreneur needs to have a grasp of to develop a market leading business.  Topics covered will include ensuring a student’s idea meets a genuine customer need, to the importance of rapid learning cycles and minimum viable products, through to the art of sales and raising finance.Learning outcomes:On successful completion of the module, a student will be able to:Apply firsthand experience of the selection and deployment of tools, techniques and theories for the identification, validation and structuring of a new business venture;Content:Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice.Invention and innovation; finding and qualifying new opportunities. Business Model Generation;Confirming customer needs and testing market demand. Customer development;Lean Start-ups: what is your minimum viable product? The value of prototyping;Founding teams and finding the right co-founderThe critical art of sales and business developmentDelivery channels and customer relationships.Business Plan and Preparing a Pitch;Developing sustainable competitive advantage. Intellectual Property Rights;Defining and testing critical business model uncertainties. Measuring progressCommon start-up metrics;Sources of Funding. Presenting to VCs"
    },
    "COMP0080": {
        "Title": "Graphical Models (COMP0080)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Dmitry Adamskiy",
        "Description": "Aims:To give an introduction to probabilistic modelling covering the broad theoretical landscape. The course aims to cover much of the first 12 chapters of the course textbook www.cs.ucl.ac.uk/staff/d.barber/brml/ The emphasis is on probabilistic modelling of discrete variables.Learning outcomes:On successful completion of the module, a student will be able to construct probabilistic models, learn parameters and perform inference. This forms the foundation of many models in the wider sciences and students should be able to develop novel models for applications in a variety of related areas.Content:Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) understanding and abilities with Linear Algebra, Multivariate Calculus and Probability at mathematics FHEQ Level 4; and (ii) familiarity with coding a high-level language in order to complete assessments (strongly recommend that students are skilled in Python) (some tools in Matlab and Julia are provided).Bayesian Reasoning;Bayesian Networks;Directed and Undirected Graphical Models;Inference in Singly-Connected Graphs;Hidden Markov Models;Junction Tree Algorithm;Decision Making under uncertainty;Markov Decision Processes;Learning with Missing Data;Approximate Inference using Sampling;If time permits we will also cover some deterministic approximate inference."
    },
    "COMP0050": {
        "Title": "Machine Learning with Applications in Finance (COMP0050)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Fabio Caccioli",
        "Description": "Aims:This module aims at introducing students to basic ML tools, covering both supervised and unsupervised learning methods. We discuss some of the underlying principles and students will develop practical skills to use these methods in financial applications. In their coursework, students can perform their own data analyses in the language they prefer (the suggested one being MATLAB).Learning outcomes:On successful completion of the module, a student will be able to:Content:General Introduction to Machine Learning:History and background; classification of ML approaches; overview of applications.Introduction and Applications of Supervised Learning:Linear regression; model selection and regularization; feature selection; logistic regression; regression trees and forests; support vector machines; neural networks.Introduction and Applications of Unsupervised Learning: Distance/similarity measures; clustering approaches; principal component analysis.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must (i) have an understanding of basic levels of probability theory, linear algebra, and multivariate calculus; (ii) be able to write a reasonably non-trivial computer program in MATLAB.understand the general background of ML methods and their differences to standard methods in Financial Econometrics and Statistics. Supervised learning methods and examples of their application in Finance;understand unsupervised learning methods and examples of their application in Finance;"
    },
    "COMP0128": {
        "Title": "Robotic Control Theory and Systems (COMP0128)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Francisco Porto Guerra E Vasconcelos",
        "Description": "Aims:The students will gain insight into robotics and autonomous systems control theory and practice, specifically:-LTI systems and ways of expressing system dynamics-Control loops. damping, feedback and stability-Insight into developing a working prototype of a control system for a robot that solves a specific task-A working understanding of some of the challenges facing control systems designers in real world environmentsLearning outcomes:On successful completion of the module, a student will be able to:1.understand the principles driving the design of control systems for robots;2.be able to reason about control systems mathematically2.understand control sensitivity and feedback problems;3.understand optimization of controllers;4.program robots and system simulations in an appropriate programming languageContent:-The aim of this module is to provide the basic theory required for solving control problems in robotics and autonomous systems from a practitioner's point of view;-The module presents theory and methodology for analysis and modelling of systems and signals, and methods for design and synthesis of feedback controllers. Special emphasis is placed on:-Control of SISO systems;-Fundamental control performance and stability in feedback systems;-Predictive control with constraints;-In all cases, a theoretical treatment in lectures will be accompanied by corresponding practical exercises in mathematics, computer simulation or reality, in which students can exercise their skills; Requisites:In order to be eligible to select this module, a student must ?be registered on a programme for which it is a formally approved option or elective choice AND must (i) understand basic calculus and linear algebra; and (ii) be able to program in C. These will not be taught explicitly. "
    },
    "COMP0085": {
        "Title": "Approximate Inference and Learning in Probabilistic Models (COMP0085)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Maneesh Sahani",
        "Description": "Aims:The module will present the foundations of approximate inference and learning in probabilistic graphical models (e.g. Bayesian networks and Markov networks), with particular focus on models composed from conditional exponential family distributions. Both stochastic (Monte Carlo) methods and deterministic approximations will be covered. The methods will be discussed in relation to practical problems in real-world inference in Machine Learning, including problems in tracking and learning.Learning outcomes:Students will be able to understand how to derive and implement state-of-the-art approximate inference techniques and be able to make contributions to research in this area.Content:-Nonlinear, hierarchical (deep), and distributed models;-Independent component analysis, Boltzmann machines, Dirichlet topic models, manifold discovery;-Mean-field methods, variational approximations and variational Bayes;-Expectation propagation;-Loopy belief propagation, the Bethe free energy and extensions;-Convex methods and convexified bounds;-Monte-Carlo methods: including rejection and importance sampling, Gibbs, Metropolis-Hastings, anealed importance sampling, Hamiltonian Monte-Carlo, slice sampling, sequential Monte-Carlo (particle filtering);-Other topics as time permits.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must have taken COMP0086 in Term 1."
    },
    "COMP0034": {
        "Title": "Application Programming for Data Science (COMP0034)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mrs Sarah Sanders",
        "Description": "Aims:This course aims to provide students with knowledge of the programming languages and techniques needed to develop, test and deploy an application using data science techniques and that is delivered using web technologies. The core programming language used is Python, though additional languages will be taught and used in the course (e.g. HTML, CSS, JavaScript, SQL).Students will use programming techniques, code libraries for data science and web technologies to develop, test (and optionally deploy) software applications.Learning outcomes:On successful completion of the module, a student will be able to: Content:The course content may be varied according to the progress made by the students and the length of the course. The content covers: Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice AND must have (i) passed Introduction to Programming (COMP0015); (ii) also selected Systems Engineering (COMP0035) in Term 1.Develop an application using an appropriate design/architecture (design is taught in COMP0035) Use a structured language to develop the presentation layer of a web applicationUse a data interchange formatUse appropriate tools and programming languages for developing the application logic in the browser and on the serverUse database technologies to store and query persistent data for an applicationWrite unit tests, and test and debug an applicationUse tools for version controlApply the skills and knowledge gained to design, develop and (optionally) deploy an application;Introduction to the layout and styling of web applicationsMaking interactive web applicationsTransferring data between client and serverDeveloping server-side application logicDeveloping and using a database to store and query persistent dataUsing frameworks, tools and libraries for data analysis and visualisation"
    },
    "COMP0047": {
        "Title": "Data Science (COMP0047)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Giacomo Livan",
        "Description": "Aims:The module is aimed at introducing to data analytics providing some fundamental data science tools. Students will learn statistical tools to identify regularities, discover patterns and laws in complex datasets together with instruments to analyse, characterize, validate, parameterize and model complex data. Practical issues on business data analysis and statistics will be covered with specific case studies.Learning outcomes:On successful completion of the module, a student will be able to:Content:Empirical investigation of complex data:Univariate and multivariate statistics:Information theoretic measures:Modelling and filtering through networks:Probabilistic modelling:Applications and case-studies:Requisites:To be eligible to select this module, a student must be registered to a programme for which it is a formally approved option or elective choice AND must have a good knowledge of basic mathematics and statistics.analyse the main statistical features of complex datasets;understand how to analyse and characterize empirically complex data;understand how to compute relevant statistical quantities and quantify their confidence intervals;understand how to build sensible models and how to parameterize and validate them;understand how to quantify inter-dependency/causality structure between different variables;understand how to use the outcomes of data analysis to develop forecasting tools;Essential practical familiarization with complex and big data, and with the most commonly used software packages to analyse them. Typical challenges with real data. Basics on data acquisition, manipulation, cleaning, filtering, representation and plotting.Marginal probability, joint probability and conditional probability. Empirical estimation of probability distributions. Measures of dependency. Cause and effect, Granger causality.Mutual information, transfer entropy. Spurious correlations and regularization. Forecasting and regressions. Hypothesis testing and validation.Basics on complex networks: definitions and properties. Construction of networks of interactions from correlation matrices and causality measures. Information filtering through networks.Constructing predictive probabilistic models form data. Testing and validating model performances. Selecting between alternative models.Application of the material and methods covered in the module to practical cases and real data will be done within the course through case studies.Case studies will be discussed in class and used as demonstrations of the methodologies covered during the lectures. Other case studies will instead be given as assignments, and will represent the core material for the coursework."
    },
    "COMP0105": {
        "Title": "Financial Institutions and Markets (COMP0105)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Carolyn Phelan",
        "Description": "Aims:The module exposes participants to an overview of the Financial Markets and its key participants and products.Learning outcomes:On successful completion of the module, a student will be able to:1. Understand the function of financial markets and their key participants.2. Have an overview of the main exchanges and the different ways that their indices are calculated.3. Have an understanding of the fixed income market and its major products.4. Have an understanding of the FX market and its major products.5. Have an understanding of the equity market and its major products.6. Have an understanding of the derivative market and its major products.7. Understand credit risk, its effect on the pricing of financial assets and credit related financial products.Content:-Exter’s inverted pyramid;-Public and private sector institutional participants;-Major exchanges and indices-Overview of consumer, corporate and investment banking financial services;-Fixed income market and products;-FX market and products;-Equity market and products;-Derivative market and products;-Credit risk and derivatives;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have an understanding of the fundamental macroeconomics and software services."
    },
    "COMP0103": {
        "Title": "Validation and Verification (COMP0103)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Federica Sarro",
        "Description": "Aims:The module will train students in the principles and techniques of validating and verifying software systems. The training will be intellectually demanding and will cover not only the state-of-the practice in validation and verification, but also the most significant trends, problems and results in validation and verification research.Learning outcomes:On successful completion of the module, a student will be able to:Content:Basic concepts:Validation:Verification:Reading: Selected surveys, research papers, and book chapters.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have a background equivalent to Years 1 and 2 of BSc/ MEng Computer Science UCL.understand correctness, consistency, faults and failures, static analysis and testing;understand the use of logic as a formal language for the specification of systems;understand the use of symbolic execution;verify simple systems;understand the range of approaches to testing that can be applied to software systems;undertake both black-box and white-box (unit-level) testing;appreciate the limitations of the current tools and have insights into ongoing research topics to overcome them;Software engineering lifecycle context;Correctness;Soundness and completeness;Faults;Errors;Failures;Static and dynamic analysis;Kinds of testing (unit, functional, integration, system, acceptance, regression);Black box and White box testing;Input partitioning and Random Testing;Coverage and Structural Testing;Mutation Testing;Regression Testing;Propositional and Predicate Logic;Specifying and verifying programs;Symbolic Execution;Hoare Logic;"
    },
    "COMP0078": {
        "Title": "Supervised Learning (COMP0078)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Mark Herbster",
        "Description": "Aims:This module covers supervised approaches to machine learning (ML). Our goal will be to gain intuition about a number of ML methodologies, how they function, where they perform well, poorly and so forth. These intuitions will be given as mathematical results which will be supported by proof.Learning outcomes:Content:The course consists of both foundational topics for supervised learning such as Linear Regression, Nearest Neighbours and Kernelisation as well contemporary research areas such as multi-task learning and optimisation via proximal methods. In a given year topics will be drawn non-exclusively from the following:Requisites:To be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice AND must have high competency with Multivariable Calculus, Probability and Combinatorics, and Linear Algebra such that they can reprove basic results as well as novel results.The module is mathematical in nature. As such there is a significant proportion devoted to formal theorems and proofs.Gain in-depth familiarity with various classical and contemporary supervised learning algorithms;Understand the underlying limitations and principles that govern learning algorithms and ways of assessing and improving their performance.Nearest Neighbours;Linear Regression;Kernels and Regularisation;Support Vector Machines;Gaussian Processes;Decision Trees;Ensemble Learning;Sparsity Methods;Multi-task Learning;Proximal Methods;Semi-supervised Learning;Neural Networks;Matrix Factorization;Online Learning;Statistical Learning Theory."
    },
    "COMP0025": {
        "Title": "Introduction to Cryptography (COMP0025)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Philipp Jovanovic",
        "Description": "Aims:For many centuries the goal of cryptography was the protection of privacy of communications. Computers, digital communication and in particular the internet have brought an abundance of new security goals. Examples are: anonymity; authenticity; non-repudiation; authorized wiretapping (called law enforcement); and traceability. To each need corresponds security mechanisms to achieve it.The goal of the course is to make students familiar with such techniques and some of the foundations of these methods. In particular students will be confronted with a range of security objectives, different levels of security that can be achieved and some available cryptographic techniques that can be used.Learning outcomes:On successful completion of the module, a student will be able to:Content:Classical ciphers:Private-key encryption:Message authentication codes:Hash functions:Key distribution:Public-key Distribution:Digital Signatures:Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have EITHER (i) passed BSc/ MEng Computer Science (Years 1 and 2) at UCL; OR (ii) passed MEng Mathematical Computation (Years 1 and 2) at UCL; OR (iii) be registered on a Taught Postgraduate programme and have completed a module in mathematics or probability theory at FHEQ Level 6 (or higher).The module is theoretically and mathematically demanding.Model security precisely and formally in terms of adversarial objective and system access;Explain and reason about basic cryptographic tools to protect and authenticate data;Suggest security parameters that protect against standard attacks;Read scientific articles and international standards in the field of cryptography;Cryptanalysis of classical ciphers;Probability theory;Perfect security; Block ciphers:DES;AES;Block cipher modes of operation.Chosen plaintext attacks;Randomised encryption;Pseudorandomness;Chosen ciphertext attacks.Private-key authentication;CBC-MAC;Pseudorandom functions;CCA-secure private-key encryption.Integrity;Pre-image resistance;Collision-resistance;SHA-256;NMAC/HMAC.Key distribution centres;Modular arithmetic and group theory;Diffie-Hellman key exchange.EIGamal encryption;Cramer-Shoup encryption;Discrete logarithm problem.RSA signatures;RSA-FDH and RSA-PSS signatures;DSA signatures;509 certificates;Certification paths."
    },
    "COMP0082": {
        "Title": "Bioinformatics (COMP0082)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor David Jones",
        "Description": "Aims:The overall aim of this module is to introduce machine learning students to the field of bioinformatics (computational biology) and show how machine learning techniques can be employed in this area. The module is aimed at students who have no previous knowledge of biology and so the aim of Part 1 of the course is to give a basic introduction to molecular biology as a background for bioinformatics. Part 2 will concentrate on classical bioinformatics applications, particularly those which make good use of pattern recognition and machine learning methods. Part 3 will cover more recent bioinformatics areas, including gene expression analysis and systems biology.Learning outcomes:On successful completion of the module, a student will be able to:1. Have a basic knowledge of modern molecular biology and genomics;2. Understand the advantages and disadvantages of different machine learning techniques in bioinformatics and how the relative merits of different approaches can be evaluated by correct benchmarking techniques;3. Understand how theoretical approaches can be used to model and analyse complex biological systems.Content:Part 1: Basic molecular biology (6 lectures):-Introduction to Basic Cell Chemistry: Cell chemistry and macromolecules. Biochemical pathways e.g. Glycolysis. Protein structure and functions;-Cell Structure and Function: Cell components. Different types of cell. Chromosome structure and organisation. Cell division;-The Hereditary Material: DNA structure, replication and protein synthesis. Structure and roles of RNA. Genetic code. Mechanism of protein synthesis: transcription and translation. Mutation;-Recombinant DNA Technology: Restriction enzymes. Hybridisation techniques. Gene cloning. Polymerase chain reaction;-Genomics and Structural Genomics: Genes, genomes, mapping and DNA sequencing;Part 2:-Biological Databases: Overview of the use and maintenance of different databases in common use in biology;-Gene Prediction: Methods for analysing genomic DNA to identify genes. Techniques: neural networks and HMMs;-Detecting Distant Homology: Methods for inferring remote relationships between genes and proteins. Techniques: dynamic programming, HMMs, hierarchical clustering;-Protein Structure Prediction: Methods for predicting the secondary and tertiary structure of proteins. Techniques: neural networks, SVMs, genetic algorithms and stochastic global optimization;Part 3:-Systems Biology: biological networks, -omics technologies and data representation;-Transcriptomics; microarrays and RNAseq technologies and analysis methods. Techniques: differential gene detection, heirarchical clustering, dimensionality reduction, k-NN classification, neural networks.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must (i) be familiar with the principles of techniques such as neural networks, Support Vector Machines, and Hidden Markov Models; and (ii) able to program machine learning applications using a standard machine learning framework such as Matlab.Undergraduate students must have also taken at least one introductory machine learning module prior to starting this module. Suitable qualifying modules are COMP0078, COMP0088, COMP0090 or COMP0142."
    },
    "COMP0081": {
        "Title": "Applied Machine Learning (COMP0081)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Dmitry Adamskiy",
        "Description": "Aims:To give a detailed understanding of topics related to efficient implementation of large-scale machine learning with a focus on optimisation in both linear and non-linear machine learning models. Students will also gain experience in tackling real world problems through solving online machine learning challenges. A key aim is that students understand the challenges of optimisation and associated time and space complexities of various approaches.Learning outcomes:On successful completion of the module, a student will:1. have a good understanding of practical issues arising in implementing machine learning in practice, including engineering challenges as well as the data ethics considerations;2. become familiar with techniques used in practice to solve real world machine learning problems and will be able to apply these techniques.Content:-Methods for solving Large Scale Linear Systems, including Conjugate Gradients;-Classical methods for Regression and Classification including linear and logistic regression;-Clustering Methods for Unsupervised Learning;-Fast Nearest Neighbours-Matrix and Tensor Factorisation;-Visualisation methods including tSNE;-Ensembling, Gradient Boosting Machines;-Data Ethics; Fairness in Machine Learning.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) understanding and abilities with Linear Algebra, Multivariate Calculus and Probability at mathematics FHEQ Level 4; (ii) familiarity with coding a high-level language in order to complete assessments (strongly recommend that students are skilled in Python); and (iii) have taken COMP0088 or COMP0078 in Term 1.Note that it is also recommended to have taken COMP0080 or COMP0086 in Term 1. This module is not an introduction to machine learning."
    },
    "COMP0030": {
        "Title": "Research Methods (COMP0030)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Anthony Hunter",
        "Description": "Aims:The aims of this module are to: deepen the student's appreciation of what research in computer science is and how it is carried out; teach students how to read research publications critically; teach students how to evaluate research ideas; teach students how to perform a literature survey; outline the work needed to produce a research paper; and introduce the students to both seminal papers and cutting-edge research in computer science.Learning outcomes:On successful completion of the module, a student will be able to:1. identify seminal and cutting-edge topics in computer science;2. distinguish research topics from engineering tasks;3. know how to go about evaluating the novelty and contribution of a research idea;4. write a critical survey; Students should also gain a good knowledge of a number of areas of research carried out in the department.Content:Students are split into groups and each assigned a supervisor who will give them a batch of research papers and help to answer questions on those papers. Speakers from research groups in the department give an overview of their group's activities.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND have passed Years 1 and 2 of BSc/ MEng Computer Science."
    },
    "COMP0055": {
        "Title": "Computer Security II (COMP0055)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Steven Murdoch",
        "Description": "Aims:Providing an advanced understanding of network and computer security vulnerabilities and countermeasures in real-world systems.Learning outcomes:Students will learn how to think critically and creatively about advanced security topics. They will learn how, when and why to apply security technologies for the most benefit, vis-à-vis advanced network, software, and system issues. Students will be challenged with the study and the design of attacks and defenses to networks, systems, and software, both from a theoretical and a practical point of view.Content:- Network protocols and vulnerabilities;- Network defenses;- Network security tools;- Intrusion and anomaly detection;- Advanced software and system security: threats, vulnerabilities, and countermeasures via real-world examples;- Malware and botnets;- Denial of service;- Advanced Web security;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice AND must have taken COMP0054 (or an equivalent module) in Term 1."
    },
    "COMP0168": {
        "Title": "Machine Learning Seminar (COMP0168)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marc Deisenroth",
        "Description": "This course is designed to introduce students to the most current research topics in machine learning. Such topics will correspond to “trending” topics within the last five years as represented in International Machine Learning Conferences. The backbone of the course will be a series of lectures on a given set of selected topics for that year. As appropriate this may be supplemented by seminar-style class work where current research papers are read in common, discussed, and presented.There will be many potential “trending” topics that can be the subject for any given year, for example,To name a few. AimsThe overarching aim will be to introduce students to the most current research in machine learning. This will be of particular value to students planning to undertake PhD or to Industrial Research. Learning OutcomesFairness and Artificial IntelligenceScalable Gaussian processesModern variational inferenceMeta-LearningBayesian OptimisationMulti-task LearningMirror DescentProbabilistic ProgrammingInductive Logic ProgrammingMachine Learning and Physical SciencesPrivacy-preserving Machine LearningSubmodular optimizationEach year one or two “trending topics are chosen” (examples listed in 14 above). After completion of the course you will be able to:i) To evaluate the differences between the various methods that achieve the goal of this particular topic and thus understand their strengths and weaknesses.ii) To implement an algorithm that achieves the aim of this particular topic,For example, if the topic was “meta-learning”, you would learn both deep neural network and convex optimization approaches to this problem, the types of scenario when the deep network was successful and the convex optimisation approach was not and vice versa.You will be able to use the appropriate to implement the algorithm for example tensorflow for deep neural network and CVXOPT for the convex optimization approachSecondarily you will develop research skills that thus enable you to:i) Critically evaluate competing research papers that address the same problem (topic)ii) Devise experiments as well as theoretical arguments enabling insightful comparison between methodologies."
    },
    "COMP0017": {
        "Title": "Computability and Complexity Theory (COMP0017)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Robin Hirsch",
        "Description": "Aims:The module addresses the theoretical and practical limitations of computation and provides a theoretical framework for modelling computation. The concepts of undecidability and intractability are introduced through a number of examples. The module will convey the proof techniques that are used to classify problems and it is intended that students learn how to apply them in order to classify unfamiliar problems for themselves.Learning outcomes:On successful completion of the module, a student will be able to:1. analyse the complexity of a variety of problems and algorithms;2. reduce one problem to another;3. prove that a problem is undecidable;4. find a polynomial time reduction from one problem to another;5. determine the complexity class of a decidable problem;6. categorise the complexity of a language.Content:Models of Computation:Languages:Undecidability:Non-determinism:Probabilistic Algorithms:Other Complexity Classes:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have:Deterministic Turing machines;Equivalent Turing machines;Register machines.Language recognition;Language acceptance;Recursive languages;Recursively enumerable languages.The Halting Problem;Problem reduction;Undecidability of the tiling problem;Undecidability of first-order logic;Other unsolvable problems.Non-deterministic Turing machines;Polynomial-time reduction;Elementary properties of polynomial time reduction;The complexity classes P, NP, NP-complete;Cook's theorem;How to prove NP-hardness of various problems.Examples of probabilistic algorithms;How to make 'almost sure' your algorithm is correct;Complexity analysis of probabilistic algorithms;The complexity classes PP and BPP.Space complexity;Savitch’s theorem;Exponential time;Non-elementary problems.passed Theory of Computation (COMP0003);passed Algorithms (COMP0005);passed Logic and Database Theory (COMP0009)."
    },
    "COMP0044": {
        "Title": "Operational Risk Measurement for Financial Institutions (COMP0044)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ariane Chapelle",
        "Description": "Aims:The module aims to familiarise students with key concepts in the measurement and management of operational risk in the financial services. It will help them to understand the current issues and challenges faced by the sector, from a methodological, regulatory and systemic standpoint. By detailing the most current debates in the field, the module aims at allowing the students to subsequently become positive agents of solutions in the market place and in research in operational risk measurement and modelling.Learning outcomes:On successful completion of the module, a student will be able to:On successful completion of the module, students will have a sound understanding of:Content:The module is intended to introduce applied statistics and data analytics to operational risk measurement and management in the financial services. The module is primarily focused on the techniques, impacts and benefits of using relevant methods to support effective risk management in banks and insurance companies. The syllabus consists of the following parts:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice.Students with an economic or financial background tend to understand the concepts covered more easily, since the module applies to activities performed in the financial industry. Equally, students with a statistical background will be adequately equipped to understand easily the lectures relating to estimation and distributions.Discuss, select and apply the relevant methods to address issues in the assessment, measurement and aggregation of operational risk exposure;the applications of essentials of data analysis and statistical estimation to operational risk measurement;the methods of scenario analysis, stress testing and regulatory capital assessment;the limitations of operational risk modelling and the ways to address them;some of the essential features of operational risk management in financial institutions and how quantification can support decision-making.Operational Risk Scope and Regulation: Regulation on operational risk, Capital and consequences for the financial industry. Large events and loss overview;Operational Risk data analysis: Internal and External loss data, distribution, tail risk, reporting and insights to seek from loss data regarding upcoming risks;Scenario analysis and stress testing: Scenario identification and assessment process; Probabilities of rare events; Fault trees and event trees; Mixing quantitative and qualitative data. Stress testing Capital and financial robustness. Bayesian Techniques in operational risk;Risk correlations and indicators: Identification and selection of risk drivers. Correlations and determinants of losses;Risk aggregation and diversification: Aggregating data from different sources, loss generating mechanisms, scaling and filtering of data. Copula-based approach for risk diversification; extreme value theory. Remaining issues in operational risk modelling;Upcoming trends in operational risk analysis; how machine learning and big data can help understanding causes and effect of non financial risks."
    },
    "COMP0021": {
        "Title": "Interaction Design (COMP0021)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Chris Evans",
        "Description": "Aims:The module covers advanced topics in interaction design, informed by current research in user experience, human-computer interaction and interaction design. A central theme is how to design technologies to meet people’s needs.Learning outcomes:On successful completion of the module, a student will be able to:1. have knowledge and understanding of research in interaction design;2. have knowledge and understanding of methods used in interaction design;3. reflect critically on the appropriateness of different interaction design methods;4. conduct basic user research;5. design, prototype and evaluate a novel ubiquitous computing technology;- and will have developed the following transferrable skills:6. information gathering and organising skills;7. critical reading skills;8. argumentation skills and the ability to synthesis information from multiple sources;9. written, visual and video presentation skills.Content:The module is separated into two related streams:Research (weekly): This series of e-lectures will introduce students to core (current and historical) and nascent interaction design methods and technologies, including approaches to conducting user research, designing, prototyping and evaluating user-centred systems reviewing evolving interaction technologies.Workshops (weekly): These more practical sessions will give students an opportunity to put interaction design methods into practice. They will link closely to the coursework.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have:-passed BSc/MEng Computer Science (Years 1 and 2); or-have some prior knowledge of HCI or interaction design."
    },
    "COMP0083": {
        "Title": "Advanced Topics in Machine Learning (COMP0083)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Arthur Gretton",
        "Description": "Aims:Kernel methods: To gain an understanding of the theory and applications of kernel methods, including:-An overview of how kernel feature spaces can be constructed, including in infinite dimensions, and the smoothing properties of functions in these spaces;-Simple and complex learning algorithms using kernels (ridge regression, kernel PCA, the support vector machine);-Representations of probabilities in reproducing kernel Hilbert spaces. Statistical two-sample and independence tests, and learning algorithms using these embeddings (clustering, ICA).Learning theory: To learn the fundamentals of statistical learning theory. In particular to:-Understand what characterizes a learning problem and what it means for an algorithm/system/machine to “learn”;-Understand the key role of regularization and the different approaches to use it efficiently in practice;-Acquire familiarity with a variety of statistically consistent learning algorithms, both from modelling and practical perspectives.Learning outcomes:On successful completion of the module, a student will be able to:-gain in-depth familiarity with the selected research topics; understand how to design and implement learning algorithms;-individually read, understand and discuss research papers in the field.Content:Introduction to kernel methods:-Definition of a kernel, how it relates to a feature space, The reproducing kernel Hilbert space;-Simple applications: kernel PCA, kernel ridge regression;-Distance between means in RKHS, integral probability metrics, the maximum mean discrepancy (MMD), two-sample tests;-Choice of kernels for distinguishing distributions, characteristic kernels;-Covariance operator in RKHS: proof of existence, definition of norms (including HSIC, the Hilbert-Schmidt independence criterion);-Application of HSIC to independence testing;-Feature selection, taxonomy discovery;-Introduction to independent component analysis, kernel ICA;-Large margin classification, support vector machines for classification.Introduction to supervised learning in the context of statistical learning theory:-A taxonomy of learning problems;-No free lunch theorem;-Regularization;-Model selection;-Stability and generalization;-Measures of complexity for hypotheses spaces;-Sample complexity, generalization bounds;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have a strong understanding of Linear Algebra, Probability Theory, and Calculus."
    },
    "COMP0041": {
        "Title": "Applied Computational Finance (COMP0041)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Riaz Ahmad",
        "Description": "Aims:Mathematical finance topics studied in term 1 are extended to consider areas of numerical methods used to solve pricing problems, where closed form solutions are not available. An introduction to programming in two popular languages of use in the financial markets.Learning outcomes:On successful completion of the module, a student will be able to:1.apply numerical schemes to solve pricing problems;2.demonstrate programming proficiency in basic C++ and Python to solve practical problems in Mathematical Finance;Content:Success in mathematical finance requires confidence and expertise in applying numerical analysis and programming to solve a wide range of pricing and risk management problems. This course presents numerical schemes for topics in derivative pricing together with programming in C++and Python. C++ continues to retain its ‘sexy’ status in the financial markets and is arguably the most popular language of use in Quantitative Finance. Python is rapidly becoming the standard in scientific computing, receiving much excitement about the application of Python to mathematical finance; its appeal continues to grow in both academia and industry. It is simple to use and free to download, with a growing amount of add-on modules. It is particularly easy to interface with C++.-Numerical Schemes: Binomial Model. Finite Difference Methods; Numerical Linear Algebra. Monte Carlo Methods;-C++: Data types; input/output; file management; control of flow and decision making. Functions; headers and source files. Arrays and strings. Pointers; dynamic memory allocation. Recursion. Objects and classes; operator overloading; polymorphism; inheritance;-Python: Introduction to some of the powerful libraries in Python-Scientific manipulations (SciPy); data structures (NumPy); graphics (Matplotlib); data analysis (Pandas);Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have taken EITHER Financial Engineering (COMP0048) OR Asset Pricing in Continuous Time (MATHGF05) in Term 1."
    },
    "COMP0142": {
        "Title": "Machine Learning for Domain Specialists (COMP0142)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Dariush Hosseini",
        "Description": "Aims:Introduce the students to the basics of machine learning while giving class-based examples of applications to areas of domain specialisation.Learning outcomes:On successful completion of the module a student will be able to: understand elements of the fundamental concepts and mathematical basis of machine learning; apply practical machine learning software in order to perform data analysis tasks.Content:General theory and mathematical foundations are presented in lectures while practical applications are presented in classes.The module includes:Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND should have experience of rudimentary programming and an awareness of standard results in fundamentals of linear algebra (vectors, matrices, eigenvectors /eigenvalues etc.), elements of probability theory (random variables, expectation, variance, conditional probabilities, Bayes rule etc.), elements of statistics (sample statistics, maximum likelihood estimation etc.), and calculus (real-valued functions, derivatives, Taylor series, integrals etc.). Results from these areas will be used, often without proof, throughout the module.Self-Assessment Test:Students should take the self-test available here, to assess their ability for this module.An introduction to machine learning tasks (unsupervised, supervised, reinforcement);Mathematical foundations (linear algebra, calculus, probability, statistics);Supervised Learning: including an exploration of some of the following: linear and polynomial regression, logistic regression, Naive Bayes, kernel methods, SVMs, decision trees, ensemble learning, neural networks, Gaussian processes;Unsupervised Learning: including an exploration of some of the following: PCA, manifold learning, k-means, Gaussian mixture models, EM algorithm."
    },
    "COMP0008": {
        "Title": "Computer Architecture and Concurrency (COMP0008)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Kevin Bryson",
        "Description": "Aims:To provide a working knowledge of the hardware and architecture of a modern computer system, particularly focusing on concurrency aspects and those that have an impact on writing multithreaded software. Students will gain a fundamental understanding of the concurrency abstraction and how it impacts both computer architecture and software design. We will look at computer architecture aspects that directly impact multithreaded software such as the memory hierarchy, cache coherence/consistency and hardware multithreading. We will learn how to design correct multithreaded Java software based on a solid theoretical understanding of concurrency principles and the Java Memory Model. The module will cover an understanding of concurrency from low-level aspects (such as spin locks implemented in assembly language) to high-level design patterns used within the Java concurrency package.Learning outcomes:On successful completion of the module, a student will be able to:Content:Requisites:In order to be eligible to select this module, a student must â€‹be registered on a programme for which it is a formally-approved option or elective choice AND must:Use the concurrency abstraction to reason about concurrent systems;Write and understand modern assembly language programs;Describe how high-level languages are translated to assembly language and subsequently machine code;Describe the internal structure of processors and different forms of parallelism employed;Describe how modern computers handle memory and input/output including key concurrency aspects such as cache coherence, memory consistency/visibility and interrupt-driven thread switching;Describe how operating systems schedule application level threads onto the CPU resources;Describe how synchronization mechanisms in high-level languages are implemented in terms of more primitive hardware concurrency instructions;Reason about and resolve safety aspects of multithreaded Java including interference and visibility issues;Write safe and efficient multithreaded Java code using the monitor design and other patterns;Compare and contrast the traditional Java concurrency mechanisms with those of the new Java concurrency package mechanisms;Correctly and safely use the thread-safe data and control structures within the new Java concurrency package.Top-down high level overview of a computer: the main components making up a computer and how they interact.The concurrency abstraction.Assembly language and machine code.Translation of high-level languages into machine code.Internal structure of a processor: the control unit (CU) and datapath.Parallelism within the CPU.Key aspects of how operating systems handle application-level threads.Memory hierarchy, cache structure and cache coherence mechanisms.Creating and managing Java threads.Understanding and reasoning with the Java Memory Model (JMM) specification.Java traditional synchronization mechanisms (and how they relate to low-level hardware instructions)Monitor design patterns and conditional variables.Reasoning about the correctness of concurrent programs: safety, variable visibility, liveness and deadlocks.Java concurrency package: thread control classes and thread-safe data structures.understand basic computer arithmetic (binary/hex manipulation, fixed-size arithmetic, 2s- and 16s-complement forms, etc.);have strong Java programming skills."
    },
    "COMP0101": {
        "Title": "Requirements Engineering and Software Architecture (COMP0101)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Emmanuel Letier",
        "Description": "Aims:The module will train students in the fundamental principles and latest techniques in systems requirements engineering and software architecture.Learning outcomes:Students will learn how to discover, model, analyse and communicate requirements for software intensive systems and how to design, evaluate and communicate software architecture that meet these requirements. The emphasis will be on developing the students' modelling skills and their ability to communicate requirements and architectures with clarity and precision to business stakeholders and software developers.Content:System Requirements Engineering: Goal-oriented requirements engineering, requirements engineering in agile projects; Software Architecture: Architecture modelling, architectural styles, quality requirements.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have strong knowledge and practical experience of software engineering at least equivalent to FHEQ Level 5."
    },
    "COMP0157": {
        "Title": "Quantum Computation (COMP0157)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Toby Cubitt",
        "Description": "The module provides a first course on quantum computation. The basic mathematical formalism of quantum mechanics is be introduced from a computer science perspective, assuming no prior knowledge of quantum mechanics or physics. Building on this, the module develops the standard circuit model of quantum computation and basic quantum complexity theory. The majority of the module is devoted to quantum algorithms, including rigorous derivations and algorithm analysis. This section of the course starts from simple examples, and builds up to the major quantum algorithms, such as Shor’s quantum factoring algorithm and Grover’s unstructured search algorithm. Aims:The aim of the module is to introduce the students to the principles of quantum mechanics from a computer science perspective, and to the field of quantum computation and algorithms. Learning Outcomes: On successful completion of the module, a student will be able to:Understand (i.e. be able to describe, analyse and reason about) quantum computation, and how it differs from classical probabilistic computation.Analyse the behaviour of simple quantum circuits.Understand how quantum superposition and interference can give quantum speedups over classical algorithms in certain cases, and apply these concepts to the design of quantum algorithms.Derive the Quantum Fourier Transform, and apply it to the design of quantum algorithmsDerive Grover’s unstructured search technique, and apply it to the design of quantum algorithms."
    },
    "COMP0169": {
        "Title": "Machine Learning for Visual Computing (COMP0169)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Niloy Mitra",
        "Description": "Creative industries such as print, feature films, music, fabrication or interactive media increasingly make use of multiple machine learning driven tools. This module enables students to contribute to a new shift of paradigm, where such tools become increasingly intelligent of the content being designed and the users designing them. This is enabled by machine learning, a new way of dealing with data and new forms of algorithms. We will cover an applied background of machine learning and focus on data structures particularly relevant for creative content such as images and video, and focus on learnable algorithms that allow to machines to process them intelligently, such as convolutional neural networks. AimsKnowledge how to apply AI to problems from the creative industry.Familiarity with basic ML-based algorithms and data structures to process digital media.Ability of dealing with large scale data and training of machine intelligence.Knowing rephrasing of existing concepts from digital media with tools from AI.Awareness of the difficulty of computed results and artistic freedom. Learning OutcomesSKILL: Ability to formulate the diversity of image analysis and synthesis tasks as a machine learning process.KNOWLEDGE: Theoretical and practical concepts allowing image processing and generation to become learnable and basic understanding of how to execute that learning.ATTITUDE: Processing of visual data has to be optimized in respect to data.DETAILS:Basic regression: Ability to explain basic (1D) data with a linear model and to make predictions. Knowledge of how what a linear model entails, also in higher dimensions. The resulting attitude could be both that a surprisingly simple thing can explain complex visual phenomena, yet others it cannot.Understanding of linearity and non-linearity: Participants will be able to judge if a linear or nonlinear model is adequate and how important non-linearity is for Visual Computing. They should have knowledge of how to represent such models. The key change in perspective is that almost all non-trivial processes are non-linear.Classification: Ability to formalize a problem as classification code a simple classifier in. Knowledge that classification is regression over probabilities to be from a class.Neural networks: Students should be able to code up a simple perceptron from scratch and manipulate its parameters (e.g., number of units and layers), as well as control the non-linearities. They would understand that NN is just matrix multiplications followed by non-linearities.Audio/2D/3D images and pixel processing: Load and stored images/3D data, audio in the coding environment they use. Understand basic issues of sampling and representations like color and luminance. The attitude should be changing such that not only the algorithm matters, but also the right representation is critical.Tunable image filters; convolutional neural networks: Participants will learn how to execute convolutions on images and how to set up their environment to optimize the parameters of the convolutions. The key knowledge is that learning convolutions allows to share learned parameters across the image.3D meshes and point clouds: Until now data structures were regular, but now students will learn how to load irregular data (3D graphs, 3D meshes, 3D point clouds) into their environment and also how to process them as well as to learn tunable filters for them. They will deepen their knowledge of convolution by seeing how it extends to unstructured data, a generalization. The resulting attitude should be, that a well-defined convolution works on regular data as well as irregular ones.Ambiguity and style: Students will be explained, that under some conditions, multiple solutions are valid and that it can be adequate to report any of these. They will see how to change their code from working on paired data matching an output to a reference, it can be sufficient to match only statistics. The required skill is to change the loss and choose the right representation of these statistics.Generative modelling: We will first introduce the concept of a generative model, which takes simple parameters in low dimensions and maps them to complex objects in millions of dimensions. Using this requires the skill to load many exemplars and encode and decode them, which students can compose from components from before. The change of attitude should be, that a generative model is a very abstract way to “address” objects in a family of natural instances: images of faces, houses, cars, etc.Levels of supervision; Adversarial training: Students here will acquire the skill to replace the supervision in form of pairs that are mapped to each other by a paradigm where only random samples form a target distribution are given. To this end they have to understand that the loss is replaced by another network."
    },
    "COMP0087": {
        "Title": "Statistical Natural Language Processing (COMP0087)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Sebastian Riedel",
        "Description": "Aims:The module introduces the basics of statistical natural language processing (NLP) and machine learning techniques relevant for NLP.Learning outcomes:On successful completion of the module, a student will be able to understand relevant ML techniques, in particular in deep learning, what makes NLP challenging (and exciting), how to write programs that process language, and how to address the computational challenges involved.Content:NLP is domain-centred fields, as opposed to technique centred fields such as ML, and as such there is no \"theory of NLP\" which can be taught in a cumulative technique-centred way. Instead this course will focus on one or two NLP end-to-end pipelines (such as Machine Translation and Machine Reading). Through these applications the participants will learn about language itself, relevant linguistic concepts, and Machine Learning techniques. For the latter an emphasis will be on deep learning prediction.Topics will include (but are not restricted to) machine translation, sequence tagging, constituent and dependency parsing, information extraction, semantics. The course has a strong applied character, with coursework to be programmed and lectures that mix practical aspects with theory and background.NLP Tasks:NLP and ML methods:Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) an understanding of Basic Probability Theory (e.g. Bayes Rule), Linear Algebra and Multivariate Calculus; (ii) proficiency in coding in Python; and (iii) the ability to install libraries on a computer.Language Models;Machine Translation;Text Classification;Sequence Tagging;Constituency Parsing;Dependency Parsing;Information Extraction;Machine Comprehension.Encoder/Decoder Architectures;Feature Engineering;Deep Neural Networks;RNNs, CNNs;Attention;Word Vectors;Pretraining."
    },
    "COMP0164": {
        "Title": "Digital Finance (COMP0164)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Nikhil Vadgama",
        "Description": "This module seeks to provide a comprehensive understanding of the financial services industry in terms of business models and sector practises. We start from money and payments as the foundations of the financial services industry and then move on to core financial products which include banking, wealth management, insurance, and investing. After providing the foundations for how these sectors operate, business models will be discussed including peer-to-peer (P2P), business-to-business (B2B), Business-to-consumer (B2C), and consumers-to-consumer (C2C). Finally, the impact of emerging technologies will be discussed in terms of how they are changing these sectors and business models (technologies will include AI, Blockchain, Cloud etc). Students will be equipped with a broad knowledge of banking products and services and how new business models and emerging technologies are being applied. AimsThe aim of this module is to teach about the modern digital financial landscape. This will include starting off with money and payments as the basis of the financial system. Then moving on to covering how major financial products work and different business models that are utilised. Finally, emerging technologies such as AI, blockchain and cloud infrastructure will be introduced with a focus on how they are being adopted by the sector and how these technologies are impacting business models. Learning outcomesTo understand the foundations of the financial services system being underpinned by money and payments and how these have evolvedTo understand the core aspects of financial services industry which include Banking, Lending, Investing (markets incl. stocks, bonds, derivatives), Wealth Management and InsuranceTo know what the various business models utilised in financial services area including B2B, B2C, and new business models that have emerged as a result of technology including P2P and marketplacesTo understand how key emerging technologies are changing the financial services landscape which include AI, blockchain (infrastructure and cryptocurrencies) and cloud infrastructure"
    },
    "COMP0029": {
        "Title": "Individual Project for Year 3 BSc (COMP0029)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr John Dowell",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial piece of individual project work, applying knowledge learned throughout the degree programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard via a written report.Learning outcomes:On successful completion of the module, a student will be able to:Content:Project Goals:A BSc project is expected to have a reasonable level of challenge and depth, and may include research-oriented goals as well as the practical application of Computer Science ideas and concepts.Project Report:As every student undertakes a distinct project, there is no indicative reading list available. The student is expected to locate relevant information sources themselves with advice from their supervisor.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is formally available.work individually to undertake a major project;plan and coordinate the project activities to meet the deadlines;make realistic work commitments;write a substantial report to document the project results;demonstrate good problem solving and evaluation skills;There is no set syllabus. Students identify their chosen project topic and find a member of the academic staff who will act as the project supervisor.The project begins in October and runs in parallel with normal teaching during terms 1 and 2. The submission deadline is early in term 3.Students are responsible for organising and carrying out their project, and are expected to attend weekly tutorials with their supervisor during term time. Tutorials allow the supervisor to monitor the progress of the project, providing advice and feedback as necessary.There are two formative milestones, (i) the Project Plan submitted in mid-November, outlining the project aims and objectives, providing a work plan, and confirming that the project has started successfully, and (ii) the Interim Report submitted in late January outlining what has been achieved so far and what it is required to complete the project. These documents are prepared with advice from the supervisor and must be approved by the supervisor to confirm the project is proceeding properly.The project has a 30 credit value, and represents one quarter of the student's final year work.10% of the module mark is for the IEP How to Change Challenge taken at the end of the second year.The final report documents the results of the project, and is expected to be a substantial, well-written, and properly structured document. Obtaining a higher module mark depends on submitting a good quality report, as well as successfully undertaking the project work. The project guidelines available on Moodle give detailed information about the required content."
    },
    "COMP0159": {
        "Title": "MSc Disability, Design and Innovation Dissertation (COMP0159)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Youngjun Cho",
        "Description": "Aims  The MSc project gives you the opportunity to conduct research in the area of Disability Innovation under the supervision of a member of the Global Disability Innovation Hub staff and GDI partners in industry and academic. The aim of the dissertation module is to enable students to develop their research, design and innovation skills through conducting an independent project. Learning Outcomes 1, Research Skills Students will be able to: 2, Subject Specific Skills Students will: 3, Transferable Skills Students will be able to:  Content Students will choose a project from a list or proposals put forward by supervisors, and then work intensely on these during term 3 before submitting a final. The dissertation process is outlined here: Study material on topics such as: Delivery The module is delivered through tutorials/seminars and independent study. Assessment Portfolio: to include a dissertation, artefact and other supporting materials as required by the project 100 %     Critically analyse and discuss literature Discover and define research issues and questions Use appropriate research, design and innovation methods Develop materials which report in a clear manner the contribution to the field that their project has achieved Develop detailed working knowledge of their chosen subject Develop their own ideas and understanding of a topic Use this knowledge to create a unique contribution to the field Deliver concise, informative presentations Develop clear project plans Develop self-reflection Communicate in and to a cross-disciplinary team Communicate and advocate with disabled people Develop problem-solving skillsFirst week of Term 2: Projects released to students Students meet with potential supervisors to decide on a project. When a supervisor has agreed to supervise a student, they send a notification to this effect to the project coordinator stating the title of the project and the student Mid-Feb: Final deadline for matching students and projects and the official start of project Students should have 2 first project meetings with supervisors to decide on the scope and weighting of contributions. These are then submitted to the Teaching Committee for review and approval. Once approved these cannot be changed. May: 1-min project pitch presentations June – August: Students to meet with supervisors ~ 10 times over the 12 weeks of full-time project work August: submission deadlineSeptember: dissertation showcase and (optional) Individual preparation for conference/journal publications with supervisorsHow to conduct a literature review Referencing & plagiarism Time management Getting the most out of supervisors will all be made available online for self-study "
    },
    "COMP0104": {
        "Title": "Tools and Environments (COMP0104)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Jens Krinke",
        "Description": "Aims:The module will train students in the principles and application of software tools and environments. The module will cover the fundamental practices that one would expect from any software professional one would want to hire. It will also offer an introduction into research on analysing software and extracting information from software repositories. The module is based on decades of experience, including the latest thinking on software process and analysis.Learning outcomes:On successful completion of the module, a student will be able to:1.understand the nature and variety of software tools and environments that are available for achieving software engineering tasks;2.select appropriate tools and environments for the task at hand and to apply the tools and environments to achieve the task;3.understand and appreciate current research directions in analysing software and repositories;Content:-Version and Configuration Management;-Build and Integration Tools;-Debugging and Profiling Tools;-Software Analysis;-Code Audit;-Mining Repositories;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must understand the basics of programming, computer science and software engineering equivalent to Years 1 and 2 of MEng Computer Science UCL."
    },
    "COMP0071": {
        "Title": "Software Engineering (COMP0071)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ghita Kouadri Mostefaoui",
        "Description": "Aims:This module covers a range of Software Engineering (SE) material, following on from that introduced in term 1. The emphasis is on the knowledge needed to be able to model, design, implement and evaluate larger software systems effectively. The module starts with development lifecycle models, such as agile development, and then continues to cover requirements specification, requirements analysis, object-oriented concepts, the Unified Modelling Language (UML), and object-oriented design. Software engineering is an inherently practical subject and applying the concepts being taught is a vital component of developing expertise in this area. Consequently, students undertake a substantial group project, working through a number of stages of the development of a larger software application. Students will be expected to largely organize themselves and their work, learning key transferrable skills in team management and organisation.Learning outcomes:On successful completion of the module, a student will be able to:1.Appreciate the wider engineering issues that form the background to developing complex and evolving software intensive systems;2.Plan and deliver an effective software engineering process, based on knowledge of widely used development lifecycle models, in particular Agile development;3.Employ group working skills including general organization, planning and time management and inter-group negotiation;4.Capture, document and analyse software requirements. Translate a requirements specification into an implementable design, following a structured and organised process;5.Make effective use of UML, along with design strategies such as defining a software architecture, applying the SOLID principles and using design patterns;6.Evaluate the quality of the requirements, analysis and design work done during the module;Content:Topics covered in lectures during the first half of term:Course Introduction:-Overview of the software engineering discipline;-Software lifecycle models;-Agile development;-The Unified Process (UP) Organising development projects;Requirements Engineering:-Documenting requirements, user stories, use cases and scenarios;Introduction to UML:-Review of object-oriented principles;-UML use case, class, sequence, activity, state, component and deployment diagrams;The Analysis and Design Process:-User story realisation;-Object-oriented modelling;-Incremental refinement;Design Principles:-Software architecture;-Separation of concerns;-SOLID Principles;-Object-Oriented design practices; Project Work:-Students are split into project groups with around 4-7 members. Project groups are selected by the module organiser, and each group is allocated a basic project specification to work with. Each project specification gives an outline of an application with a mock graphical user interface (GUI) to be developed. Project groups are responsible for organising themselves, meeting regularly to discuss their models. A group diary should be kept to record the progress of the group, including the minutes of meetings held;The coursework doesn’t require an implementation but rather focuses on all the pre-implementation phases such as requirements capture and UML modeling. Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice.The main requisite for this module is knowledge of an object-oriented programming language such as Python or Java."
    },
    "COMP0005": {
        "Title": "Algorithms (COMP0005)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ifat Yasin",
        "Description": "Aims:To develop programming and problem solving skills, to encourage a thoughtful approach to analysis and design problems, to familiarise students with logical and mathematical inference and argumentation.Learning outcomes:On successful completion of the module, a student will be able to: apply this knowledge to specification of algorithms and logic programming.Content:Searching and sorting algorithms:-Elementary searching (Linear and binary search);-Binary search trees;-Hash Tables, Hashing, Hash functions;Graph algorithms:-Directed acyclic graphs;-PERTchart;-Dijkstra’s algorithm;-Bellman-Ford algorithm;-Floyd-Warshall algorithm;Text algorithms:-String matching;-Longest Common Sequence;-Sequence/subsequence;Analysis of algorithms:-Algorithmic complexity;-Upper and lower bounds;-O notation;-Best, worst and average cases;-Classifications of algorithms;Linked Lists:-Linked structures;-Singly-linked list, Doubly-linked list;-Circular linked list;Abstract Data Types:-ADTs;-Defining the ADT;-Implementing the ADT;-Bag ADT;-List-based Implementation;-Queue ADT;Dynamic Programming:-Elements of dynamic programming;-Rod cutting;-Matrix-chain multiplication;-Optimal binary search trees;Recursion:-Properties;-Run time stack, tail recursion;-Recursive applications, recursive binary search, exponential operation;Analysis of searching and sorting algorithms:-Binary search;-Selection sort, Insertion sort, mergesort, quicksort, radix sort;-Bubble sort, lower bounds for sorting;-Working with sorted lists;-Heapsort, building a heap, heapsort algorithm, priority queues;Greedy Algorithms:-Elements of greedy strategy;-Huffman codes;-Matroids;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have taken in Term 1 Theory of Computation (COMP0003)."
    },
    "COMP0119": {
        "Title": "Acquisition and Processing of 3D Geometry (COMP0119)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Niloy Mitra",
        "Description": "Aims:To expose students to the challenges and potential of geometry processing in relevant application areas. To explain how to use acquire 3D model, and subsequently process, analyse, and manipulate the data. To familiarize students with handling real data sets and apply machine learning algorithms in the context of 3D geometric data.Learning outcomes:On successful completion of the module, a student will be able to:1.Read and understand recent advancements in this area (theory);2.Obtain a grasp of the key tools in geometry processing (theory) and understand current machine learning approaches in the context of geometry processing;3.Gain necessary coding and practical skills to work directly with real-world 3D data (practice);4.Learn to formulate and solve problem using the geometric tools they learn as part of the module (practice);Content:-The module introduces basics of geometry processing covering important aspects of acquisition, analysis, and manipulation of 3D data. The module will consist of a mix of theory and applications to real-world scenarios;-The module intends to introduce students to the various stages of a typical geometry processing pipeline. With the recent growth in popularity of 3D acquisition devices (e.g., depth cameras) and modeling frameworks, geometry processing now plays a central role in a diverse set of applications including city planning, architectural geometry, reverse engineering, interactive modeling, etc;-Topics will include but not restricted to mesh representations, mesh smoothing, remeshing, mesh reconstruction, and shape analysis. Necessary topics in differential geometry will be covered in the module; Introduction:-Applications;-Surface representations; Geometry Registration:-Local and global registration (ICP, branch-and-bound);-Geometry Acquisition;-3D acquisition using laser scanners;-Structure from motion-based acquisition; Differential Geometry:-Introduction to curves and surface;-Introduction to curves and surface;-Mesh Smoothing and Decimation;-Parametrization and Remeshing;-Mesh Deformation;-Laplace Beltrami Operator;-Shape Analysis;-Shape Synthesis;-ML in the context of geometry processingRequisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND should have (i) an understanding of linear algebra; and (ii) coding experience."
    },
    "COMP0007": {
        "Title": "Directed Reading (COMP0007)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Fabio Zanasi",
        "Description": "Aims:To develop students’ ability to approach and understand fairly advanced research texts. To introduce students to a selection of historically important developments and associated technical concepts in theoretical computer science. To develop students’ academic writing, research and presentation skills.Learning outcomes:On successful completion of the module, students will be able to:1. approach and understand research papers in computer science;2. explain a number of selected computer science topics in some technical depth;3. summarise and communicate in writing the technical ideas, context and impact of computer science research texts.Content:The module will be based on directed reading and critical analysis of classic research papers in theoretical computer science, with some emphasis on the theory of programming languages. Each coursework exercise asks students to write a critical summary of one such research paper, including its context and impact on the field. Students are also asked to prepare a short oral presentation for the fifth and final paper.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice"
    },
    "COMP0015": {
        "Title": "Introduction to Programming (COMP0015)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Ms Rae Harbird",
        "Description": "Aims:The module uses Python to give a grounding in the basic programming techniques of sequence, repetition, branching, and functions. Students also learn to use and manipulate data structures such as lists, dictionaries and sets to solve problems. Building on the fundamental skills, key object-oriented concepts are covered including the use of classes, objects and inheritance. At the end of the course, students will use some of the most popular Python libraries for data analysis. This is an intensely practical module and full student engagement outside of lectures and in lab classes is critical to successful completion of the module.Learning outcomes:On successful completion of the module, a student will be able to:1. Understand why Python is a useful programming language for developers;2. Design and develop applications using a large sub-set of the language effectively;3. Design object-oriented programs with Python classes;4. Use programming tools such as an integrated development environment (IDE) and debugger;5. Use Python libraries for data analysis.Content:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice.Why Python?;Types, variables, sequence, branching, loops;Strings and functions;Data structures; lists, dictionaries and sets;Object-oriented programming;File handling and exceptions;Data analysis using Python libraries."
    },
    "COMP0133": {
        "Title": "Distributed Systems and Security (COMP0133)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Brad Karp",
        "Description": "Aims:Learning outcomes:On successful completion of the module, a student will be able to:Content:Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available AND must have (i) taken and passed either COMP0019 or a module of equivalent depth and rigour (subject to Module Leader's review and approval); (ii) a strong background in programming in C (including dynamic memory allocation and the use of pointers); (iii) an in-depth understanding of operating systems constructs and principles (such as virtual memory and system call implementation); and (iv) a strong proficiency in reading and understanding assembly code.The first half of the module explores the design and implementation of distributed systems in case-study fashion: students read classic and recent research papers describing ambitious distributed systems. In lecture, students critically discuss the principles that cause these systems to function correctly, the extent to which these systems solve the problem articulated by the authors and the extent to which the problem and solution chosen by the authors are relevant in practice. The second half of the module explores computer system security, again, largely in case-study fashion;Correctness under concurrency is a central challenge in distributed systems and one that can only fully be understood through experience of building such systems (and encountering subtle bugs n them). To give students experience of this sort, the module includes one significant programming coursework in C, in which the students implement a simple distributed system that must provide an ordering guarantee. Further written coursework helps students solidify their understanding of the security material in the class;articulate and apply classic design principles for distributed filesystems, agreement protocols, distributed two-phase locking, distributed shared memory, logical clocks, and consistency protocols under weak connectivity;articulate and apply classic design principles for cryptographic protocols, authentication systems, logic applied to reasoning about certificate-based authentication, defence against exploits, isolation of untrusted code, and least-privilege software design;be able to read and grasp research literature in the distributed systems and security areas independently;critique research-grade designs and evaluations of distributed and secure computer systems;Course introduction;OS concepts;Design: Worse is Better;Concurrent I/O;RPC and Transparency;Ivy: Distributed Shared Memory;Bayou: Weak Connectivity and Update Conflicts;GFS: The Google File System;OS I/O Performance: Receive Livelock;Introduction to Security;User Authentication;Cryptographic Primitives;Secure Sockets Layer/Transport Layer Security (SSL/TLS);Reasoning Formally about Authentication: TAOS;Software Vulnerabilities and Exploits;Preventing Exploits;Containing Buggy Code: Software-based Fault Isolation (SFI);OKWS: Approximating Least Privilege in a Real-World Web Server;"
    },
    "COMP0130": {
        "Title": "Robot Vision and Navigation (COMP0130)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Simon Julier",
        "Description": "Aims:Students will gain knowledge about robot real-time pose estimation and mapping, with an emphasis on the use of vision as a primary sensor for mapping the environment. The module will provide students with an understanding and practical experience of how to combine information from satellite navigation and motion sensing systems, recover geometry from optical sensors and creating an environment map which a robot can use for navigation and motion planning.Learning outcomes:On successful completion of the module, a student will be able to:1.understand the fundamental techniques used for real-time estimation in linear and nonlinear systems;2.understand how to formulate algorithms to fuse data from satellite and motion sensing systems to estimate robot position; 3.understand how to formulate mapping and localisation problems in which robots construct sparse maps of their environment;4.understand how to use camera data to create 3D reconstructions of the environment;5.programme with Matlab or Python or C++ Availability and prerequisites;Content:To navigate safely, robots need the ability to localize themselves autonomously using their onboard sensors. Potential tasks include the automatic 3D reconstruction of buildings, inspection and surveillance. This module will teach current techniques for 3D localization, mapping and navigation that are suitable for robotics covering the following topics:-Filtering techniques and data fusion;-Motion estimation and mapping using Simultaneous Localisation and Mapping (SLAM) techniques;-Non-linear minimization for 3D reconstruction using structure-from-motion.Most of the coursework is carried out using MATLAB and C++, and so some basic familiarity with both programming languages is highly recommended. Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice."
    },
    "COMP0114": {
        "Title": "Inverse Problems in Imaging (COMP0114)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Simon Arridge",
        "Description": "Aims:To introduce the concepts of inverse problems, optimisation, and appropriate mathematical and numerical tools applications in image processing and image reconstruction;Learning outcomes:On successful completion of the module, a student will be able to:Content:Introduction:Mathematical Tools:Numerical Tools:Optimisation Methods:Concepts of sparsity:Applications:Other Approaches:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) taken COMP0137 in Term 1 (if not, contact the Module Leader); and (ii) a strong competency in mathematical and programming skills, including Fourier Theory (discrete and continuous, sampling, convolution), Linear Algebra (Eigenvalues and Eigenvectors, Matrix Algebra), Calculus (functions of multiple variables, calculus of variation), Probability (Gaussian and Poisson probabilities, Bayes Theorem), and Matlab programming (multidimensional arrays, image visualisation, anonymous functions).Self-Assessment Test:Students should take the self-test available here, to assess their mathematical ability for this module.To understand the principles of forward and inverse problems, illposedness, and regularisation.Acquire skills in mathematical methods and programming techniques for solving inverse problems using optimisation and other methods.Gain experience in practical problems in Imaging Science, including image enhancement, reconstruction and tomographyExample problems;Data Fitting Concepts;Existence;Uniqueness;Stability;Bayesian interpretation;Linear Algebra:Solving Systems of Linear Equations;Over and Under Determined Problems;Eigen-Analysis and SVD;Solving Systems of Linear Equations;Over and Under Determined Problems;Eigen-Analysis and SVD;Variational Methods:Calculus of Variation;Multivariate Derivatives;Frechet and Gateaux Derivatives;Calculus of Variation;Multivariate Derivatives;Frechet and Gateaux Derivatives;Regulariation:Tikhonov and Generalised Tikhonov;Non-Quadratic Regularisation;Non-Convex Regularisation;Methods for selection of regularisation parameters;Tikhonov and Generalised Tikhonov;Non-Quadratic Regularisation;Non-Convex Regularisation;Methods for selection of regularisation parameters;Descent Methods:Steepest Descent;Conjugate Gradients;Line Search;Steepest Descent;Conjugate Gradients;Line Search;Newton Methods:Gauss Newton and Full Newton;Trust-Region and Globalisation;Quasi-Newton;Inexact Newton;Gauss Newton and Full Newton;Trust-Region and Globalisation;Quasi-Newton;Inexact Newton;Least-Squares Problems;Linear Least Squares;Non_linear Least Squares;Non-Quadratic Problems;Poisson Likelihood;Kullback_Leibler Divergence;Lagrangian penalties and constrained optimisation:Proximal methods:L1 and total variation;wavelet compression;dictionary methods;Bayesian Approach:Maximum Likelihood and Maximum A Posteriori estimates:Expectation_Minimisation:Posterior Sampling:Confidence-Limits;Monte Carlo Markov Chain;Image Denoising;Image Deblurring;Inpainting;Linear Image Reconstruction:Tomographic Reconstruction;Reconstruction from Incomplete Data;Non-Linear Parameter Estimation;General Concepts;Direct and Adjoint Differentiation;Tomographic Reconstruction;Reconstruction from Incomplete Data;Non-Linear Parameter Estimation;General Concepts;Direct and Adjoint Differentiation;Learning Based Methods;"
    },
    "COMP0123": {
        "Title": "Complex Networks and Web (COMP0123)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Shi Zhou",
        "Description": "Aims:This module introduces essential concepts and methods in the interdisciplinary research area of network science, with a particular focus on the Internet, the World Wide Web and online social media networks.Topics covered include: topological properties and metrics of complex networks; mathematical models of networks; evolution of Internet topology; structures of the Web; network community detection; epidemic spreading models; analysis of social media networks; temporal networks; spatial networks; signed networks and network controllability.Learning outcomes:On successful completion of the module, a student will be able to:Content:Requisites:To be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice AND must have a strong competency in programming.Define and calculate essential network metrics;Describe the structure of the Internet and the Web;Relate graphic properties to network functions;Explore new angles to understand network collective behaviours;Design and conduct analysis on large networks;Complex networks;Network graphic properties;Random networks;Small-world networks;Scale-free networks;Generative network models;Rich-club coefficient;Network mixing patterns;Network structural constraints;Network centrality;Internet topology and models;The Web structure;Network visualisation;Network community structure;Epidemic spreading models;Network controllability;Document networks;PageRank;Temporal networks;Spatial networks;Signed networks;Twitter botnets;Online social network analysis."
    },
    "COMP0054": {
        "Title": "Computer Security I (COMP0054)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marie Vasek",
        "Description": "Aims:This module provides an introduction to computer security concepts and techniques. It covers core security principles to engineer systems that provide properties like confidentiality, integrity, or availability, despite the efforts of malicious entities to subvert them.Learning outcomes:Students will learn how to recognise security properties of systems, as well as formulate security policies, and model the threats they may face.Through exposure to a number of established industry and government security mechanisms and design patterns, they will be able to select appropriate controls to guarantee that the security policies are implemented robustly and may resist efforts to subvert them. Conversely, students will gain skills in analysing computer systems, and developing strategies to bypass security controls.Content:The first half of the course covers topics which underpin security of systems:We will then dive into the details of various technical protection mechanisms and computer attacks including hardware, network and operating system security attacks. We will also learn about defensive technology in high-integrity systems, and study basic attacks in web security. We will study user authentication and identification, and how applied cryptography is used in TLS and network security.The module provides strong foundations in security engineering, and enables students to more easily follow other modules in Information Security and in Applied Cryptography.Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally approved option or elective choice, AND have taken the equivalent of the core modules of a UK-equivalent Honours Degree (or higher) in the field of Computer Science (in particular, operating systems, networking, computer architecture.)Some mathematics are useful to know: discrete mathematics, probability, logic, partial orders, entropy.basic principles;security policies;access control (theory and practice);hardware;and OS security fundamentals."
    },
    "COMP0075": {
        "Title": "Financial Market Modelling and Analysis (COMP0075)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Chris Clack",
        "Description": "Aims:This module will introduce students to the field of modelling and analysing financial markets with emphasis on (i) the wide variety of deterministic and discrete-time methods that are available; and (ii) numerical simulation of the financial markets, including agent-based modelling. The module will start with a broad introduction to financial markets and terminology used in the financial markets.Learning outcomes:On successful completion of the module, a student will be able to:1.distinguish between different types of modelling and analysis, and explain the advantages and disadvantages of each method;2.understand discrete-time dynamic optimisation methods;3.understand numerical simulation methods, including both agent-based techniques and the use of recurrence relations;Content:Introduction to the Financial Markets:Markets:Introduction to Techniques:Specific models:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) a UK-equivalent Honours Degree (or higher) in the field of Computer Science, Mathematics, Statistics, Physics, Engineering, or another similar quantitative subject; (ii) a strong background with high performance in mathematics; and (iii) English Language at the UCL Good level.Market Microstructure;Order-driven and Quote-driven markets;Orders, Quotes and Trades;Post-trade processing;Regulation;Trading Strategies;Risk Management;Auctions;Markets;Dealer Markets and Order-Book Markets;Market Making;Low latency and High Frequency Trading;Game Theory;Minority Games;Agent Based Models;Dynamic Optimisation;Day and Juang;Bulls, Bears and Market Sheep;Lyons;The Foreign Exchange Hot Potato;Huang et al;Optimal Market Making with Risk Aversion;"
    },
    "COMP0143": {
        "Title": "Cryptocurrencies (COMP0143)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Philipp Jovanovic",
        "Description": "Aims:Learning outcomes:On successful completion of the module, a student will be able to:Content:The module gives students an understanding of cryptocurrencies such as Bitcoin and their underlying data structure, known as the blockchain. Students will study various components of these cryptocurrencies, ranging from the network layer to the consensus layer to the transaction layer. The module will cover both constructive aspects of these technologies (what can we build when we use blockchains?) as well as attacks on various privacy and security aspects.Requisites:To be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice AND must have taken COMP0025 in Term 1.The module aims to provide students with an understanding of the technologies underlying cryptocurrencies, as well as their broader ecosystem;After taking the module, students should be able to identify the trade-offs in terms of openness, privacy, security, and efficiency in given cryptocurrency and blockchain-based solutions. They will be taught how to do this both by seeing constructive solutions that satisfy all or some of these properties and by seeing attacks on existing systems that demonstrate how they fail to satisfy one or more of these properties;Students should be able to keep up with this rapidly evolving field by improving their ability to read whitepapers, technical specifications, and research papers. When faced with a new system, they should be able to reason about its effectiveness in terms of the trade-offs listed above;understand the basic components of blockchains and cryptocurrency transactions, including how peers achieve consensus, which programming languages are used to specify information, and how blockchains are secured via the underlying cryptographic primitives of hash functions and digital signatures;understand the trade-offs in terms of efficiency and security associated with the consensus protocols used for blockchains, and how they relate to existing consensus protocols. Similarly, understand the trade-offs in terms of openness (permissionless, permissioned, etc.), efficiency, and privacy;read whitepapers and research papers in this area and present them to others;know that there are interesting technical research problems associated with cryptocurrencies and blockchains, but also many social, legal, and economic problems as well. In general, gain some understanding of the wider ecosystem in which these technologies live."
    },
    "COMP0098": {
        "Title": "MSc Computational Statistics and Machine Learning Project (COMP0098)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Mr Dariush Hosseini",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:1. work individually developing a major project;2. plan and coordinate development activities;3. make realistic work commitments;4. present the work done effectively to a deadline.Content:There is no set syllabus: students identify their chosen project area and are allocated a supervisor who is a member of academic staff. The supervisor provides support and guidance.The project runs from immediately after the examination period (May/June); students are responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor.Some projects are done in conjunction with other departments of the College, others are done in conjunction with external organisations subject to approval by the department. In all cases at least one supervisor must be from within the department who will provide as a minimum project management advice.Project report:The main report documents the results of the project. The deadline for submission is normally the first week of September.Formatting details:-The dissertation text (defined as everything except title page, table of contents, references and appendices) should typically be between 30 and 100 pages in 12 point type and 1.5 or double spacing. The total dissertation length (main text together with appendices) should under no circumstances exceed 120 pages;-Students should place their code in an online repository and provide access details to it in their dissertation;-Writing the dissertation in LaTeX is optional, but strongly recommended.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0086": {
        "Title": "Probabilistic and Unsupervised Learning (COMP0086)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Maneesh Sahani",
        "Description": "Aims:This module provides students with an in-depth introduction to statistical modelling and unsupervised learning techniques. It presents probabilistic approaches to modelling and their relation to coding theory and Bayesian statistics. A variety of latent variable models will be covered including mixture models (used for clustering), dimensionality reduction methods, time series models such as hidden Markov models which are used in speech recognition and bioinformatics, independent components analysis, hierarchical models, and nonlinear models. The course will present the foundations of probabilistic graphical models (e.g. Bayesian networks and Markov networks) as an overarching framework for unsupervised modelling. We will cover Markov chain Monte Carlo sampling methods and variational approximations for inference. Time permitting, students will also learn about other topics in probabilistic (or Bayesian) machine learning.Learning outcomes:To be able to understand the theory of unsupervised learning systems; to have in-depth knowledge of the main models used in Unsupervised Learning; to understand the methods of exact and approximate inference in probabilistic models; to be able to recognise which models are appropriate for different real-world applications of machine learning methods.Content:-Basics of Bayesian learning and regression;-Latent variable models, including mixture models and factor models;-The Expectation-Maximisation (EM) algorithm;-Time series, including hidden Markov models and state-space models;-Spectral learning;-Graphical representations of probabilistic models;-Belief propagation, junction trees and message passing;-Model selection, hyperparameter optimisation and Gaussian-process regression.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) a good background in statistics, calculus, linear algebra, and computer science; and (ii) good competency in Matlab or Octave (or be taking a class on Matlab/Octave, or be willing to learn it on their own).Audit:Any student or researcher at UCL meeting the requisite conditions is welcome to attend the lectures. Students who wish to formally register on the module should consult with the Module Leader.Preparatory Material:Students wishing to take the module should thoroughly review the maths in the cribsheet provided before the start of the module."
    },
    "COMP0032": {
        "Title": "Computer Science Study Abroad (COMP0032)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "120",
        "Module Leader": "Dr Shi Zhou",
        "Description": "Aims:The educational aims of the programme follow exactly those of the existing MEng Computer Science, with the additional aims of extending the educational experience of students through: (a) Continuing advanced education in computer science, (b) Experience of education in a different cultural and/or linguistic setting, and (c) Access to high level teaching and research expertise from outside UCL.Learning outcomes:Students will have studied courses at an appropriate breadth and depth to enable them to progress to Year 4 of the MEng CS (International Programme) whilst at the same time having benefited from the experience of HE in a different linguistic and/or cultural setting.Content:Students studying abroad must follow a programme that MUST satisfy the following elements:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) passed BSc/ MEng Computer Science (Years 1 and 2) at UCL with a Credit Weighted Average Mark of 70.00%; (ii) linguistic competence (where appropriate); (iii) satisfactory completion of the UCL Study Abroad Office preparatory programme.Be of overall of equivalent depth to that of the UCL 3rd year MEng Computer Science programme;Be substantially composed of courses in computer science or closely allied disciplines such as electrical engineering and mathematics;Have a significant engineering orientation (as defined by UK-SPEC), be compliant with the QAA benchmark framework, and meet the requirements of our accrediting bodies (BCS and IET);Be of equal workload to that of the UCL 3rd year MEng that is, using accepted equivalence measures, be of 4 units;Be formally assessed by the host institution and the results of the assessment independently reported to the Study Abroad Tutor;Include taught courses/units, that is should not consist solely of project work."
    },
    "COMP0040": {
        "Title": "Financial Data and Statistics (COMP0040)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Tomaso Aste",
        "Description": "Aims:The module is aimed at introducing to financial data analytics. The module is primarily focused on the understanding of financial market dynamics of both individual assets and collective group of assets. Students will learn how to individuate regularities, patterns and laws from a statistical perspective. Instruments to analyse, characterize, validate, parameterize and model complex financial datasets will be introduced. Practical issues on data analysis and statistics of high frequency and low frequency financial data will be covered.Learning outcomes:On successful completion of the module, a student will be able to:1.analyse main statistical features of complex financial datasets;2.identify the probability distributions of financial returns;3.understand how to characterize, parameterize and validate these distributions;4.understand the quantify inter-dependency/causality structure between financial assets;5.understand how to use the outcome of data-analytics to develop better tools for forecasting, valuation and risk management;6.validate modelling and forecasting tools quantifying performances;Content:Empirical investigation of financial market-data:-Essential practical familiarization with financial data. Typical challenges with real financial data. Basics on data acquisition, manipulation, filtering, graphical representation and plotting; Statistical properties single financial asset:-Statistical distribution of returns. Moments of the distribution. Non-Normal distributions and fat-tails. Large fluctuations and tail risk. Stable distributions. Generalized extreme value distribution. Estimation methods to characterize the tails of the distributions. Calibration and validation. Applications to measures of risk; Scaling laws:-Random walks. Stochastic processes with non-defined variance. Fractal and multi-fractal nature of financial signals. Scaling laws. Persistence, anti-persistence and autocorrelation in financial signals. Hurst exponent, definition and characterization of multiscaling signals; Statistical properties of groups of financial assets:-Marginal probabilities, joint probability, and conditional probability. Measures of dependency: linear and non-linear correlations. Lagged correlations and causality. Information theoretic perspective: mutual information, transfer entropy. Spurious correlations. Correlation filtering through networks. Calibration, validation and application issues;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must (i) be familiar with fundamental probability and statistics concepts; (ii) be familiar with mathematical analysis."
    },
    "COMP0056": {
        "Title": "People and Security (COMP0056)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Simon Parkin",
        "Description": "Aims:Learning outcomes:On successful completion of the module, a student will be able to:Content:Understanding Human Behaviour in Security:Economics:Authentication:Access control:Identity:Privacy:Trust:Influencing user behaviour:Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally approved option or elective choice AND must have (i) knowledge of basic information security principles; and (ii) good essay-writing skills.Students not enrolled on MSc Information Security must attend an interview with the Module Leader.Students will be able to specify usability criteria that a security mechanism has to meet to be workable for end-user groups and work contexts;Know the strengths and weaknesses of particular security mechanisms in practice, and hence be able to choose and configure mechanisms for best performance in a given organisational context;Be able to specify accompanying measures (policies, training, monitoring and ensuring compliance) that a user organisation needs to implement to ensure long-term security in practice;apply their knowledge of human factors and behavioural economics to specify and implement workable and effective security solutions, and manage security behaviour;Systems thinking and design;Usability: Users, tasks and context;Performance and Workload;Productivity and performance vs risk and security;Humans and Risk;Risk Biases and Decision-making;Friction and the Compliance Budget;Authentication tasks:enrolment, verification, recovery;enrolment, verification, recovery;Knowledge-based authentication:Passwords,Passwords,phrases, PINs, graphical Authentication;Token-based authentication;Biometric authentication:physical and behavioural;physical and behavioural;Continuous authentication via devices, sensors, and biometrics;Payment systems and transaction authentication;Different access control models, organisational impact and user workload;Attacks and attackers (and how to counter them):Types of attacks (Guessing, observation, capture and coercion);Types of attackers: motivation, resources risk propensity;Social engineering attacks;Insider attacks;Online identity vs identity in the physical world;National identity vs socially constructed systems;Digital footprints, shadows and superidentities;Identity as currency;Data protection and user perception;Delivering privacy: Privacy by Design, the PST model;Surveillance, dataveillance and sousveillance online and in the physical world (CCTV);Model of trust in online interaction;Incentivising trustworthy behaviour;Reputation systems and their application in online systems;Security awareness, education and training;User interface design and influencing techniques;Values, attitudes, security culture and security behaviour;Responsibility and communication;"
    },
    "COMP0020": {
        "Title": "Functional Programming (COMP0020)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Chris Clack",
        "Description": "Aims:This course explores the functional programming paradigm and the implementation technology for functional programming languages. It aims to develop a broad understanding of the functional programming style and recursive programming techniques using the language Miranda, together with an understanding of implementation issues that are relevant not only to functional languages but also to other systems that require automatic dynamic memory management. The course explores the underlying mechanics of strict and lazy functional languages; it does not use Haskell or F# or OOCAML and does not aim to provide training in such languages, though an introduction to Miranda is provided and students are expected to improve their functional programming skills through independent study. In the second half of the course students are expected to use independent study to read extensively about implementation issues which are then discussed in the lectures.Learning outcomes:On successful completion of the module, a student will be able to do the following at a level suitable for a Year 3 undergraduate:Content:Context:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have EITHER (i) taken Years 1 and 2 of BSc or MEng Computer Science at UCL; OR (ii) taken all Term 1 modules of the MSc Computer Science programme at UCL (and should currently be taking Term 2 modules for the MSc Computer Science programme at UCL); OR (iii) undertaken the following prior study at university undergraduate (Majors) or postgraduate level:understand the basics of the lambda calculus and combinators and how they are used in the implementation of functional languages;understand the main features of a lazy functional language;understand type checking, type-inference and the operation of the Miranda (Hindley-Milner) type system;write and understand non-trivial functional programs in Miranda;understand the computation and memory management issues affecting the sequential implementation of lazy functional languages;solve problems relating to any aspect of the COMP0020 syllabus, under examination conditions.Classification of programming languages;Distinctive features of Functional Programming Languages;Distinctive features of Functional Programming Languages;The Lambda Calculus and Combinators:Versions of the Lambda CalculusSyntax and semantics;Reduction orders, strong normalisation;Combinators and computationally complete sets;Versions of the Lambda CalculusSyntax and semantics;Reduction orders, strong normalisation;Combinators and computationally complete sets;Introduction to Miranda:Programming environment;Types and simple polymorphic types;Recursion;Pattern-matching;Lists;Higher-Order functions;User-defined typesProgramming environment;Types and simple polymorphic types;Recursion;Pattern-matching;Lists;Higher-Order functions;User-defined typesType polymorphism and type systems:Recursive programming techniques:Introduction to implementation techniques:Strict evaluation and lazy evaluation;The need for automatic memory management;Strict evaluation and lazy evaluation;The need for automatic memory management;Automatic memory management:Memory allocation and garbage collection;Garbage collection techniques.Memory allocation and garbage collection;Garbage collection techniques.programming in one high-level programing language and one assembly language;formal systems of logic such as Boolean algebra, propositional logic or predicate calculus;virtual machines, virtual memory and memory paging;compilers, including lexical analysis, parsing and code generation;dynamic data structures and abstract data types;models of storage in computer systems;algorithmic complexity."
    },
    "COMP0027": {
        "Title": "Computer Graphics (COMP0027)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Tobias Ritschel",
        "Description": "Aims:To introduce the fundamental concepts of 3D computer graphics and give the students all the knowledge needed for creating an image of a virtual world from first principles.Learning outcomes:On successful completion of the module, a student will be able to:Content:Introduction:Creating an image using ray tracing:Specifying a general camera:Constructing a scene:Acceleration Techniques:From ray tracing to projecting polygons:Shadows:The nature of light:Parametric surfaces:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have EITHER (i) passed BSc/ MEng Computer Science (Years 1 and 2) at UCL; OR (ii) passed MEng Mathematical Computation (Years 1 and 2) at UCL.define a virtual world and create images of it;write a basic ray tracer, and use a graphics library such as OpenGL (or equivalent);The painters method;Ray casting using a simple camera;Local illumination;Global illumination with recursive ray tracing;World / image coordinates;Creation of an arbitrary camera;Ray tracing with an arbitrary camera;Scene hierarchy;Transformations of objects / rays;Other modelling techniques;Bounding volumes;Space subdivision;Graphics pipeline;Transforming the polygons to image space;Sutherland Hodgman clipping;Scan conversion;Z-buffer;Interpolated shading;Texture mapping;Back face culling;Shadow volumes;Shadow buffer;Shadow mapping;Soft shadows;Transport theory, Radiance, luminance, radiosity;The radiance equation;Photon mapping;Monte Carlo integration;Bezier Curves;B-Splines Curves;"
    },
    "COMP0010": {
        "Title": "Software Engineering (COMP0010)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Sergey Mechtaev",
        "Description": "Aims:This module focusses on designing and building software systems, which these days are often large, complex and long-lived. They are worked on by teams of engineers and changed constantly over their lifetimes. We will look at principles and patterns of software design, where to apply them, and how they may inform our design choices. We will also look at techniques for ensuring that systems you build behave correctly. We show how the application of these makes it possible to evolve systems effectively in a rigorous way.Learning outcomes:On successful completion of the module, a student will be able to:1. appreciate the wider engineering context that forms the background to developing complex, evolving software-intensive systems;2. apply a range of design patterns and principles to solve particular design problems;3. apply a range of refactoring techniques to improve code quality;4. use a range of tools and techniques for automated software testing, including test-driven development;5. manage risk in making changes to an existing software system through rigorous engineering practices;6. reflect on the appropriateness of different software engineering techniques in different circumstances, and on the quality of the design of an application.Content:-OO Design Principles;-Design Patterns;-Software Architecture;-Testing;-Tools and ProcessesRequisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have taken a Java programming course."
    },
    "COMP0064": {
        "Title": "MSc Information Security Dissertation (COMP0064)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr David Clark",
        "Description": "Aims:Students will obtain experience of undertaking and completing a piece of research, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:Content:Students work individually or in groups on a research topic together with a supervisor. Frequently, the supervisor is one of UCL's lecturers on the MSc in Information Security programme, but students can also work with other academic staff at UCL or with an external supervisor from industry. The workload of the thesis corresponds to four modules.The project runs from immediately after the examination period (May) with the students responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor. The main report documents the results of the project.The deadline for submission is normally the last week of August. The dissertation text (defined as everything except title page, table of contents, references and appendices) should not exceed 50 pages in 12 point type and 1.5 or double spacing for an individual report.The total dissertation length (main text together with appendices) should under no circumstances exceed 100 pages for an individual report. For group projects, each extra group member increases the allowance by 30 pages in the main body, and 30 pages in the appendices.Examples of recent project titles:Requisites:To be eligible to select this module, a student must be registered on a programme for which it is formally available.Work individually developing a major project;Plan and coordinate development activities;Make realistic work commitments;Present the research done effectively to a deadline;Algebraic Attack On Smart Cards;Algebraic Cryptanalysis Of Ciphers;Anti-Phishing: Secure, Usable and Low Cost Authentication For Secure and Convenient Online Banking Security and Payment Systems;Comparing Authentication Methods;Computer Security By Strip Searching;Cryptanalysis Of Keeloq;Defence Against Profile Injection Attacks;Fuzzy Private Matching and Privacy Preserving;Implementing Default Capabilities To Fight Computer Malware;Integration Of Biometrics In Identity Management;Maliciously Created Routing Loops In Mobility Protocols;Mobile Phone Security;Model Checking Security Protocols;Modelling The Information Content Of Rumour Propagation;Perfectly Secure Communication Over General Adversary Structures In Arbitrary Networks With Feedback Channels;Privacy: Dataveillance As Differential Pricing and Social Sorting;Private Information Retrieval;Topological Characterisation of Email Communications;Trusted Computing;Verification of TESLA (or Variant Dining Cryptographers) Protocol Using MCMAS."
    },
    "COMP0043": {
        "Title": "Numerical Methods for Finance (COMP0043)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Guido Germano",
        "Description": "Aims:An introduction to numerical/computational methods with code examples (Matlab, C++, Python) and an emphasis on applications in finance (derivatives pricing, model calibration, etc.).Learning outcomes:Programming proficiency and demonstrable skills in turning mathematical equations and models into working code; capacity to solve practical problems in financial mathematics applying modern numerical techniques.Content:1. Introduction:Bibliography, programming languages, programming basics: data types, operators, expressions, control structures (iteration i.e. for-loop, conditional execution i.e. if-then-else, etc.), vector/array operations, input/output, plots, etc. Floating-point representation of real numbers, numerical errors.2. Fundamental probability distributions:Normal, exponential, log-normal, chi square, etc; plot of the probability distribution function, sampling with pseudo-random numbers, histograms, transformation from uniform to other distributions using the quantile function, i.e. the inverse cumulative distribution function.3. Random numbers:Linear congruential generators, requirements and statistical tests, pathologic cases, more advanced generators; inversion and transformation in one and more dimensions, acceptance-rejection method, Box-Muller method for normal deviates, polar method by Marsaglia, Ziggurat algorithm by Marsaglia and Tsang, correlated normal random variates, quasi-random numbers.4. Monte Carlo methods:Introduction, risk-neutral valuation of options, Euler-Maruyama method for the numerical solution of a stochastic differential equation (SDE), approximation error, strong and weak solution, Milstein method.5. Important stochastic differential equations:Arithmetic and geometric Brownian motion, Ornstein-Uhlenbeck process and Vasicek model, Feller square-root process and Cox-Ingersoll-Ross model, constant elasticity of variance processes, Brownian bridge, Heston stochastic volatility model.6. Stochastic processes with jumps:Poisson process, normal compound Poisson process, Gamma process, jump-diffusion processes (Merton, Kou), time-changed Brownian motion (variance Gamma process), Lévy processes.7. Black-Scholes option pricing:A simple program that prices European calls and puts with the analytical solution, the analytical solution provided by Matlab's Financial Toolbox, the fast Fourier transform, and Monte Carlo.8. Model calibration:Implied volatility, Newton-Raphson method, Jäckel's equivalent form, Jäckel's modification, complex initial guess and fractals.9. Fourier transform methods:efinitions of the Fourier transform, inverse transform, notable transform pairs (normals, double exponential/Lorentzian, Dirac delta/1), discrete and fast Fourier transform, Laplace transform, transform of the derivative, solution of the standard diffusion equation by Fourier transform and in Fourier-Laplace space, fractional derivatives, space-time fractional diffusion equation and its solution in Fourier-Laplace space, characteristic function, moment-generating function, cumulant-generating function, Lévy processes, correlation/convolution theorem, auto/cross-covariance and correlation, Parseval/Plancherel theorem, shift theorem, use in option pricing.10. Exotic options:Fourier methods for the numerical pricing of discretely and continuously monitored path-dependent options like barrier and lookback.11. Partial differential equations:Classification, second-order PDEs, notable examples of elliptic, parabolic and hyperbolic PDEs, diffusion equation, Black-Scholes equation, Feynman-Kac theorem and relationship with SDEs, finite difference schemes.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have taken COMP0041 and \"Introduction to Mathematics and Programming for Finance\"."
    },
    "COMP0022": {
        "Title": "Database and Information Management Systems (COMP0022)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Yuzuko Nakamura",
        "Description": "Aims:Students will learn fundamental theories and methods of database systems: what they are, how they are developed and how they function to achieve their purposes. The module will exemplify these constructs with contemporary database technologies and students will learn how these technologies are exploited to build effective information systems of different scale.Learning outcomes:On successful completion of the module, a student will be able to:1. understand the theories and methods of database systems;2. have competence with applying the theories and methods of database systems in creating effective information systems;3. understand current and emerging database technologies and the application settings in which they are used.Content:For FHEQ Level 6:-The Database Management System-Transaction management and failure management-Query processing and optimization-Distributed databases-Data warehousing-Data mining and online analytic processing-Semi-structured data databases-Emerging database models and technologies-Database implementation and optimisationFor FHEQ Level 7:-Relational databases and SQL-Database design and normalisation-Database implementation and optimisation-Distributed databases-Non-relational databasesRequisites:For FHEQ Level 6:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND have passed BSc/ MEng Computer Science (Years 1 and 2) at UCL.For FHEQ Level 7:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice."
    },
    "COMP0024": {
        "Title": "Artificial Intelligence and Neural Computing (COMP0024)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Denise Gorse",
        "Description": "Aims:This module introduces artificial intelligence and neural computing as both technical subjects and as fields of intellectual activity. The overall aims are:1. to introduce basic concepts of artificial intelligence for reasoning and learning behaviour;2. to introduce neural computing as an alternative knowledge acquisition/representation paradigm, to explain its basic principles and to describe a range of neural computing techniques and their application areas.Learning outcomes:On successful completion of the module, a student will be able to:1. identify problems that can be expressed in terms of search problems or logic problems, and translate them into the appropriate form, and know how they could be addressed using an algorithmic approach;2. identify problems that can be expressed in terms of neural networks, and to select an appropriate learning methodology for the problem area.Content:Artificial intelligence:-Nature of artificial intelligence;-Searching state spaces;-Utility theory;-Logic for artificial intelligence;-Reasoning about concepts;-Reasoning about uncertainty;-Machine learning.Neural Computing:-Overview of network architectures and learning paradigms;-Binary decision neurons;-Single-layer perceptrons and their limitations;-Multilayer perceptrons;-The Hopfield model;-Reinforcement learning;-The Kohonen self-organising feature map.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) passed BSc/ MEng Computer Science (Years 1 and 2) at UCL; OR (ii) a strong background in university-level maths (in particular, in logic)."
    },
    "COMP0121": {
        "Title": "Computational MRI (COMP0121)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Gary Zhang",
        "Description": "Aims:The module aims to give the students an in-depth introduction to Magnetic Resonance Imaging (MRI) from the computational perspective.Learning outcomes:On successful completion of the module, a student will be able to:1. Understand, in-depth, MRI through learning and implementing, in silico, all the key components of modern MRI systems;2. Gain significant experience in software development for general scientific computing and visualisationContent:- Introduction to magnetic resonance imaging- Classical description of a magnetic field acting on a single nucleus (equation of motion; rotating frame of reference; concept of magnetic resonance)- Macroscopic magnetization (concept of relaxation; the Bloch equation)- Introduction to signal detection and acquisition (free induction decay; spin echoes; inversion recovery; spectroscopy)- Fourier imaging: the MR physics perspective (k-space; gradient echoes; slice excitation)- Fourier imaging: the signal processing perspective (fundamentals of continuous and discrete Fourier transforms; sampling theory; image reconstruction)- Noise modelling and contrast mechanismsRequisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have suitable experience with Matlab."
    },
    "COMP0132": {
        "Title": "MSc Robotics and Computation Dissertation (COMP0132)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Professor Danail Stoyanov",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation and demonstration.Learning outcomes:On successful completion of the module, a student will be able to:1.work individually developing a major project;2.plan and coordinate development activities;3.make realistic work commitments;4.present the work done effectively to a deadline;Content:Overview:-There is no set syllabus: students identify their chosen project area and are allocated a supervisor who is a member of academic staff. The supervisor provides support and guidance. The project runs from immediately after the examination period (May/June); students are responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor;-Some projects are done in conjunction with other departments of the College, others are done in conjunction with external organisations. In all cases at least on supervisor must be from within the department;Project report:-The main report documents the results of the project. The deadline for submission is normally the first week of September;Formatting details:-The dissertation text (defined as everything except title page, table of contents, references and appendices) should typically be between 30 and 100 pages in 12 point type and 1.5 or double spacing. The total dissertation length (main text together with appendices) should under no circumstances exceed 120 pages;-Students should place their code in an online repository and provide access details to it in their dissertation;-Writing the dissertation is LaTeX is optional, but strongly recommended;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0113": {
        "Title": "Virtual Environments (COMP0113)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Anthony Steed",
        "Description": "Aims:The purpose of this module is to introduce students to the main concepts and practical issues in constructing and understanding Virtual Environments, and how people respond to a VE experience. Given the background of the module teachers, the focus on the technical side will be more on the visual aspects of VEs. A central theme of the module will also be that the understanding of VEs can be best understood through the concepts of presence and shared presence.Learning outcomes:On successful completion of the module, a student will be able to:1. understand the core issues in VEs and have constructed a VE using an immersive system.Content:Introduction:-Virtual Environment;-Technology Requirements;-Applications;Interaction:-3D Interaction tasks;-Tracking;-Input devices;-System affordances;-3D Widgets; Presence:-Immersion and presence;-Meaning and utility of presence;-Measuring presence;Displays:-3D and Stereo Viewing;-HMDs, CAVEs and desks;-Graphics Architectures;Programming Virtual Environments:-Programming models;-Simulation and animation;-Programming for distribution ves;Devices:-Haptic devices;-Sound simulation;-Augmented reality;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0073": {
        "Title": "MSc Computer Science Project (COMP0073)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Graham Roberts",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial piece of individual project work, applying knowledge learned from Terms 1 and 2 of the programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard via a written report.Learning outcomes:On successful completion of the module, a student will be able to:1. work individually to undertake a major project;2. plan and coordinate the project activities to meet the deadlines;3. make realistic work commitments;4. write a substantial report to document the project results;5. demonstrate good problem solving and evaluation skills.Content:Overview:-There is no set syllabus. During term 2 students identify their chosen project topic and find a member of the academic staff who will act as the project supervisor. The project formally starts in early June after the exams have finished, and runs for roughly three months. The submission deadline is in early September at the end of the programme;-A number of Industry Exchange Network (IXN) projects with a range of external partners are made available for those students who want to work in collaboration with companies, the health sector, or other organisations. Alternatively a project can be internal to the department, potentially research-oriented, and defined in collaboration with the project supervisor;-Projects are a full-time activity with no other teaching taking place. A typical project will comprise approximately three weeks of background reading, analysis and design, followed by six weeks of implementation or equivalent work, and finally three weeks to write the project report. Students who have any Late Summer Assessments (LSAs) should consult with their supervisor and the programme director to discuss how to coordinate the project work with preparation for the late assessment;-Students are responsible for organising and carrying out their project, and are expected to attend weekly tutorials with their supervisor, also meeting regularly with their external collaborator if applicable. Tutorials allow the supervisor to monitor the progress of the project, providing advice and feedback as necessary;-The project has a 60 credit value, and represents one third of the total value of the MSc.Project Goals:-A MSc Computer Science project is expected to have a reasonable level of challenge and depth, and may include research-oriented goals as well as the practical application of Computer Science ideas and concepts. Most projects involve the design, implementation and testing of software, but more theoretical or mathematical projects are also possible.Project Report:-The final report documents the results of the project, and is expected to be a substantial and properly structured academic document. The project guidelines available on Moodle give detailed information about the required content. Obtaining a higher module mark depends on submitting a good quality report, as well as successfully undertaking the project work.- As every student undertakes a distinct project there is no indicative reading list available. The student is expected to locate relevant information sources themselves with advice from their supervisor.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0002": {
        "Title": "Principles of Programming (COMP0002)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Graham Roberts",
        "Description": "Aims:This module provides an introduction to computer programming using two different programming styles, imperative and functional programming. Its primary aim is to develop core design, programming, and problem-solving skills, with a secondary aim of building confidence in the ability to take on and learn new programming languages within a short space of time. In order to achieve these aims the module has a substantial practical element in the form of compulsory lab classes where students work through sets of programming exercises to apply the programming concepts introduced during the module lectures.Learning outcomes:On successful completion of the module, a student will be able to:Content:Core Programming Concepts:Introduction to Imperative Programming:Introduction to Functional Programming:Program design in the small:Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice.Design, implement, debug and test small programs using two different programming paradigms, given straightforward specifications;Develop straightforward algorithms to solve a range of common programming problems;Compare and contrast the different paradigms, understanding the relative advantages and disadvantages of each;Use common programming tools such as compilers, editors and debuggers;Gain a basic understanding of how programs use computer memory and of memory management, and the binary representation of data values.What is programming?Programming languagesPrograms and algorithmsCompilers and toolsRunning and debugging programsCore imperative programming ideas: sequence, selection, iteration, recursion, assignment and variablesTypes and type checkingFunctions, parameters, scope and lifetimeArrays and filesPointers, memory allocation, and memory managementCore functional programming ideasRecursion and recursive data structures such as listsLazy evaluationRole of typesHigher order functionsList comprehensionRecursive functionsDesigning and implementing small programsImplementing and using basic algorithms and data structuresGood programming and design practice"
    },
    "COMP0141": {
        "Title": "Security (COMP0141)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Sarah Meiklejohn",
        "Description": "Aims:Learning outcomes:On successful completion of the module, a student will be able to:1. understand how to formulate a threat model including the assets to be protected, the capabilities of the adversary, and reason about whether the probability the adversary may succeed;2. know core cryptographic methods to protect communication such as message authentication codes, digital signatures, encryption, and key exchange. Understand the security guarantees cryptographic tools provide and conversely how inappropriate use lead to vulnerabilities;3. understand key principles and concepts related to computer and systems security. Understand the complexities of building flexile and correct access control and authentication systems, from a technical and HCI perspective. Recognize and exploit common security vulnerabilities on hosts and networks;4. know that security involves people, processes and technology. Understand how security needs to fit with business goals and organisational processes to work effectively- rather than disrupt, create friction, and drain resources. Know the basics of how to influence and manage security behaviours of a range of organisational stakeholders- employees, managers, developers, security specialists;Content:The module gives students a foundation in computer security, cryptography and human aspects of security. Students will study attacks against system and analyse systems from an attacker’s perspective. The module will also cover core defensive techniques and develop threat models that can be used to analyse the security of a system. The module studies specific cryptographic systems for 3 weeks, core computer security for 4 weeks, and spends 3 weeks studying security for real-world environments: how to design and manage security in organisations to effectively protect them.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available.The module aims at giving students a foundation in computer security, cryptography and human aspects of security.After taking the module students should be able to identify risks and security sensitive aspects of systems, where a system can range from a small and simple solution for a specific task to a full organisation including IT infrastructure and users. They will be taught this from the experience of how systems have failed in the past and by analysing systems from an adversarial viewpoint;Students should also know core defensive techniques to prevent or mitigate attacks. They should be able to formulate a threat model for a system and reason about whether it is secure or insecure;Students should be able to deliver effective security for real-world environments: how to design and manage security in organisations to effectively protect them;"
    },
    "COMP0049": {
        "Title": "Market Microstructure (COMP0049)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Paolo Barucca",
        "Description": "Aims:The course is aimed at introducing the student to the functioning of financial markets based on Limit Order Books from a microstructure point of view, and to the resulting non-trivial empirical regularities. The course presents both the main empirical facts in modern financial markets and some of the theoretical methods used to model them. We will discuss the functioning of limit order driven markets, the price impact of orders, the distribution of returns, the liquidity patterns, and the bid-ask spreads, as well as the relationship between these and other related concepts. Further, we will discuss zero-intelligence models to describe the high-frequency fluctuations in financial markets and models addressing the observed long memory of the trade sign process.Learning outcomes:On successful completion of the module, a student will be able to:Content:This module provides the student with a structured overview of both the main empirical facts and major theoretical approaches in market microstructure. It will comprise of five main parts:Introduction to limit order markets:Empirical investigation of financial data:Price impact:The limit order book as a queuing system:The relationship between impact, the bid-ask spread, the tick size, and liquidity:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) a UK-equivalent Upper Second Class Honours Degree (or higher) in the fields of computer science, mathematics, statistics, physics, engineering or another similar quantitative subject; (ii) a strong background with high performance in mathematics, probability, statistics and econometrics; (iii) English Language at the UCL Good level.Understand the mechanisms that underpin the functioning of markets with Limit Order Book;Recognize and characterize the main empirical facts emerging in modern financial markets;Understand and characterize the price impact of orders and of their execution;Characterize the relationship between price impact, bid-ask spread, tick size, and liquidity;The course explains the functioning and historical context of limit order-driven markets and introduces the main concepts as well as regulatory issues;The course covers the main robust empirical facts found in order driven financial markets, such as the distribution of returns, correlations between price changes and the volatility, the intraday pattern of liquidity and the bid-ask spread, and the long memory of the trade sign process. Simple models for the correlated sign process are discussed;This part focuses on the impact of order book events (market order submissions, limit order submissions, and cancellations) on the market price. Different price impact measures are introduced. The theoretical framework for trade sign correlations, impact and price efficiency is discussed. The impact of a trading strategy (meta-order) is introduced and different theories of meta-order impact are presented;This part introduces zero-intelligence models to describe the high-frequency fluctuations in financial markets. The so-called Santa Fe model, the Cont and Larrard model and more complex approaches are discussed;This part introduces regulatory issues related to limit order books. The most advanced theories which explain the relationship between the spread and impact on small-tick stocks, as well as the liquidity and impact on large-tick stocks, are presented. The course closes with a discussion on the optimal market design;"
    },
    "COMP0004": {
        "Title": "Object-Oriented Programming (COMP0004)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Graham Roberts",
        "Description": "Aims:This module provides a thorough introduction to object-oriented (OO) programming. The key object-oriented concepts such as class design, inheritance, dynamic binding and interfaces, are introduced, along with design strategies for smaller sized object-oriented programs. Material is also included on data representation and data processing, the implementation of common data structures such as lists, trees and hash tables, basic cloud-based applications, and on development tools and practices. To learn how to apply object-oriented design concepts, and practice programming skills, the module has a substantial practical element, with weekly lab classes, sets of exercise questions, and an individual programming project.Learning outcomes:On successful completion of the module, a student will be able to:Content:Topics covered in lectures or via online material:Object-Oriented Principles:Object-Oriented Programming:Data Representation:Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must have taken Principles of Programming (COMP0002) in Term 1.Design and implement smaller-scale object-oriented programs;Have a good knowledge of key object-oriented principles and design strategies;Read, write, and process data sets using object-oriented techniques;Understand how core data structures are implemented using classes;Designing and running basic OO applications in a cloud environment;Use programming tools such as an integrated development environment (IDE), debugger, and version control;Taking an object-oriented approach to software development;Classes and the use of abstractions;Key design principles and development practices;Designing and implementing classes;Identifying and implementing class relationships;Using abstract classes, interfaces and inheritance;Developing smaller-scale programs taking an object-oriented approach;Effective object-oriented design and programming practices;Documenting designs using class diagrams;The design of basic cloud-based applications;Implementing common data structures;Storing data in files;Processing data using streams;"
    },
    "COMP0009": {
        "Title": "Logic and Database Theory (COMP0009)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Robin Hirsch",
        "Description": "Aims:The module aims to introduce and familiarise students with logical and mathematical inference and with database theory, the latter having an emphasis on the fundamentals of relational database systems and SQL. Students learn a number of logical inference methods for classical logics.Learning outcomes:On successful completion of the module, a student will be able to:1. understand how axiomatic systems can be used for propositional and predicate logic;2. understand the notions of soundness and completeness;3. understand how propositional and predicate tableaus work;4. have familiarity with other logics, including modal and temporal logics;5. be able to analyse relational databases.Content:Propositional logic, Predicate logic, Modal Logic and Temporal Logic:-Review of syntax and semantics.-Deduction and Inference.-Truth tables.-Decidability of propositional logic.Mathematical proofs:-Proof by contradiction.-Induction and structured induction.-Hilbert systems.-Axioms and inference rules for propositional logic.-Axioms and inference rules for predicate logic.-Axioms and inference rules for modal and temporal logics.-Tableau construction for propositional logic, predicate logic, modal logics.-Soundness and completeness theorems for first order logic.-Semi-decidability of first order logic. Finite computation methods: Databases:-Database management systems (DBMS) and the relational database; essential concepts; data model; and architecture and primary functions of the DBMS.-SQL; use of SQL as a language for database construction and data manipulation.-Database design; a structured method for designing relational databases through data modelling, schema specification, validation, and normalisation.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have:-taken in Term 1 Theory of Computation (COMP0003) and Algorithms (COMP0005);-some programming experience (as the assessment will require them to implement a program in C)."
    },
    "COMP0036": {
        "Title": "Machine Learning and Neural Computing (COMP0036)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Dariush Hosseini",
        "Description": "Aims:This module will introduce students to the fundamental concepts of machine learning. Machine learning is an exciting and growing field, the impact of which is manifest not only in academia but also in a wide range of industries.Learning outcomes:On successful completion of the module, a student will:1. be able to display a knowledge and an understanding of some elements of the theoretical foundations of machine learning;2. have gained experience in building basic machine learning systems whilst understanding the limitations of such systems.Contents:Introduction to machine learning:Supervised Learning:Unsupervised Learning:Industrial Applications:Time-permitting, guest lecturers who are practitioners of machine learning in industry will discuss their experience of applying such techniques.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) some experience of rudimentary programming; (ii) an awareness of standard results in fundamentals of linear algebra (vectors, matrices, eigenvectors /eigenvalues etc.), elements of probability theory (random variables, expectation, variance, conditional probabilities, Bayes rule etc.), elements of statistics (sample statistics, maximum likelihood estimation etc.), and calculus (real-valued functions, derivatives, Taylor series, integrals etc.); results from these areas will be used, without proof, throughout the module.The landscape of machine learning will be introduced by application, task, and paradigm;Two of the primary tasks of supervised learning, Classification and Regression, will be addressed, as well as associated issues of over-fitting, and the use of regularisation and validation techniques to ameliorate this;In particular some of the following techniques will be examined; linear and polynomial regression, logistic regression, Naive Bayes, kernel methods, SVMs, decision trees, ensemble learning, neural networks, Gaussian processes;Two of the primary tasks of unsupervised learning, Dimensionality Reduction and Clustering, will be addressed;In particular some of the following techniques will be examined: PCA, manifold learning, k-means, Gaussian mixture models, EM algorithm;"
    },
    "COMP0137": {
        "Title": "Machine Vision (COMP0137)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Gabriel Brostow",
        "Description": "Aims:The module addresses algorithms for automated computer vision. It focuses on building mathematical models of images and objects and using these to perform inference. Students will learn how to use these models to automatically find, segment and track objects in scenes, perform object recognition and build three-dimensional models from images.Learning outcomes:On successful completion of the module, a student will be able to:1.understand and apply a series of probabilistic models of images and objects in machine vision systems;2.understand the principles behind object recognition, segmentation, super-resolution, scene analysis, tracking, and 3D model building;Content:Two-dimensional visual geometry:-2-D transformation family. The homography. Estimating 2-D transformations. Image panoramas;Three dimensional image geometry:-The projective camera. Camera calibration. Recovering pose to a plane;More than one camera:-The fundamental and essential matrices. Sparse stereo methods. Rectification. Building 3D models. Shape from silhouettes;Vision at a single pixel:-Background subtraction and colour segmentations problems. Parametric, non-parametric and semi-parametric techniques. Fitting models with hidden variables.Connecting pixels:-Dynamic programming for stereo vision. Markov random fields. MCMC methods. Graph cuts;Texture:-Texture synthesis, super-resolution and denoising, image inpainting. The epitome of an image;Dense Object Recognition:-Modelling covariances of pixel regions. Factor analysis and principle components analysis;Sparse Object Recognition/Regression:-Convolutional Neural Networks, Auto-encoders, Adversarial training, Equivariance;Shape Analysis:-Point distribution models, active shape models, active appearance models;Tracking:-The Kalman filter, the Condensation algorithm;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) a UK-equivalent Honours Degree (or higher) in the field of Computer Science, Mathematics, or physical sciences and engineering; and (ii) some familiarity with digital imaging and digital image processing."
    },
    "COMP0063": {
        "Title": "Philosophy, Politics and Economics of Security and Privacy (COMP0063)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Tristan Caulfield",
        "Description": "Aims:Upon completion of the course the students are expected to be:Learning outcomes:On successful completion of the module, a student will be able to:Content:The module covers in depth major issues in computer, information, and general security related to the following perspectives:Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally approved option or elective choice AND must also select COMP0054.aware of the conceptual foundations of security policy and technology and their role in delivering robust, reliable systems;specialists in understanding the political context within which security policy and its implementation is situated;specialists in understanding the design and implementation of security policy from the perspective of economics, including ideas and tools from areas such as utility theory, game theory, and portfolio theory.Understand concepts and philosophy of security and privacy, including:declarative and operational concepts;the relationships between security and privacy;the relationships between people, policy, and systems;declarative and operational concepts;the relationships between security and privacy;the relationships between people, policy, and systems;Understand politics of security and privacy, including:the perspectives of individuals, companies, and governments;international relations, strategy, cyber-conflict;understanding tensions in policy and legislation;the perspectives of individuals, companies, and governments;international relations, strategy, cyber-conflict;understanding tensions in policy and legislation;Understand economics of security and privacy, including:utility, incentives, public goods, externalities and internalities, and trade-offs;games in security and privacy;using models to understand policy, technology, and decision-making;utility, incentives, public goods, externalities and internalities, and trade-offs;games in security and privacy;using models to understand policy, technology, and decision-making;Develop conceptual analyses of systems and policies in socio-economic contexts;Assess the consequences and value of models of security and privacy;Organize and communicate complex ideas and arguments in precise, accessible written form;Conceptual and philosophical foundations of security policy and its implementation in systems’ contexts;The political context within which security policies and their implementations are situated, including national and international security issues and the relationships between individuals, companies, and governments;The design and implementation of security policy from the perspective of economics, including ideas and tools from areas such as utility theory, game theory, and portfolio theory;"
    },
    "COMP0090": {
        "Title": "Introduction to Deep Learning (COMP0090)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Pontus Saito Stenetorp",
        "Description": "Aims:To have a full understanding of the learning outcomes.Learning outcomes:On successful completion of the module, a student will be able to:1. understand the fundamental principles, theory and approaches for learning with deep neural networks;2. understand the main variants of deep learning (such as feedforward and recurrent architectures), and their typical applications;3. understand the key concepts, issues and practices when training and modelling with deep architectures;4. understand automatic differentiation theory and multivariate optimisation;5. understand how deep learning fits within the context of other ML approaches and what learning tasks it is considered to be suited and not well suited to perform.Content:-This module will aim to teach students the fundamentals of modern neural networks. It will cover the most common forms of model architectures and primarily the algorithms used to train them. The theory and principles will be presented alongside example applications. The aim is to focus on the core algorithms, ideas and mathematics, rather than any specific implementation framework.-Students will be taught the basics of neural networks, feedforward networks, recurrent networks; and introduced to concepts such as: regularisation, optimisation and hyper-parameter optimization.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must be (i) familiar with undergraduate mathematics, in particular multivariate calculus, linear algebra and probability (including the multivariate normal distribution and other standard distributions); (ii) familiar with Machine Learning concepts and practice; and (iii) proficient in programming (examples and assignments may be given in a high level language such as Julia or Python).Please note that this module is not suitable as an introduction to Machine Learning. It is suitable only for students who wish to gain an understanding of the mathematics of Deep Learning."
    },
    "COMP0154": {
        "Title": "Future Global Technologies for Disability and Development (COMP0154)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "30",
        "Module Leader": "Dr Tim Adlam",
        "Description": "Taught at UCL Here East, this 30 credit module is designed to provide students with an overview of disability, technology and innovation as a foundation for the remainder of the course. By attending lectures, participating in workshops and seminars, and conducting their own projects; students will learn about what disability is and is not; active citizenship; the roles of technology in the context of global disability; what key technologies can and can’t do; and how they work. This module is coordinated with the ‘Making and Research Methods’ module, where students will gain practical experience and skills in using materials and building devices.Expert external speakers have been invited to contribute to this module, bringing different perspectives and specialist knowledge that will provoke students to further thought. There will be opportunities for discussion of ideas and perspectives within the class.The module is in two parts either side of the mid-term reading week. Part 1 contains the principal taught content and introduces students to disability and global technologies, such as robotics, AI, mobility and sensors. In Part 2 students will be taught about end-to-end innovation from conception through to sustainable implementation, using two real-world case studies. They will also work on the case studies, developing end-to-end solutions, presenting them to their peers and developing a written proposal.In parallel with Parts 1 and 2, students will work on a group mini-project based in the East London community around Here East. This project will provide them with an opportunity to develop their skills and expertise in disability innovation ‘in the wild’; and apply what they are learning in the ‘Design Thinking’ and ‘Making & Research Methods’ modules.This module will be assessed through a combination of written project submission (major assessment) and presentation (minor assessment). "
    },
    "COMP0077": {
        "Title": "MSc Computational Finance Project (COMP0077)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Guido Germano",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial piece of individual work, applying knowledge learned from terms 1 and 2 of the programme plus the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard.Learning outcomesOn successful completion of the module, a student will be able to:1. Work individually undertaking a major project2. Plan and coordinate project activities to meet deadlines3. Make realistic work commitments4. Write a substantial report to document the project resultsContent:After a project has been agreed, each student is allocated an academic supervisor, plus an industrial supervisor if the project is within a placement. The supervisors provide support and guidance. The project starts immediately after the main examination period, i.e. in early June. The students are responsible for organising themselves and their work, with advice from their supervisors. Students are expected to meet with their supervisors on a regular basis. A typical project will comprise approximately 4 weeks of background reading, analysis and design, followed by 8 weeks of implementation and finally 2 weeks to complete the writing of an in-depth dissertation of about 50,000 words or 50 pages which documents the results of the project. The deadline for submission is usually within the first two weeks of September.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0066": {
        "Title": "Introductory Programming (COMP0066)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ghita Kouadri Mostefaoui",
        "Description": "Aims:This module introduces functional and object-oriented programming using Python. The module uses Python to give a grounding in programming such as loops, if/else statements, lists and files. It will also cover key object-oriented concepts such as classes, objects and inheritance. Material focuses on practicing object oriented programming to be better prepared for future modules, including Algorithmics (COMP0070) and Software Engineering (COMP0071). This is an intensely practical module and full student engagement outside of lectures and in lab classes is critical to successful completion of the module.Learning outcomes:On successful completion of the module, a student will be able to:1.understand why Python is a useful programming language for developers;2.design and program Python applications using a large sub-set of the language effectively;3.design object-oriented programs with Python classes;4.be able to use programming tools such as an integrated development environment (IDE) and debugger;5.use of Python libraries;Content:-Why Python?;-Types, variables, branching, loops;-Strings, lists, files;-Exception handling;-Object-oriented programming;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice. The module is fast-paced and continuous engagement with the module activities is required. Although, the module is intended for beginners, any previous programming experience in any other language, would be very useful."
    },
    "COMP0135": {
        "Title": "Professional Practice (COMP0135)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Nicolas Gold",
        "Description": "Aims:This module aims to advance students' education in the professional skills and awareness (e.g. project management, professional ethics, teamwork, contemporary software practice) that they will need to undertake successful careers in software engineering.Learning outcomes:On successful completion of the module, a student will be able to:1.assess the effectiveness of solutions presented and to question them in an intelligent way;2.synthesise solutions to, and discuss, general open-ended and contemporary professional issues and problems;3.adopt reasoned ethical standpoints;4.apply appropriate project management techniques;5.appraise the utility of individual project management techniques within a given environment and originate new techniques within a sound framework;6.outline the difference between use of project management techniques in small-scale activities such as the group project and those in industrial scale activities;Content:-Professional ethics-Regulation and law-Contemporary practice-Importance of inclusion and diversity-What are projects and how do we measure their success?;-The role of the project manager and team in influencing the outcome of a project;-Communicating with stakeholders and ensuring buy-in. The business case and writing effective goals;-Project planning, monitoring and control. Structure of project reports;-Agile project management;-Trade-offs, optimisation and architecture decisions;-Risk and opportunity management;-Creating, motivating and leading project teams;-Quantitative criteria including financial appraisal;-Retrospectives, process improvement and project reviews;Note that not all topics are covered to the same depth.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0051": {
        "Title": "Algorithmic Trading (COMP0051)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Paolo Barucca",
        "Description": "Aims:The module aims at introducing algorithmic trading or risk premia strategies, their rationales, properties, design and use. These are presented as an introduction to the primary strategies and common themes in algorithmic trading, together with areas for further study and development, including the latest machine-learning methodologies. The goal is to give a broad overview of strategies in common use, so students can be equipped with methods for implementing these and exploring their known and provable properties.Learning outcomes:On successful completion of the module, a student will be able to:1.Analyse statistically trading strategies;2.Research, design, and develop new strategies;Content:-Introduction to trading;-Trading industry;-Data sources;-Trading strategies;-Order book dynamics;-Portfolio theory;-Statistical analysis of strategies;-Evaluating strategies;-Sharpe Ratio and other metrics;-Multiple hypothesis testing and model validation;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally-approved option or elective choice AND must (i) be familiar with fundamental probability and statistics concepts; (ii) be familiar with mathematical analysis."
    },
    "COMP0111": {
        "Title": "MSc Software Systems Engineering Group Project (COMP0111)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Jens Krinke",
        "Description": "Aims:The module gives students experience in undertaking and completing a large project in software systems engineering encompassing the full software development lifecycle, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:1.understand the nature of large, complex software systems and how that nature varies according to the context in which a system is situated;2.work in a team to develop software engineering solutions that address stakeholders' needs;3.plan, coordinate and manage software systems engineering projects under tight deadlines;4.understand and coordinate competing interests from different stakeholders;Content:There is no set syllabus. Groups of students will be given a project area in conjunction with a supervisor who is a member of the academic staff. The supervisor provides support and guidance. The project runs full-time from immediately after the examination period (May/June) onwards, with the students responsible for organising themselves and their work with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0031": {
        "Title": "Group Research Project (COMP0031)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Licia Capra",
        "Description": "Aims:The aim of the module is to give undergraduate students exposure to cutting-edge research undertaken in the department and enhance student awareness of the range of research in computer science. The module will allow undergraduate students to develop research skills in computer science and its specific sub-disciplines, by means of an actual research project, conducted in small groups and under the direct supervision of an active academic researcher.Learning outcomes:On successful completion of the module, a student will be able to:Content:Students will work in groups to conduct a research project and produce a report/paper presenting their results, under the supervision of a member of research/academic staff. This work will build on that undertaken in the prerequisite module, COMP0030 Research Methods.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) passed BSc/ MEng Computer Science (Years 1 and 2) at UCL; AND (ii) taken in Term 1: Research Methods (COMP0030).formulate research questions;plan and execute research activities in a systematic and organized way;critically evaluate and review their work and the work of others;effectively communicate their research work and findings;Course introduction, team formation, assignment to research supervisor (to be the same as for COMP0030 Research Methods);Definition of scope of the projects and agreement of the steps to be undertaken (project specific);Research steps undertaken under the guidance and supervision of supervisor. Tutorials will run on a weekly basis;Preparation of final deliverables. Each team is required to submit a paper/report, presenting the results of the project (e.g., hypothesis/research idea, methodology followed, experiments conducted, analysis of results). Each student is also required to submit a personal report giving (a) a critical assessment of the project results, (b) a detailed assessment of their own role, including a summary of what they contributed, and (c) a brief assessment of each group member; Reading lists are project-specific and will be provided on a per-group basis."
    },
    "COMP0153": {
        "Title": "Inclusive Design and Environments (COMP0153)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Mr Iain Mckinnon",
        "Description": "Students will learn about inclusive design with a focus on the built environment and creating Inclusive Cities. Inclusive design principles, methodologies and practice will be used to create a positive shift in mindset of disability and disabled people. The value and benefit of inclusive design will be analyzed and interrogated with case studies explored. The wider context will pick up current legislation, policy and guidance used in industry in the UK and abroad. Students will be encouraged to engage with end users (disabled and older people) to better understand current challenges and the wider impact. Each student will undertake a design project that embraces the principles of inclusive design resulting in a ‘prototype’ and Kickstarter video. This module (taught at UCL) will look at creating a positive shift in mindset around disability and inclusion resulting in mainstreaming inclusive design. Students will explore the difference between accessible and inclusive design, how to shape approaches to design and problem solving to be inclusive from the beginning (built in and not bolted on) and look at industry insights and first-hand user accounts and experiences. The module will look at how design decisions play a significant role and impact many people’s abilities to carry out day to day activities with comfort, ease and joy. As well as the wider UK and Global context regarding attitudes and approach. Aims:Key aims of the module include:Learning outcomes:On completion of this module students will be able to:Delivery The module is delivered through a mixture of classroom-basedlectures, seminars and fieldwork.  Create a positive shift in mindset around disability and inclusion resulting in mainstreaming inclusive designRecognise the important of engagement with end users (disabled people)Students can advocate inclusive design to their peers and colleaguesConfidently describe the difference between accessible and inclusive design and apply in all future work and also be confident in advocating inclusive design to peers and colleagues.Shape approaches to design and problem solving to be inclusive from the beginning (built in and not bolted on).Industry insights and first-hand user accounts and experiences – experiential learning.Confidently describe some of the key challenges faced by many disabled people in using and interacting with the world around them and how design decisions play a significant role and impact many people’s abilities to carry out day to day activities with comfort, ease and joy.Understand the hierarchy and role of current legislation, policy and guidance in the UK (and abroad).Understand the UK and global content regarding attitudes and approach.Discuss and elaborate on both good and bad practical, real world examples of inclusive design across a range of sectors and geographic locations.Genuinely understand and succinctly describe the many advantages of delivering genuinely inclusive designs including moral, social, economic and business, sustainability and public health reasons and the benefits inclusive design brings to all of us throughout our lives.Have the skills and the confidence to engage with and involve end users, including disabled and older people and understand/appreciate the advantages this brings.Have the tools to elicit user needs from disabled people and formulate these into project brief requirements.Confidently describe the various models of disability i.e. the difference between the social and medical model and have formed their own opinions on both of these.Have the confidence and tools to test their designs with end users and have developed techniques to incorporate this feedback into their designs.Know how to create an equally positive experience for all end users providing the same services, in the same way, to all of us, equally."
    },
    "COMP0014": {
        "Title": "Intelligent Systems (COMP0014)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr John Dowell",
        "Description": "Aims:To introduce primary theoretical constructs in the field of intelligent systems and to examine significant methods illustrating those constructs, together with examples of their application.Learning outcomes:On successful completion of the module, a student will be able to:1.understand foundational theories in artificial intelligence including: the structural dimensions of intelligent agents in relation to the capabilities they achieve in different environments, and; the differences between symbolic and sub-symbolic agent architectures.2.understand established and emerging methods for providing the primary capabilities of intelligent agents such as their decision-making, problem solving and learning.3.understand the technical challenges involved in modelling and building intelligent systems for different application settings.Content:-Systems and intelligence;-Agents;-Agent architectures;-Problem solving;-Knowledge representation;-Decision-making;-Learning;-Sensing, acting and communicating.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have:-A level Maths (or equivalent);-English Language at the UCL Standard level."
    },
    "COMP0011": {
        "Title": "Mathematics and Statistics (COMP0011)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Lewis Griffin",
        "Description": "Aims:To provide a grounding in Mathematics and Statistics most relevant to a Computer Science undergraduate degree.Learning outcomes:On successful completion of the module, a student will be able to apply concepts in mathematics and statistics to frame problems, and reason about them. Specific topics are detailed in the contents section.Content:Mathematics:Statistics:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice.Trig, exp and log;Polynomials;Limits and continuity;Differential calculus of one and two variables;Integration;Series summation and power series;Complex numbers;Vector spaces;Matrices;Linear Algebra.Probability, descriptive statistics;Discrete random variables;Continuous random variables;Statistical estimation;Hypothesis testing."
    },
    "COMP0045": {
        "Title": "Probability Theory and Stochastic Processes (COMP0045)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Guido Germano",
        "Description": "Aims:A systematic introduction to probability theory and stochastic processes as well as some of their applications, with worked-out exercises and without stressing too much the measure-theoretical aspects and other mathematical formalisms. The main target is students with an undergraduate degree in physics, engineering, computer science and the like, who have a good basis in calculus and linear algebra and may have already come into contact with aspects of probability and statistics for ad hoc applications like data analysis, transport equations, and quantum mechanics, but have not attended yet a dedicated course on this subject. The material unfolds with references to its historical development and early applications in gambling, physics and engineering, ending with current-day applications in finance.Learning outcomes:Familiarity with probability theory, stochastic processes in discrete and continuous time, stochastic calculus, and basic applications in physics, engineering and finance.Content:Elementary probability:-Probability space, Kolmogorov’s axioms;-Joint and conditional probability, independent events;-Total probability theorem, Bayes’ theorem;Random variables:-Random variables; probability distribution and density functions;-Multivariate, marginal and conditional distribution and density functions;-Transformation of random variables, sum, product;-Mean, variance, covariance, correlation, moments;-Chebyshev inequality, law of large numbers;-Median, mode, skewness, kurtosis, entropy, mutual information;-Fourier transform, characteristic function, moment- and cumulant-generating functions;-Central limit theorem, Lévy stable distributions;-Gaussian, Poisson and exponential distributions;Random functions or stochastic processes:-Definitions, auto- and cross-covariance/correlation, stationarity, Wiener-Khinchin theorem;-Ergodicity, classification with respect to memory, martingales and semimartingales;-Markov and semi-Markov processes, Chapman-Kolmogorov equation;-Forward ad backward time-evolution equations;-Jump processes: the master equation;-Diffusion processes: the Fokker-Planck equation;-Deterministic processes: the Liouville equation;-Random telegraph signal, random walk, hidden Markov model;-Poisson, compound Poisson and renewal processes, continuous-time random walk;-Wiener and Ornstein-Uhlenbeck processes;-Langevin equation, stochastic differential equations, Feynman-Kac theorem;-Laplace transform, solution of the standard diffusion equation in Fourier-Laplace space;-Stochastic integral: Ito and Stratonovich, Ito’s formula;-Geometric Brownian motion, Black-Scholes equation;-Feller square-root, Rayleigh and Bessel processes;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have knowledge of calculus and linear algebra.Please see the maths part of \"Introduction to Mathematics and Programming for Finance\"."
    },
    "COMP0059": {
        "Title": "Information Security Management (COMP0059)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Ms Albese Demjaha",
        "Description": "Aims:The course will provide the student with an understanding of the principles of information security management that are commonly used in business. It will introduce the student to commonly used frameworks and methods and explore critically the suitability and appropriateness of these for addressing today's organisational security needs.Learning outcomes:The successful participant will:Content:The course covers the principles of applied information security management and is suitable for those who are looking for an in-depth understanding of security management in medium to large organisations.The course comprises the following topics:Under these broad headings, the following areas covered:In order to be eligible to select this module as optional or elective, where available, students must meet all prerequisite conditions to the satisfaction of the module leader. Places for students taking the module as optional or elective are limited and will be allocated according to the department’s module selection policy.Requisites:To be eligible to select this module, a student must ​be registered on a programme for which it is a formally approved option or elective choice. Basic understanding of IT is a requirement, whereas prior security knowledge is preferable. Technical skills are not a requirement, but the module will cover concepts that may be considered ‘technical’ by students with no prior knowledge of IT or security. Due to the nature of the assessment, good written and verbal English skills are an advantage for this module.Have an understanding of the key themes and principles of information security management and be able to apply these principles in designing solutions to managing security risks effectively;Understand how to apply the principles of information security management in a variety of contexts;Have an appreciation of the interrelationship between the various elements of information security management and its role in protecting organisations.governance and security policy;threat and vulnerability management;incident management;risk management;information leakage;crisis management and business continuity;legal and compliance;security awareness and security implementation considerations.ISO 27000 series and the Plan-Do-Check-Act model;assessment of threats and vulnerabilities;incident response;forensics and investigations;risk assessment and risk management frameworks;dealing with classified/ sensitive data;contingency planning;legal and regulatory drivers and issues;certification;common criteria;security awareness;education and training;and practical considerations when implementing the frameworks to address current and future threats."
    },
    "COMP0046": {
        "Title": "Networks and Systemic Risk (COMP0046)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Fabio Caccioli",
        "Description": "Aims:Overall, the module represents an introduction to the topic of systemic risk and stress propagation in networked systems. The first part of the module presents a general introduction to complex networks and dynamical processes; the second part is focused on specific applications to the study of contagion in financial networks.Learning outcomes:On successful completion of the module, a student will be able to:Content:Introduction to complex networks:Collective behaviour:Application to interbank networks and systemic risk:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have familiarity with basic probability and calculus.The Coursework requires basic programming skills.compute network metrics and provide a statistical description of networks;analyse dynamical processes on networks;implement simple algorithms for the analysis of financial contagion.Basic concepts of networks (graphs, subgraphs, adjacency matrix, undirected, directed and weighted networks), common metrics (degree, centrality, clustering, degree distribution, excess degree distribution, mixing patterns, real world examples);Network models (random networks, configuration model, small world, preferential attachment);Maximum-entropy networks;Emergence of a giant cluster. Robustness to random and targeted attacks;Epidemic spreading processes on networks;Cascade processes on networks;Interbank networks and their properties;Furfine default algorithm and cascades of defaults;Clearing vector of payments and the Eisenberg-Noe model;Distress propagation in absence of default: DebtRank;Overlapping portfolios and price mediated contagion;Leverage cycles;"
    },
    "COMP0070": {
        "Title": "Algorithmics (COMP0070)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Denise Gorse",
        "Description": "Aims:To introduce more formal aspects of algorithms and data structures, techniques for analysing the complexity of algorithms, and to discuss the limits of computation (intractable and undecidable problems).Learning outcomes:On successful completion of the module, a student will be able to:1. Understand how to use a variety of data structures;2. Understand a variety of common algorithms and why some are more efficient than others;3. Carry out time complexity analysis in a variety of scenarios;4. Discuss intractable and undecidable problems.Content:Course Introduction:Algorithms and Data Structures:-Why study algorithms and data structures?-Pseudocode;-Efficiency of algorithms;-Recursion;-Arrays;-Approaches to algorithm design including greedy and divide and conquer;-Graph traversal.Analysis of Algorithms:-Empirical vs theoretical analysis;-Algorithmic complexity;-O-notation;-Forms of time complexity analysis (worst case, average case, best worst case);-Sums of series and simple summation formulae;-Recursive algorithms and recurrence relations.Limits of Computation:-Tractable and intractable problems;-The complexity classes P, NP, NPC;-Undecidability.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have also selected COMP0066, COMP0067 and COMP0068."
    },
    "COMP0110": {
        "Title": "MSc Software Systems Engineering Research Project (COMP0110)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Jens Krinke",
        "Description": "Aims:To give students experience of undertaking and completing a large piece of work aimed at making a novel research contribution, applying techniques learned throughout the programme, including the technical skills of analysis, design and implementation.Learning outcomes:On successful completion of the module, a student will be able to:1.work individually developing a research project;2.plan and execute research activities in a systematic and organized way;3.critically evaluate and review their work and the work of others;4.effectively communicate their research work and findings;Content:Overview:-There is no set syllabus: students identify a member of the Software Systems Engineering faculty who is willing to supervise them. Together, a student and supervisor co-operate to specify and detail a project of mutual interest. The supervisor provides support and guidance. Although students are encouraged to start early and begin meeting with their supervisor as they have time during terms 2 and 3, the project becomes the students' full-time focus after the examination period (May/June) with the student responsible for organising themselves and their work, with advice from their supervisor. Students are expected to meet with their supervisor on a regular basis, as agreed with the supervisor;Project report:-The main report documents the results of the project, and is expected to be a substantial and properly structured academic document. The project guidelines available on Moodle give detailed information about the required content. The deadline for submission is normally the first week of September;Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have successfully passed COMP0108 in Term 1 and secured a Project Supervisor."
    },
    "COMP0068": {
        "Title": "Computer Architecture and Operating Systems (COMP0068)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Ghita Kouadri Mostefaoui",
        "Description": "Aims:The aim of this module is to provide fundamental knowledge about how a modern computer works. We will provide an overview of the key hardware components making up a computer and how these components work together. We will examine the architecture of a real processor including its assembly language and machine code. We will learn about the fundamental aspects of operating systems and how these provide an interface between the user (application program) and the computer hardware. We will learn how high-level languages can be translated into assembly language and then low-level machine code which drives the computer hardware. Students will become familiar with computer terminology and key design aspects which make modern computers so efficient. Learning outcomes:-Manipulate different computer data representations (binary, hex, floating point numbers, machine code instructions,etc.);-Describe the internal structure of a processor and how it works;-Explain how modern computers handle memory and input/output;-Write and understand assembly language programs;-Describe how high-level languages are translated to assembly language and subsequently machine code that drives the hardware;-Describe how operating systems provide an interface between the user / application program and the underlying hardware of the computer;-Explain how key aspects of the operating system work such as handling processes, and memory management;-Describe in detail how, overall, a modern computer works including accurately employing key computer terminology.Content:-Top-down high level overview of a computer: the main components making up a computer and how they interact;-Computer arithmetic: binary, hexadecimal, fixed size arithmetic, 2s-complement, 16s-complement;-Data representation: big-endian, little-endian, fixed point, floating point, character strings;-Assembly language and machine code;-Translation of high-level languages into assembly and object/executable files;-Inside the CPU: internal structure of a processor that allows it to execute machine code;-Memory and disk: understanding basic concepts about memory-Structure of operating systems: processes and process scheduling, synchronization, and memory management;Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is a formally approved option or elective choice AND have A-level Mathematics (or equivalent)."
    },
    "COMP0076": {
        "Title": "MSc Financial Risk Management Project (COMP0076)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "60",
        "Module Leader": "Dr Fabio Caccioli",
        "Description": "Aims:To give students the experience of undertaking and completing a substantial piece of individual work, applying knowledge learned from terms 1 and 2 of the programme plus the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard.Learning outcomesOn successful completion of the module, a student will be able to:1. Work individually undertaking a major project2. Plan and coordinate project activities to meet deadlines3. Make realistic work commitments4. Write a substantial report to document the project resultsContent:After a project has been agreed, each student is allocated an academic supervisor, plus an industrial supervisor if the project is within a placement. The supervisors provide support and guidance. The project starts immediately after the main examination period, i.e. in early June. The students are responsible for organising themselves and their work, with advice from their supervisors. Students are expected to meet with their supervisors on a regular basis. A typical project will comprise approximately 4 weeks of background reading, analysis and design, followed by 8 weeks of implementation and finally 2 weeks to complete the writing of an in-depth dissertation of about 50,000 words or 50 pages which documents the results of the project. The deadline for submission is usually within the first two weeks of September.Requisites:In order to be eligible to select this module, a student must be registered on a programme for which it is formally available."
    },
    "COMP0019": {
        "Title": "Computer Systems (COMP0019)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Brad Karp",
        "Description": "Aims:The aim for this module is to have our advanced undergraduates develop a “whole-stack” understanding of the complex interactions among modern computer system hardware (specifically, a modern, multi-core CPU and its memory hierarchy), a modern operating system, and the applications that run atop them. These interactions dictate application correctness and performance. These fundamental principles will be taught in the concrete framework of the x86 CPU architecture and the Linux/UNIX operating system. Students should not only understand these fundamental principles, but be able to put them into practice in real C programs.Learning outcomes:On successful completion of the module, a student will be able to:Content:This module teaches students topics in computer systems design and systems programming, with an emphasis on the C programming language, Intel CPU architecture, and UNIX/Linux operating system architecture. Topics covered will include:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must already have basic proficiency in C programming (including dynamic memory allocation), as well as basic knowledge of computer arithmetic (e.g., two's complement integer representation) and prior exposure to assembly language for some CPU. UCL CS undergraduates will normally have met these prerequisites by having passed the relevant compulsory modules in prior years.understand the C and Linux/UNIX programming environment, from the hardware (memory hierarchy, memory model between cores) to low-level operating system functionality (file and network I/O, process management, virtual memory system, program linking and loading);understand the interactions between hardware and the C and Linux/UNIX programming environment that affect application correctness and performance;design correct applications that perform well in the C and Linux/UNIX programming environment.Machine-level representation of code and data (assembly language; how C constructs are compiled into x86 assembly language; machine-level representations of data types and machine and C arithmetic; stack frame structure in C on the x86; array layout in memory; pointer arithmetic);Use of the gdb debugger on C code in the Linux/UNIX environment;Undefined behaviour in the C language specification and real C programs, and its consequences;The memory hierarchy: registers, L1 caches, L2 caches, L3 caches, DRAM, SSD, disk; cache architectures; performance implications of caches on program performance;Linking: static linking, relocatable object code, symbol resolution, loading executables, dynamic linking and shared libraries, position-independent code, interposition;Processes, signals, context switches, exceptions, system call error handling, job control, process creation and management;Virtual memory: address translation, memory mapping, dynamic memory allocation, memory-related bugs in C;System I/O: filesystem I/O, system call interface and semantics;Concurrent systems programming: threads in C on Linux/UNIX, x86 memory consistency model, races, deadlocks."
    },
    "COMP0039": {
        "Title": "Entrepreneurship: Theory and Practice (COMP0039)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Professor Philip Treleaven",
        "Description": "Aims:This is UCL’s principal Entrepreneurship course for students seeking to develop and test a new business idea. Over the past ten years we have taught entrepreneurship to around 3000 students resulting in the launch of a number of innovative businesses. The course covers: the new business lifecycle (selecting and testing a moneymaking idea, preparing a business plan, raising finance, the Exit); aspects of new business operation (registering a company, setting up your office, understanding financial statements); and exploiting new e-commerce tools and techniques (doing business electronically, company web sites, online business software and services).Learning outcomes:On successful completion of the module, a student will be able to:1. apply first-hand experience of the selection and deployment of tools, techniques and theories for the identification, validation and structuring of a new business venture.Content:-Invention and innovation - finding and qualifying new opportunities. Business Model Generation.-Confirming customer needs and testing market demand. Customer development.-Lean Start-ups: what is your minimum viable product? The value of prototyping.-Delivery channels and customer relationships. Business Plan and Preparing a Pitch.-Financial Forecasting, Costing and Pricing. Management accounts. Cash-flow and profit and loss.-Developing sustainable competitive advantage. Intellectual Property Rights.-Corporate form and structure. Founder dilemmas - team, equity, remuneration etc. Developing your brand.-Defining and testing critical business model uncertainties. Measuring progress.-Common start-up metrics.-Sources of Funding. Presenting to VCs.-Class presentations; conclusions and next steps.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice."
    },
    "COMP0120": {
        "Title": "Numerical Optimisation (COMP0120)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Marta Betcke",
        "Description": "Aims:The aim is to provide the students with an overview of the optimization landscape and a practical understanding of most popular optimization techniques and an ability to apply these methods to problems they encounter in their studies e.g. MSc project/dissertation and later in their professional carrier.Learning outcomes:On successful completion of the module, a student will be able to:Content:This module teaches a comprehensive range of state of the art numerical optimization techniques. It covers a number of approaches to unconstrained and constrained problems, methods for smooth and non-smooth convex problems as well as basics of non-convex optimisation;Syllabus:Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) strong competency in Linear Algebra and Analysis; (ii) fluency in matrix calculus; and (iii) working knowledge of Matlab.The Coursework needs to be completed using Matlab and all the solutions are provided in Matlab.practically understand a comprehensive set of optimization techniques and their range of applicability;implement mathematical methods;apply these techniques to problems they encounter in their studies e.g. MSc project/dissertation and later in their professional carrier;critically evaluate the results, which the methods produced for a given problem;Mathematical formulation and types of optimisation problems;Unconstrained optimization theory e.g.: local minima, first and second order conditions;Unconstrained optimization methods e.g.: line-search, trust region, gradient descent, conjugate gradient, Newton, Quasi-Newton, inexact Newton;Least Squares problems;Constrained optimization theory e.g.: local and global solutions, first order optimality, second order optimality, constraints qualification, equality and inequality constraints, duality, KKT conditions;Constrained optimization methods for equality and inequality constraints e.g.: constraints elimination, feasible and infeasible Newton, primal-dual method, penalty, barrier and augmented Lagrangian methods, interior point methods;Non-smooth optimization e.g. subgradient calculus, proximal operator, operator splitting, ADMM, non-smooth penalties e.g. L1 or TV;"
    },
    "COMP0088": {
        "Title": "Introduction to Machine Learning (COMP0088)",
        "Faculty": "Faculty of Engineering Sciences",
        "Teaching Department": "Computer Science",
        "Credit Value": "15",
        "Module Leader": "Dr Iason Kokkinos",
        "Description": "Aims:To have a full understanding of the learning outcomes.Learning outcomes:On successful completion of the module, a student will be able to:1. understand machine learning at both the theoretical and practical level;2. solve real-world machine learning problems using the right tools.Content:Introduction to Supervised Learning:-Linear models for regression and classification: least squares, logistic regression;-Concepts of overfitting and regularization, L1 and L2 regularisation;-Boosting, Decision Trees, Random Forests;-Support Vector Machines;-Deep Learning: Neural Networks for regression and classification, Recurrent Neural Networks, applications to Computer Vision;-Introduction to Unsupervised Learning;-K-means, Principal Components Analysis, Sparse Coding;-Expectation-Maximization, Mixture of Gaussians, Factor Analysis;-Deep Autoencoders, Generative Adversarial Networks, applications to Computer Vision.Requisites:In order to be eligible to select this module, a student must ​be registered on a programme for which it is a formally-approved option or elective choice AND must have (i) an understanding of Calculus, Linear Algebra and Probability Theory; and (ii) proficiency in coding (preferably in Python)."
    }
}